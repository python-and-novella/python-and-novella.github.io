"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[81932],{82779:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>d,toc:()=>u});var t=r(74848),o=r(28453),a=r(11470),l=r(19365);const s={title:"Draggable",sidebar_label:"Draggable"},c=void 0,d={id:"controls/draggable",title:"Draggable",description:"A control that can be dragged from to a DragTarget.",source:"@site/docs/controls/draggable.md",sourceDirName:"controls",slug:"/controls/draggable",permalink:"/docs/flet-doc/docs/controls/draggable",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/draggable.md",tags:[],version:"current",frontMatter:{title:"Draggable",sidebar_label:"Draggable"},sidebar:"docs",previous:{title:"AudioRecorder",permalink:"/docs/flet-doc/docs/controls/audiorecorder"},next:{title:"DragTarget",permalink:"/docs/flet-doc/docs/controls/dragtarget"}},i={},u=[{value:"Examples",id:"examples",level:2},{value:"Drag and drop colors",id:"drag-and-drop-colors",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>axis</code>",id:"axis",level:3},{value:"<code>affinity</code>",id:"affinity",level:3},{value:"<code>content</code>",id:"content",level:3},{value:"<code>content_feedback</code>",id:"content_feedback",level:3},{value:"<code>content_when_dragging</code>",id:"content_when_dragging",level:3},{value:"<code>group</code>",id:"group",level:3},{value:"<code>max_simultaneous_drags</code>",id:"max_simultaneous_drags",level:3},{value:"<code>Events</code>",id:"events",level:2},{value:"<code>on_drag_complete</code>",id:"on_drag_complete",level:3},{value:"<code>on_drag_start</code>",id:"on_drag_start",level:3}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A control that can be dragged from to a ",(0,t.jsx)(n.a,{href:"/docs/controls/dragtarget",children:"DragTarget"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["When a draggable control recognizes the start of a drag gesture, it displays a ",(0,t.jsx)(n.a,{href:"#content_feedback",children:(0,t.jsx)(n.code,{children:"content_feedback"})})," control that tracks the user's finger across the screen. If the user lifts their finger while on top of a ",(0,t.jsx)(n.a,{href:"/docs/controls/dragtarget",children:"DragTarget"}),", that target is given the opportunity to complete drag-and-drop flow."]}),"\n",(0,t.jsxs)(n.p,{children:["This control displays ",(0,t.jsx)(n.a,{href:"#content",children:(0,t.jsx)(n.code,{children:"content"})})," when zero drags are under way.\nIf ",(0,t.jsx)(n.a,{href:"#content_when_dragging",children:(0,t.jsx)(n.code,{children:"content_when_dragging"})})," is not ",(0,t.jsx)(n.code,{children:"None"}),", this control instead\ndisplays ",(0,t.jsx)(n.code,{children:"content_when_dragging"})," when one or more drags are underway. Otherwise, this widget always displays ",(0,t.jsx)(n.code,{children:"content"}),"."]}),"\n","\n",(0,t.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"https://flet-controls-gallery.fly.dev/utility/draggable",children:"Live example"})}),"\n",(0,t.jsx)(n.h3,{id:"drag-and-drop-colors",children:"Drag and drop colors"}),"\n",(0,t.jsx)("img",{src:"/img/docs/controls/drag-and-drop/drag-and-drop-colors.gif",className:"screenshot-50"}),"\n",(0,t.jsx)(a.A,{groupId:"language",children:(0,t.jsx)(l.A,{value:"python",label:"Python",default:!0,children:(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import flet\nfrom flet import (\n    Column,\n    Container,\n    Draggable,\n    DragTarget,\n    DragTargetAcceptEvent,\n    Page,\n    Row,\n    border,\n    colors,\n)\n\n\ndef main(page: Page):\n    page.title = "Drag and Drop example"\n\n    def drag_will_accept(e):\n        e.control.content.border = border.all(\n            2, colors.BLACK45 if e.data == "true" else colors.RED\n        )\n        e.control.update()\n\n    def drag_accept(e: DragTargetAcceptEvent):\n        src = page.get_control(e.src_id)\n        e.control.content.bgcolor = src.content.bgcolor\n        e.control.content.border = None\n        e.control.update()\n\n    def drag_leave(e):\n        e.control.content.border = None\n        e.control.update()\n\n    page.add(\n        Row(\n            [\n                Column(\n                    [\n                        Draggable(\n                            group="color",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.CYAN,\n                                border_radius=5,\n                            ),\n                            content_feedback=Container(\n                                width=20,\n                                height=20,\n                                bgcolor=colors.CYAN,\n                                border_radius=3,\n                            ),\n                        ),\n                        Draggable(\n                            group="color",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.YELLOW,\n                                border_radius=5,\n                            ),\n                        ),\n                        Draggable(\n                            group="color1",\n                            content=Container(\n                                width=50,\n                                height=50,\n                                bgcolor=colors.GREEN,\n                                border_radius=5,\n                            ),\n                        ),\n                    ]\n                ),\n                Container(width=100),\n                DragTarget(\n                    group="color",\n                    content=Container(\n                        width=50,\n                        height=50,\n                        bgcolor=colors.BLUE_GREY_100,\n                        border_radius=5,\n                    ),\n                    on_will_accept=drag_will_accept,\n                    on_accept=drag_accept,\n                    on_leave=drag_leave,\n                ),\n            ]\n        )\n    )\n\n\nflet.app(main)\n'})})})}),"\n",(0,t.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,t.jsx)(n.h3,{id:"axis",children:(0,t.jsx)(n.code,{children:"axis"})}),"\n",(0,t.jsx)(n.p,{children:"The axis to restrict this draggable's movement."}),"\n",(0,t.jsxs)(n.p,{children:["When axis is set to ",(0,t.jsx)(n.code,{children:"Axis.HORIZONTAL"}),", this control can only be dragged horizontally.\nWhen axis is set to ",(0,t.jsx)(n.code,{children:"Axis.VERTICAL"}),", this control can only be dragged vertically."]}),"\n",(0,t.jsxs)(n.p,{children:["Value is of type ",(0,t.jsx)(n.a,{href:"/docs/reference/types/axis",children:(0,t.jsx)(n.code,{children:"Axis"})})," and defaults to ",(0,t.jsx)(n.code,{children:"None"})," - no restriction."]}),"\n",(0,t.jsx)(n.h3,{id:"affinity",children:(0,t.jsx)(n.code,{children:"affinity"})}),"\n",(0,t.jsxs)(n.p,{children:["Controls how this control competes with other gestures to initiate a drag.\nIf set to ",(0,t.jsx)(n.code,{children:"None"}),", this widget initiates a drag as soon as it recognizes a tap down gesture, regardless of any directionality.\nIf set to ",(0,t.jsx)(n.code,{children:"Axis.HORIZONTAL"})," or ",(0,t.jsx)(n.code,{children:"Axis.VERTICAL"}),", then this control will compete with other horizontal (or vertical, respectively) gestures."]}),"\n",(0,t.jsxs)(n.p,{children:["Value is of type ",(0,t.jsx)(n.a,{href:"/docs/reference/types/axis",children:(0,t.jsx)(n.code,{children:"Axis"})}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"content",children:(0,t.jsx)(n.code,{children:"content"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"Draggable"})," control displays ",(0,t.jsx)(n.a,{href:"#content",children:(0,t.jsx)(n.code,{children:"content"})})," when zero drags are under way.\nIf ",(0,t.jsx)(n.a,{href:"#content_when_dragging",children:(0,t.jsx)(n.code,{children:"content_when_dragging"})})," is not ",(0,t.jsx)(n.code,{children:"None"}),", this control instead\ndisplays ",(0,t.jsx)(n.code,{children:"content_when_dragging"})," when one or more drags are underway. Otherwise, this control always displays ",(0,t.jsx)(n.code,{children:"content"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"content_feedback",children:(0,t.jsx)(n.code,{children:"content_feedback"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Control"})," to show under the pointer when a drag is under way."]}),"\n",(0,t.jsx)(n.h3,{id:"content_when_dragging",children:(0,t.jsx)(n.code,{children:"content_when_dragging"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"Control"})," to display instead of ",(0,t.jsx)(n.code,{children:"content"})," when one or more drags are under way."]}),"\n",(0,t.jsxs)(n.p,{children:["If this is ",(0,t.jsx)(n.code,{children:"None"}),", then this widget will always display ",(0,t.jsx)(n.code,{children:"content"})," (and so the drag source representation will not change while a drag is under way)."]}),"\n",(0,t.jsx)(n.h3,{id:"group",children:(0,t.jsx)(n.code,{children:"group"})}),"\n",(0,t.jsxs)(n.p,{children:["A group this draggable belongs to. For ",(0,t.jsx)(n.a,{href:"/docs/controls/dragtarget",children:(0,t.jsx)(n.code,{children:"DragTarget"})})," to accept incoming drag\nboth ",(0,t.jsx)(n.code,{children:"Draggable"})," and ",(0,t.jsx)(n.code,{children:"DragTarget"})," must be in the same ",(0,t.jsx)(n.code,{children:"group"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"max_simultaneous_drags",children:(0,t.jsx)(n.code,{children:"max_simultaneous_drags"})}),"\n",(0,t.jsx)(n.p,{children:"The number of simultaneous drags to support."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Set this to ",(0,t.jsx)(n.code,{children:"0"})," if you want to prevent the draggable from actually being dragged."]}),"\n",(0,t.jsxs)(n.li,{children:["Set this to ",(0,t.jsx)(n.code,{children:"1"}),' if you want to only allow the drag source to have one item dragged at a time. In this case, consider supplying an "empty" widget for ',(0,t.jsx)(n.code,{children:"content_when_dragging"})," to create the illusion of actually moving ",(0,t.jsx)(n.code,{children:"content"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Defaults to ",(0,t.jsx)(n.code,{children:"None"})," - no limit."]}),"\n",(0,t.jsx)(n.h2,{id:"events",children:(0,t.jsx)(n.code,{children:"Events"})}),"\n",(0,t.jsx)(n.h3,{id:"on_drag_complete",children:(0,t.jsx)(n.code,{children:"on_drag_complete"})}),"\n",(0,t.jsx)(n.p,{children:"Fires when this draggable is dropped and accepted by a DragTarget."}),"\n",(0,t.jsx)(n.h3,{id:"on_drag_start",children:(0,t.jsx)(n.code,{children:"on_drag_start"})}),"\n",(0,t.jsx)(n.p,{children:"Fires when this draggable starts being dragged."})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},19365:(e,n,r)=>{r.d(n,{A:()=>l});r(96540);var t=r(18215);const o={tabItem:"tabItem_Ymn6"};var a=r(74848);function l(e){let{children:n,hidden:r,className:l}=e;return(0,a.jsx)("div",{role:"tabpanel",className:(0,t.A)(o.tabItem,l),hidden:r,children:n})}},11470:(e,n,r)=>{r.d(n,{A:()=>w});var t=r(96540),o=r(18215),a=r(23104),l=r(56347),s=r(205),c=r(57485),d=r(31682),i=r(70679);function u(e){var n,r;return null!=(n=null==(r=t.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,t.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:r.filter(Boolean))?n:[]}function h(e){const{values:n,children:r}=e;return(0,t.useMemo)((()=>{const e=null!=n?n:function(e){return u(e).map((e=>{let{props:{value:n,label:r,attributes:t,default:o}}=e;return{value:n,label:r,attributes:t,default:o}}))}(r);return function(e){const n=(0,d.X)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error('Docusaurus error: Duplicate values "'+n.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[n,r])}function g(e){let{value:n,tabValues:r}=e;return r.some((e=>e.value===n))}function p(e){let{queryString:n=!1,groupId:r}=e;const o=(0,l.W6)(),a=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=r?r:null}({queryString:n,groupId:r});return[(0,c.aZ)(a),(0,t.useCallback)((e=>{if(!a)return;const n=new URLSearchParams(o.location.search);n.set(a,e),o.replace({...o.location,search:n.toString()})}),[a,o])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:o}=e,a=h(e),[l,c]=(0,t.useState)((()=>function(e){var n;let{defaultValue:r,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(r){if(!g({value:r,tabValues:t}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+r+'" but none of its children has the corresponding value. Available values are: '+t.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return r}const o=null!=(n=t.find((e=>e.default)))?n:t[0];if(!o)throw new Error("Unexpected error: 0 tabValues");return o.value}({defaultValue:n,tabValues:a}))),[d,u]=p({queryString:r,groupId:o}),[f,x]=function(e){let{groupId:n}=e;const r=function(e){return e?"docusaurus.tab."+e:null}(n),[o,a]=(0,i.Dv)(r);return[o,(0,t.useCallback)((e=>{r&&a.set(e)}),[r,a])]}({groupId:o}),b=(()=>{const e=null!=d?d:f;return g({value:e,tabValues:a})?e:null})();(0,s.A)((()=>{b&&c(b)}),[b]);return{selectedValue:l,selectValue:(0,t.useCallback)((e=>{if(!g({value:e,tabValues:a}))throw new Error("Can't select invalid tab value="+e);c(e),u(e),x(e)}),[u,x,a]),tabValues:a}}var x=r(92303);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var m=r(74848);function j(e){let{className:n,block:r,selectedValue:t,selectValue:l,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,a.a_)(),i=e=>{const n=e.currentTarget,r=c.indexOf(n),o=s[r].value;o!==t&&(d(n),l(o))},u=e=>{var n;let r=null;switch(e.key){case"Enter":i(e);break;case"ArrowRight":{var t;const n=c.indexOf(e.currentTarget)+1;r=null!=(t=c[n])?t:c[0];break}case"ArrowLeft":{var o;const n=c.indexOf(e.currentTarget)-1;r=null!=(o=c[n])?o:c[c.length-1];break}}null==(n=r)||n.focus()};return(0,m.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":r},n),children:s.map((e=>{let{value:n,label:r,attributes:a}=e;return(0,m.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>c.push(e),onKeyDown:u,onClick:i,...a,className:(0,o.A)("tabs__item",b.tabItem,null==a?void 0:a.className,{"tabs__item--active":t===n}),children:null!=r?r:n},n)}))})}function v(e){let{lazy:n,children:r,selectedValue:o}=e;const a=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===o));return e?(0,t.cloneElement)(e,{className:"margin-top--md"}):null}return(0,m.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==o})))})}function _(e){const n=f(e);return(0,m.jsxs)("div",{className:(0,o.A)("tabs-container",b.tabList),children:[(0,m.jsx)(j,{...n,...e}),(0,m.jsx)(v,{...n,...e})]})}function w(e){const n=(0,x.A)();return(0,m.jsx)(_,{...e,children:u(e.children)},String(n))}},28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>s});var t=r(96540);const o={},a=t.createContext(o);function l(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);