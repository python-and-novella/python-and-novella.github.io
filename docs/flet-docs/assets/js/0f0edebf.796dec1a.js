"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[97265],{64651:(e,s,i)=>{i.r(s),i.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>a});var t=i(74848),n=i(28453);const r={title:"Publish app to a static website",sidebar_label:"Static website",slug:"/publish/web/static-website"},l=void 0,o={id:"publish/web/static-website/index",title:"Publish app to a static website",description:"Introduction",source:"@site/docs/publish/web/static-website/index.md",sourceDirName:"publish/web/static-website",slug:"/publish/web/static-website",permalink:"/docs/flet-docs/docs/publish/web/static-website",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/publish/web/static-website/index.md",tags:[],version:"current",frontMatter:{title:"Publish app to a static website",sidebar_label:"Static website",slug:"/publish/web/static-website"},sidebar:"docs",previous:{title:"Web",permalink:"/docs/flet-docs/docs/publish/web"},next:{title:"Hosting",permalink:"/docs/flet-docs/docs/publish/web/static-website/hosting"}},d={},a=[{value:"Introduction",id:"introduction",level:2},{value:"Async and threading",id:"async-and-threading",level:3},{value:"<code>flet build web</code>",id:"flet-build-web",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Building website",id:"building-website",level:3},{value:"Testing website",id:"testing-website",level:3},{value:"Packaging assets",id:"packaging-assets",level:3},{value:"URL strategy",id:"url-strategy",level:3},{value:"Web renderer",id:"web-renderer",level:3},{value:"Color emojis",id:"color-emojis",level:3},{value:"Hosting website in a sub-directory",id:"hosting-website-in-a-sub-directory",level:3},{value:"Splash screen",id:"splash-screen",level:3},{value:"<code>flet publish</code>",id:"flet-publish",level:2},{value:"Publish app as a static website",id:"publish-app-as-a-static-website",level:3},{value:"Testing website",id:"testing-website-1",level:3},{value:"Loading packages",id:"loading-packages",level:3},{value:"Pre-release Python packages",id:"pre-release-python-packages",level:4},{value:"Assets",id:"assets",level:3},{value:"URL strategy",id:"url-strategy-1",level:3},{value:"Web renderer",id:"web-renderer-1",level:3},{value:"Color emojis",id:"color-emojis-1",level:3},{value:"Hosting website in a sub-directory",id:"hosting-website-in-a-sub-directory-1",level:3}];function c(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsxs)(s.p,{children:["Flet CLI provides ",(0,t.jsx)(s.code,{children:"flet build web"})," and ",(0,t.jsx)(s.code,{children:"flet publish"})," commands that allow publishing Flet app into a standalone static website (SPA) that runs entirely in the browser with ",(0,t.jsx)(s.a,{href:"https://pyodide.org/en/stable/index.html",children:"Pyodide"})," and does not require any code running on the server side."]}),"\n",(0,t.jsxs)(s.p,{children:["Pyodide is a port of CPython to WebAssembly (WASM) which is an emerging technology with ",(0,t.jsx)(s.a,{href:"https://pyodide.org/en/stable/usage/wasm-constraints.html",children:"some limitations"}),"."]}),"\n",(0,t.jsxs)(s.admonition,{title:"Native Python packages",type:"note",children:[(0,t.jsxs)(s.p,{children:['Native Python packages (vs "pure" Python packages written in Python only) are packages that partially written in C, Rust or other languages producing native code. Example packages are ',(0,t.jsx)(s.code,{children:"numpy"}),", ",(0,t.jsx)(s.code,{children:"cryptography"}),", ",(0,t.jsx)(s.code,{children:"lxml"}),", ",(0,t.jsx)(s.code,{children:"pydantic"}),"."]}),(0,t.jsxs)(s.p,{children:["Pyodide comes with a big list of ",(0,t.jsx)(s.a,{href:"https://pyodide.org/en/stable/usage/packages-in-pyodide.html",children:"built-in packages"}),". However, to use a Python package from PyPI it must be a pure Python package or provide a wheel with binaries ",(0,t.jsx)(s.a,{href:"https://pyodide.org/en/stable/development/new-packages.html",children:"built for Emscripten"}),"."]})]}),"\n",(0,t.jsx)(s.h3,{id:"async-and-threading",children:"Async and threading"}),"\n",(0,t.jsxs)(s.p,{children:['Flet app that published to a static website could use both sync and async event handlers and methods.\nPyodide is a WebAssembly application which does not support threading. The entire Flet is running in a single thread and all sync and async control event handlers are running in the same thread. If your app has CPU-bound logic (e.g. calculating Fibonacci \ud83d\ude00) or "sleeps" to make UI prettier it may "hang" UI. Consider moving that logic to a server and calling it via web API. Using ',(0,t.jsx)(s.code,{children:"asyncio.sleep"})," in async methods is OK though."]}),"\n",(0,t.jsx)(s.h2,{id:"flet-build-web",children:(0,t.jsx)(s.code,{children:"flet build web"})}),"\n",(0,t.jsx)(s.p,{children:"Publish Flet app as a static website."}),"\n",(0,t.jsx)(s.p,{children:"This is the recommended publishing method for static website."}),"\n",(0,t.jsx)(s.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(s.p,{children:["Flutter SDK ",(0,t.jsx)(s.a,{href:"/docs/publish#flutter-sdk",children:"must be installed"})," on your computer for ",(0,t.jsx)(s.code,{children:"flet build web"})," command to work."]}),"\n",(0,t.jsx)(s.h3,{id:"building-website",children:"Building website"}),"\n",(0,t.jsx)(s.p,{children:"To publish Flet app as a static website run the following command from the root of your Flet app:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet build web\n"})}),"\n",(0,t.jsxs)(s.p,{children:["A static website is published into ",(0,t.jsx)(s.code,{children:"./build/web"})," directory."]}),"\n",(0,t.jsx)(s.h3,{id:"testing-website",children:"Testing website"}),"\n",(0,t.jsxs)(s.p,{children:["You can test a published Flet app using Python's built-in ",(0,t.jsxs)(s.a,{href:"https://docs.python.org/3/library/http.server.html",children:[(0,t.jsx)(s.code,{children:"http.server"})," module"]}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"python -m http.server --directory build/web\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Open ",(0,t.jsx)(s.code,{children:"http://localhost:8000"})," in your browser to check the published app."]}),"\n",(0,t.jsx)(s.h3,{id:"packaging-assets",children:"Packaging assets"}),"\n",(0,t.jsxs)(s.p,{children:["Once the website is published all files from ",(0,t.jsx)(s.code,{children:"assets"}),' directory will be copied "as is" to the root of the website.']}),"\n",(0,t.jsxs)(s.p,{children:["This allows overriding such things as ",(0,t.jsx)(s.code,{children:"favicon.png"})," or ",(0,t.jsx)(s.code,{children:" manifest.json"})," with your own content."]}),"\n",(0,t.jsx)(s.h3,{id:"url-strategy",children:"URL strategy"}),"\n",(0,t.jsx)(s.p,{children:"Flet apps support two ways of configuring URL-based routing:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"path"})," (default) - paths are read and written without a hash. For example, ",(0,t.jsx)(s.code,{children:"fletapp.dev/path/to/view"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"hash"})," - paths are read and written to the ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax",children:"hash fragment"}),". For example, ",(0,t.jsx)(s.code,{children:"fletapp.dev/#/path/to/view"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["If a hosting provider supports ",(0,t.jsx)(s.a,{href:"https://developers.cloudflare.com/pages/platform/serving-pages/#single-page-application-spa-rendering",children:"Single-page application (SPA) rendering"}),' you can leave default "path" URL strategy as it gives pretty URLs.']}),"\n",(0,t.jsx)(s.p,{children:'However, if a hosting provider (like GitHub Pages) doesn\'t support SPA mode then you need to publish your app with "hash" URL strategy.'}),"\n",(0,t.jsxs)(s.p,{children:["Use ",(0,t.jsx)(s.code,{children:"--route-url-strategy"})," argument to change URL strategy."]}),"\n",(0,t.jsx)(s.h3,{id:"web-renderer",children:"Web renderer"}),"\n",(0,t.jsxs)(s.p,{children:['You can change default "canvaskit" web renderer (',(0,t.jsx)(s.a,{href:"/docs/cookbook/fonts",children:"more about renderers here"}),' to "html" with ',(0,t.jsx)(s.code,{children:"--web-renderer"})," option:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet build web --web-renderer html\n"})}),"\n",(0,t.jsx)(s.h3,{id:"color-emojis",children:"Color emojis"}),"\n",(0,t.jsx)(s.p,{children:'To reduce app size default "CanvasKit" renderer does not use colorful emojis, because the font file with color emojies weights around 8 MB.'}),"\n",(0,t.jsxs)(s.p,{children:["You can, however, opt-in for color emojis with ",(0,t.jsx)(s.code,{children:"--use-color-emoji"})," flag:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet build web --use-color-emoji\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Alternatively, switch to ",(0,t.jsx)(s.code,{children:"html"})," renderer which uses browser fonts."]}),"\n",(0,t.jsx)(s.h3,{id:"hosting-website-in-a-sub-directory",children:"Hosting website in a sub-directory"}),"\n",(0,t.jsx)(s.p,{children:"Multiple Flet apps can be hosted on a single domain - each app in it's own sub-directory."}),"\n",(0,t.jsxs)(s.p,{children:["To make a published Flet app work in a sub-directory you have to publish it with ",(0,t.jsx)(s.code,{children:"--base-url"})," option:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet build web --base-url <sub-directory>\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For example, if app's URL is ",(0,t.jsx)(s.code,{children:"https://mywebsite.com/myapp"})," then it must be published with ",(0,t.jsx)(s.code,{children:"--base-url myapp"}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"splash-screen",children:"Splash screen"}),"\n",(0,t.jsxs)(s.p,{children:["By default, generated web app will be showing a splash screen with an image from ",(0,t.jsx)(s.code,{children:"assets"})," directory (see below) or Flet logo. You can disable splash screen for web app with ",(0,t.jsx)(s.code,{children:"--no-web-splash"})," option."]}),"\n",(0,t.jsx)(s.h2,{id:"flet-publish",children:(0,t.jsx)(s.code,{children:"flet publish"})}),"\n",(0,t.jsx)(s.p,{children:"An alternative method to publish Flet app as a static website."}),"\n",(0,t.jsxs)(s.p,{children:["Compared to ",(0,t.jsx)(s.a,{href:"#flet-build-web",children:(0,t.jsx)(s.code,{children:"flet build web"})})," command it does not require Flutter SDK to be installed on your computer."]}),"\n",(0,t.jsxs)(s.p,{children:["However, static websites built with ",(0,t.jsx)(s.code,{children:"flet build web"})," command, compared to ",(0,t.jsx)(s.code,{children:"flet publish"}),", have faster load time as all Python dependencies are now packaged into a single archive instead of being pulled in runtime with ",(0,t.jsx)(s.code,{children:"micropip"}),". ",(0,t.jsx)(s.code,{children:"flet build web"})," also detects native Python ",(0,t.jsx)(s.a,{href:"https://pyodide.org/en/stable/usage/packages-in-pyodide.html",children:"packages built into Pyodide"}),", such as ",(0,t.jsx)(s.code,{children:"bcrypt"}),", ",(0,t.jsx)(s.code,{children:"html5lib"}),", ",(0,t.jsx)(s.code,{children:"numpy"})," and many others, and installs them from Pyodide package registry."]}),"\n",(0,t.jsx)(s.h3,{id:"publish-app-as-a-static-website",children:"Publish app as a static website"}),"\n",(0,t.jsx)(s.p,{children:"Run the following command to publish Flet app to a standalone website:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py>\n"})}),"\n",(0,t.jsxs)(s.p,{children:["A static website is published into ",(0,t.jsx)(s.code,{children:"./dist"})," directory."]}),"\n",(0,t.jsx)(s.p,{children:"Command optional arguments:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--pre"})," - allow micropip to install pre-release Python packages."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"-a ASSETS_DIR"}),", ",(0,t.jsx)(s.code,{children:"--assets ASSETS_DIR"})," - path to an assets directory."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--app-name APP_NAME"})," - application namee."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--app-description APP_DESCRIPTION"})," - application description."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--base-url BASE_URL"})," - base URL for the app."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--web-renderer {canvaskit,html}"})," - web renderer to use."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"--route-url-strategy {path,hash}"})," - URL routing strategy."]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"testing-website-1",children:"Testing website"}),"\n",(0,t.jsxs)(s.p,{children:["You can test a published Flet app using Python's built-in ",(0,t.jsxs)(s.a,{href:"https://docs.python.org/3/library/http.server.html",children:[(0,t.jsx)(s.code,{children:"http.server"})," module"]}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"python -m http.server --directory dist\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Open ",(0,t.jsx)(s.code,{children:"http://localhost:8000"})," in your browser to check the published app."]}),"\n",(0,t.jsx)(s.h3,{id:"loading-packages",children:"Loading packages"}),"\n",(0,t.jsxs)(s.p,{children:["You can load custom packages from PyPI during app start by listing them in ",(0,t.jsx)(s.code,{children:"requirements.txt"}),". ",(0,t.jsx)(s.code,{children:"requirements.txt"})," must be created in the same directory with ",(0,t.jsx)(s.code,{children:"<your-flet-app.py>"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["Each line of ",(0,t.jsx)(s.code,{children:"requirements.txt"})," contains a package name followed by an optional version specifier."]}),"\n",(0,t.jsxs)(s.admonition,{type:"info",children:[(0,t.jsxs)(s.p,{children:["To install custom packages Pyodide uses ",(0,t.jsx)(s.a,{href:"https://pypi.org/project/micropip/",children:"micropip"})," - a lightweight version of ",(0,t.jsx)(s.code,{children:"pip"})," that works in a browser."]}),(0,t.jsxs)(s.p,{children:["You can use ",(0,t.jsx)(s.a,{href:"https://micropip.pyodide.org/en/stable/project/api.html",children:"Micropip API"})," directly in your Flet app:"]}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'import sys\n\nif sys.platform == "emscripten": # check if run in Pyodide environment\n    import micropip\n    await micropip.install("regex")\n'})})]}),"\n",(0,t.jsx)(s.h4,{id:"pre-release-python-packages",children:"Pre-release Python packages"}),"\n",(0,t.jsxs)(s.p,{children:["You can allow loading pre-release versions of PyPI packages, by adding ",(0,t.jsx)(s.code,{children:"--pre"})," option to ",(0,t.jsx)(s.code,{children:"flet publish"})," command:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --pre\n"})}),"\n",(0,t.jsx)(s.h3,{id:"assets",children:"Assets"}),"\n",(0,t.jsxs)(s.p,{children:["If your app requires assets (images, fonts, etc.) you can copy them into website directory by using ",(0,t.jsx)(s.code,{children:"--assets <directory>"})," option with ",(0,t.jsx)(s.code,{children:"flet publish"})," command:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --assets assets\n"})}),"\n",(0,t.jsx)(s.admonition,{type:"caution",children:(0,t.jsxs)(s.p,{children:["If you have ",(0,t.jsx)(s.code,{children:"assets"})," directory in your app's directory and don't specify ",(0,t.jsx)(s.code,{children:"--assets"})," option then the contents of ",(0,t.jsx)(s.code,{children:"assets"})," will be packaged along with a Python application rather than copied to ",(0,t.jsx)(s.code,{children:"dist"}),"."]})}),"\n",(0,t.jsx)(s.h3,{id:"url-strategy-1",children:"URL strategy"}),"\n",(0,t.jsx)(s.p,{children:"Flet apps support two ways of configuring URL-based routing:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Path"})," (default) - paths are read and written without a hash. For example, ",(0,t.jsx)(s.code,{children:"fletapp.dev/path/to/view"}),"."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Hash"})," - paths are read and written to the ",(0,t.jsx)(s.a,{href:"https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax",children:"hash fragment"}),". For example, ",(0,t.jsx)(s.code,{children:"fletapp.dev/#/path/to/view"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["If a hosting provider supports ",(0,t.jsx)(s.a,{href:"https://developers.cloudflare.com/pages/platform/serving-pages/#single-page-application-spa-rendering",children:"Single-page application (SPA) rendering"}),' you can leave default "path" URL strategy as it gives pretty URLs.']}),"\n",(0,t.jsx)(s.p,{children:'However, if a hosting provider (like GitHub Pages) doesn\'t support SPA mode then you need to publish your app with "hash" URL strategy.'}),"\n",(0,t.jsxs)(s.p,{children:['To specify "hash" URL strategy during static app publishing use ',(0,t.jsx)(s.code,{children:"--route-url-strategy"})," option:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --route-url-strategy hash\n"})}),"\n",(0,t.jsx)(s.h3,{id:"web-renderer-1",children:"Web renderer"}),"\n",(0,t.jsxs)(s.p,{children:['You can change default "canvaskit" web renderer (',(0,t.jsx)(s.a,{href:"/docs/reference/types/webrenderer",children:"more about renderers here"}),') to "html" with ',(0,t.jsx)(s.code,{children:"--web-renderer"})," option:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --web-renderer html\n"})}),"\n",(0,t.jsx)(s.h3,{id:"color-emojis-1",children:"Color emojis"}),"\n",(0,t.jsx)(s.p,{children:'To reduce app size default "CanvasKit" renderer does not use colorful emojis, because the font file with color emojies weights around 8 MB.'}),"\n",(0,t.jsxs)(s.p,{children:["You can, however, opt-in for color emojis with ",(0,t.jsx)(s.code,{children:"--use-color-emoji"})," flag:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --use-color-emoji\n"})}),"\n",(0,t.jsxs)(s.p,{children:["Alternatively, switch to ",(0,t.jsx)(s.code,{children:"html"})," renderer which uses browser fonts."]}),"\n",(0,t.jsx)(s.h3,{id:"hosting-website-in-a-sub-directory-1",children:"Hosting website in a sub-directory"}),"\n",(0,t.jsx)(s.p,{children:"Multiple Flet apps can be hosted on a single domain - each app in it's own sub-directory."}),"\n",(0,t.jsxs)(s.p,{children:["To make a published Flet app work in a sub-directory you have to publish it with ",(0,t.jsx)(s.code,{children:"--base-url"})," option:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet publish <your-flet-app.py> --base-url <sub-directory>\n"})}),"\n",(0,t.jsxs)(s.p,{children:["For example, if app's URL is ",(0,t.jsx)(s.code,{children:"https://mywebsite.com/myapp"})," then it must be published with ",(0,t.jsx)(s.code,{children:"--base-url myapp"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,s,i)=>{i.d(s,{R:()=>l,x:()=>o});var t=i(96540);const n={},r=t.createContext(n);function l(e){const s=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),t.createElement(r.Provider,{value:s},e.children)}}}]);