"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[41530],{70856:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>p,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var o=i(74848),s=i(28453);const l={title:"Packaging app for iOS",sidebar_label:"iOS"},t=void 0,r={id:"publish/ios",title:"Packaging app for iOS",description:"Introduction",source:"@site/docs/publish/ios.md",sourceDirName:"publish",slug:"/publish/ios",permalink:"/docs/flet-docs/docs/publish/ios",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/publish/ios.md",tags:[],version:"current",frontMatter:{title:"Packaging app for iOS",sidebar_label:"iOS"},sidebar:"docs",previous:{title:"Android",permalink:"/docs/flet-docs/docs/publish/android"},next:{title:"macOS",permalink:"/docs/flet-docs/docs/publish/macos"}},d={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Rosetta 2",id:"rosetta-2",level:3},{value:"Xcode",id:"xcode",level:3},{value:"CocoaPods",id:"cocoapods",level:3},{value:"iOS wheels for binary Python packages",id:"ios-wheels-for-binary-python-packages",level:3},{value:"<code>flet build ipa</code>",id:"flet-build-ipa",level:2},{value:"Permissions",id:"permissions",level:2},{value:"Deep linking",id:"deep-linking",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,o.jsxs)(n.p,{children:["Flet CLI provides ",(0,o.jsx)(n.code,{children:"flet build ipa"})," command that allows packaging Flet app into an iOS archive bundle and IPA for distribution."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"The command can be run on macOS only."})}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.h3,{id:"rosetta-2",children:"Rosetta 2"}),"\n",(0,o.jsxs)(n.p,{children:["Flutter requires ",(0,o.jsx)(n.a,{href:"https://support.apple.com/en-us/HT211861",children:"Rosetta 2"})," on Apple silicon:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"sudo softwareupdate --install-rosetta --agree-to-license\n"})}),"\n",(0,o.jsx)(n.h3,{id:"xcode",children:"Xcode"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://developer.apple.com/xcode/",children:"Xcode"})," 15 or later to compile native Swift or ObjectiveC code."]}),"\n",(0,o.jsx)(n.h3,{id:"cocoapods",children:"CocoaPods"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://cocoapods.org/",children:"CocoaPods"})," 1.16 to compile and enable Flutter plugins."]}),"\n",(0,o.jsx)(n.h3,{id:"ios-wheels-for-binary-python-packages",children:"iOS wheels for binary Python packages"}),"\n",(0,o.jsxs)(n.p,{children:['Binary Python packages (vs "pure" Python packages written in Python only) are packages that partially written in C, Rust or other languages producing native code. Example packages are ',(0,o.jsx)(n.code,{children:"numpy"}),", ",(0,o.jsx)(n.code,{children:"cryptography"}),", or ",(0,o.jsx)(n.code,{children:"pydantic-core"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Make sure all non-pure (binary) packages used in your Flet app have ",(0,o.jsx)(n.a,{href:"/docs/reference/binary-packages-android-ios",children:"pre-built wheels for iOS"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"flet-build-ipa",children:(0,o.jsx)(n.code,{children:"flet build ipa"})}),"\n",(0,o.jsx)(n.p,{children:"Build an iOS archive bundle and IPA for distribution (macOS host only)."}),"\n",(0,o.jsx)(n.p,{children:'To successfully generate "runnable" IPA you should provide correct values for the following arguments:'}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--org"})," - organization name in reverse domain name notation, e.g. ",(0,o.jsx)(n.code,{children:"com.mycompany"})," (defaults to ",(0,o.jsx)(n.code,{children:"com.flet"}),"). The value\nis combined with ",(0,o.jsx)(n.code,{children:"--project"})," and used as an iOS and Android bundle ID."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--project"})," - project name in C-style identifier format (lowercase alphanumerics with underscores) used to build bundle ID and as a name for bundle executable. By default, it's the name of Flet app directory."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--team"})," - team ID to locate provisioning profile. If no team ID provided a unsigned iOS archive will be generated."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["You can also configure these settings in ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[project]\nname = "my-app"\n\n[tool.flet]\norg = "com.mycompany"\n\n[tool.flet.ios]\nteam = "team_id"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"permissions",children:"Permissions"}),"\n",(0,o.jsxs)(n.p,{children:["Setting iOS permissions which are written into ",(0,o.jsx)(n.code,{children:"Info.plist"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"flet build --info-plist permission_1=True|False|description permission_2=True|False|description ...\n"})}),"\n",(0,o.jsx)(n.p,{children:"For example:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'flet build --info-plist NSLocationWhenInUseUsageDescription="This app uses location service when in use."\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Configuring iOS permissions in ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[tool.flet.ios.info] # --info-plist\nNSCameraUsageDescription = "This app uses the camera to ..."\n'})}),"\n",(0,o.jsx)(n.h2,{id:"deep-linking",children:"Deep linking"}),"\n",(0,o.jsxs)(n.p,{children:["You can configure deep-linking settings for iOS bundle with the following ",(0,o.jsx)(n.code,{children:"flet build"})," options:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--deep-linking-scheme"}),' - deep linking URL scheme to configure for iOS and Android builds, i.g. "https" or "myapp".']}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"--deep-linking-host"})," - deep linking URL host."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["The same can be configured in ",(0,o.jsx)(n.code,{children:"pyproject.toml"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-toml",children:'[tool.flet.ios.deep_linking]\nscheme = "https"\nhost = "mydomain.com"\n'})}),"\n",(0,o.jsxs)(n.p,{children:["See ",(0,o.jsx)(n.a,{href:"https://docs.flutter.dev/ui/navigation/deep-linking",children:"Deep linking"})," section in Flutter docs for more information and complete setup guide."]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>r});var o=i(96540);const s={},l=o.createContext(s);function t(e){const n=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(l.Provider,{value:n},e.children)}}}]);