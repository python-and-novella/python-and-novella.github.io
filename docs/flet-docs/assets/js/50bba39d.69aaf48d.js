"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[20115],{34662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var i=n(74848),o=n(28453);const a={title:"LineChart",sidebar_label:"LineChart"},r=void 0,l={id:"controls/linechart",title:"LineChart",description:"Draws a line chart.",source:"@site/docs/controls/linechart.md",sourceDirName:"controls",slug:"/controls/linechart",permalink:"/docs/flet-docs/docs/controls/linechart",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/linechart.md",tags:[],version:"current",frontMatter:{title:"LineChart",sidebar_label:"LineChart"},sidebar:"docs",previous:{title:"BarChart",permalink:"/docs/flet-docs/docs/controls/barchart"},next:{title:"MatplotlibChart",permalink:"/docs/flet-docs/docs/controls/matplotlibchart"}},s={},d=[{value:"Examples",id:"examples",level:2},{value:"LineChart 1",id:"linechart-1",level:3},{value:"LineChart 2",id:"linechart-2",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>animate</code>",id:"animate",level:3},{value:"<code>baseline_x</code>",id:"baseline_x",level:3},{value:"<code>baseline_y</code>",id:"baseline_y",level:3},{value:"<code>bgcolor</code>",id:"bgcolor",level:3},{value:"<code>border</code>",id:"border",level:3},{value:"<code>bottom_axis</code>",id:"bottom_axis",level:3},{value:"<code>data_series</code>",id:"data_series",level:3},{value:"<code>horizontal_grid_lines</code>",id:"horizontal_grid_lines",level:3},{value:"<code>interactive</code>",id:"interactive",level:3},{value:"<code>left_axis</code>",id:"left_axis",level:3},{value:"<code>max_x</code>",id:"max_x",level:3},{value:"<code>max_y</code>",id:"max_y",level:3},{value:"<code>min_x</code>",id:"min_x",level:3},{value:"<code>min_y</code>",id:"min_y",level:3},{value:"<code>point_line_end</code>",id:"point_line_end",level:3},{value:"<code>point_line_start</code>",id:"point_line_start",level:3},{value:"<code>right_axis</code>",id:"right_axis",level:3},{value:"<code>tooltip_bgcolor</code>",id:"tooltip_bgcolor",level:3},{value:"<code>tooltip_border_side</code>",id:"tooltip_border_side",level:3},{value:"<code>tooltip_direction</code>",id:"tooltip_direction",level:3},{value:"<code>tooltip_fit_inside_horizontally</code>",id:"tooltip_fit_inside_horizontally",level:3},{value:"<code>tooltip_fit_inside_vertically</code>",id:"tooltip_fit_inside_vertically",level:3},{value:"<code>tooltip_horizontal_offset</code>",id:"tooltip_horizontal_offset",level:3},{value:"<code>tooltip_margin</code>",id:"tooltip_margin",level:3},{value:"<code>tooltip_max_content_width</code>",id:"tooltip_max_content_width",level:3},{value:"<code>tooltip_padding</code>",id:"tooltip_padding",level:3},{value:"<code>tooltip_rounded_radius</code>",id:"tooltip_rounded_radius",level:3},{value:"<code>tooltip_rotate_angle</code>",id:"tooltip_rotate_angle",level:3},{value:"<code>tooltip_show_on_top_of_chart_box_area</code>",id:"tooltip_show_on_top_of_chart_box_area",level:3},{value:"<code>top_axis</code>",id:"top_axis",level:3},{value:"<code>vertical_grid_lines</code>",id:"vertical_grid_lines",level:3},{value:"Events",id:"events",level:2},{value:"<code>on_chart_event</code>",id:"on_chart_event",level:3}];function c(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"Draws a line chart."}),"\n",(0,i.jsx)(t.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(t.p,{children:(0,i.jsx)(t.a,{href:"https://flet-controls-gallery.fly.dev/charts/linechart",children:"Live example"})}),"\n",(0,i.jsx)(t.h3,{id:"linechart-1",children:"LineChart 1"}),"\n",(0,i.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/linechart-sample-1.gif",className:"screenshot-50"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 1.5),\n                ft.LineChartDataPoint(5, 1.4),\n                ft.LineChartDataPoint(7, 3.4),\n                ft.LineChartDataPoint(10, 2),\n                ft.LineChartDataPoint(12, 2.2),\n                ft.LineChartDataPoint(13, 1.8),\n            ],\n            stroke_width=8,\n            color=ft.Colors.LIGHT_GREEN,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 2.8),\n                ft.LineChartDataPoint(7, 1.2),\n                ft.LineChartDataPoint(10, 2.8),\n                ft.LineChartDataPoint(12, 2.6),\n                ft.LineChartDataPoint(13, 3.9),\n            ],\n            color=ft.Colors.PINK,\n            below_line_bgcolor=ft.Colors.with_opacity(0, ft.Colors.PINK),\n            stroke_width=8,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 2.8),\n                ft.LineChartDataPoint(3, 1.9),\n                ft.LineChartDataPoint(6, 3),\n                ft.LineChartDataPoint(10, 1.3),\n                ft.LineChartDataPoint(13, 2.5),\n            ],\n            color=ft.Colors.CYAN,\n            stroke_width=8,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n    ]\n\n    data_2 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 4),\n                ft.LineChartDataPoint(5, 1.8),\n                ft.LineChartDataPoint(7, 5),\n                ft.LineChartDataPoint(10, 2),\n                ft.LineChartDataPoint(12, 2.2),\n                ft.LineChartDataPoint(13, 1.8),\n            ],\n            stroke_width=4,\n            color=ft.Colors.with_opacity(0.5, ft.Colors.LIGHT_GREEN),\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 1),\n                ft.LineChartDataPoint(3, 2.8),\n                ft.LineChartDataPoint(7, 1.2),\n                ft.LineChartDataPoint(10, 2.8),\n                ft.LineChartDataPoint(12, 2.6),\n                ft.LineChartDataPoint(13, 3.9),\n            ],\n            color=ft.Colors.with_opacity(0.5, ft.Colors.PINK),\n            below_line_bgcolor=ft.Colors.with_opacity(0.2, ft.Colors.PINK),\n            stroke_width=4,\n            curved=True,\n            stroke_cap_round=True,\n        ),\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(1, 3.8),\n                ft.LineChartDataPoint(3, 1.9),\n                ft.LineChartDataPoint(6, 5),\n                ft.LineChartDataPoint(10, 3.3),\n                ft.LineChartDataPoint(13, 4.5),\n            ],\n            color=ft.Colors.with_opacity(0.5, ft.Colors.CYAN),\n            stroke_width=4,\n            stroke_cap_round=True,\n        ),\n    ]\n\n    chart = ft.LineChart(\n        data_series=data_1,\n        border=ft.Border(\n            bottom=ft.BorderSide(4, ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE))\n        ),\n        left_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=1,\n                    label=ft.Text("1m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Text("2m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=3,\n                    label=ft.Text("3m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=4,\n                    label=ft.Text("4m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Text("5m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=6,\n                    label=ft.Text("6m", size=14, weight=ft.FontWeight.BOLD),\n                ),\n            ],\n            labels_size=40,\n        ),\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Container(\n                        ft.Text(\n                            "SEP",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=7,\n                    label=ft.Container(\n                        ft.Text(\n                            "OCT",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=12,\n                    label=ft.Container(\n                        ft.Text(\n                            "DEC",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n            ],\n            labels_size=32,\n        ),\n        tooltip_bgcolor=ft.Colors.with_opacity(0.8, ft.Colors.BLUE_GREY),\n        min_y=0,\n        max_y=4,\n        min_x=0,\n        max_x=14,\n        # animate=5000,\n        expand=True,\n    )\n\n    def toggle_data(e):\n        if s.toggle:\n            chart.data_series = data_2\n            chart.data_series[2].point = True\n            chart.max_y = 6\n            chart.interactive = False\n        else:\n            chart.data_series = data_1\n            chart.max_y = 4\n            chart.interactive = True\n        s.toggle = not s.toggle\n        chart.update()\n\n    page.add(ft.IconButton(ft.Icons.REFRESH, on_click=toggle_data), chart)\n\nft.app(main)\n'})}),"\n",(0,i.jsx)(t.h3,{id:"linechart-2",children:"LineChart 2"}),"\n",(0,i.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/linechart-sample-2.gif",className:"screenshot-50"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'import flet as ft\n\nclass State:\n    toggle = True\n\ns = State()\n\ndef main(page: ft.Page):\n    data_1 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(0, 3),\n                ft.LineChartDataPoint(2.6, 2),\n                ft.LineChartDataPoint(4.9, 5),\n                ft.LineChartDataPoint(6.8, 3.1),\n                ft.LineChartDataPoint(8, 4),\n                ft.LineChartDataPoint(9.5, 3),\n                ft.LineChartDataPoint(11, 4),\n            ],\n            stroke_width=5,\n            color=ft.Colors.CYAN,\n            curved=True,\n            stroke_cap_round=True,\n        )\n    ]\n\n    data_2 = [\n        ft.LineChartData(\n            data_points=[\n                ft.LineChartDataPoint(0, 3.44),\n                ft.LineChartDataPoint(2.6, 3.44),\n                ft.LineChartDataPoint(4.9, 3.44),\n                ft.LineChartDataPoint(6.8, 3.44),\n                ft.LineChartDataPoint(8, 3.44),\n                ft.LineChartDataPoint(9.5, 3.44),\n                ft.LineChartDataPoint(11, 3.44),\n            ],\n            stroke_width=5,\n            color=ft.Colors.CYAN,\n            curved=True,\n            stroke_cap_round=True,\n        )\n    ]\n\n    chart = ft.LineChart(\n        data_series=data_1,\n        border=ft.border.all(3, ft.Colors.with_opacity(0.2, ft.Colors.ON_SURFACE)),\n        horizontal_grid_lines=ft.ChartGridLines(\n            interval=1, color=ft.Colors.with_opacity(0.2, ft.Colors.ON_SURFACE), width=1\n        ),\n        vertical_grid_lines=ft.ChartGridLines(\n            interval=1, color=ft.Colors.with_opacity(0.2, ft.Colors.ON_SURFACE), width=1\n        ),\n        left_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=1,\n                    label=ft.Text("10K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=3,\n                    label=ft.Text("30K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Text("50K", size=14, weight=ft.FontWeight.BOLD),\n                ),\n            ],\n            labels_size=40,\n        ),\n        bottom_axis=ft.ChartAxis(\n            labels=[\n                ft.ChartAxisLabel(\n                    value=2,\n                    label=ft.Container(\n                        ft.Text(\n                            "MAR",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=5,\n                    label=ft.Container(\n                        ft.Text(\n                            "JUN",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n                ft.ChartAxisLabel(\n                    value=8,\n                    label=ft.Container(\n                        ft.Text(\n                            "SEP",\n                            size=16,\n                            weight=ft.FontWeight.BOLD,\n                            color=ft.Colors.with_opacity(0.5, ft.Colors.ON_SURFACE),\n                        ),\n                        margin=ft.margin.only(top=10),\n                    ),\n                ),\n            ],\n            labels_size=32,\n        ),\n        tooltip_bgcolor=ft.Colors.with_opacity(0.8, ft.Colors.BLUE_GREY),\n        min_y=0,\n        max_y=6,\n        min_x=0,\n        max_x=11,\n        # animate=5000,\n        expand=True,\n    )\n\n    def toggle_data(e):\n        if s.toggle:\n            chart.data_series = data_2\n            chart.interactive = False\n        else:\n            chart.data_series = data_1\n            chart.interactive = True\n        s.toggle = not s.toggle\n        chart.update()\n\n    page.add(ft.ElevatedButton("avg", on_click=toggle_data), chart)\n\nft.app(main)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/linechart-diagram.svg",className:"screenshot-100"}),"\n",(0,i.jsx)(t.h3,{id:"animate",children:(0,i.jsx)(t.code,{children:"animate"})}),"\n",(0,i.jsx)(t.p,{children:"Controls chart implicit animation."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/animationvalue",children:(0,i.jsx)(t.code,{children:"AnimationValue"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"baseline_x",children:(0,i.jsx)(t.code,{children:"baseline_x"})}),"\n",(0,i.jsx)(t.p,{children:"Baseline value for X axis."}),"\n",(0,i.jsxs)(t.p,{children:["Defaults to ",(0,i.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"baseline_y",children:(0,i.jsx)(t.code,{children:"baseline_y"})}),"\n",(0,i.jsx)(t.p,{children:"Baseline value for Y axis."}),"\n",(0,i.jsxs)(t.p,{children:["Defaults to ",(0,i.jsx)(t.code,{children:"0"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"bgcolor",children:(0,i.jsx)(t.code,{children:"bgcolor"})}),"\n",(0,i.jsxs)(t.p,{children:["Background ",(0,i.jsx)(t.a,{href:"/docs/reference/colors",children:"color"})," of the chart."]}),"\n",(0,i.jsx)(t.h3,{id:"border",children:(0,i.jsx)(t.code,{children:"border"})}),"\n",(0,i.jsx)(t.p,{children:"The border around the chart."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/border",children:(0,i.jsx)(t.code,{children:"Border"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"bottom_axis",children:(0,i.jsx)(t.code,{children:"bottom_axis"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the appearance of the bottom axis, its title and labels."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartaxis",children:(0,i.jsx)(t.code,{children:"ChartAxis"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"data_series",children:(0,i.jsx)(t.code,{children:"data_series"})}),"\n",(0,i.jsxs)(t.p,{children:["A list of ",(0,i.jsx)(t.a,{href:"/docs/reference/types/linechartdata",children:(0,i.jsx)(t.code,{children:"LineChartData"})})," controls drawn as separate lines on a chart."]}),"\n",(0,i.jsx)(t.h3,{id:"horizontal_grid_lines",children:(0,i.jsx)(t.code,{children:"horizontal_grid_lines"})}),"\n",(0,i.jsx)(t.p,{children:"Controls drawing of chart's horizontal lines."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartgridlines",children:(0,i.jsx)(t.code,{children:"ChartGridLines"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"interactive",children:(0,i.jsx)(t.code,{children:"interactive"})}),"\n",(0,i.jsx)(t.p,{children:"Enables automatic tooltips and points highlighting when hovering over the chart."}),"\n",(0,i.jsx)(t.h3,{id:"left_axis",children:(0,i.jsx)(t.code,{children:"left_axis"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the appearance of the left axis, its title and labels."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartaxis",children:(0,i.jsx)(t.code,{children:"ChartAxis"})})," class."]}),"\n",(0,i.jsx)(t.h3,{id:"max_x",children:(0,i.jsx)(t.code,{children:"max_x"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the maximum displayed value for X axis."}),"\n",(0,i.jsx)(t.h3,{id:"max_y",children:(0,i.jsx)(t.code,{children:"max_y"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the maximum displayed value for Y axis."}),"\n",(0,i.jsx)(t.h3,{id:"min_x",children:(0,i.jsx)(t.code,{children:"min_x"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the minimum displayed value for X axis."}),"\n",(0,i.jsx)(t.h3,{id:"min_y",children:(0,i.jsx)(t.code,{children:"min_y"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the minimum displayed value for Y axis."}),"\n",(0,i.jsx)(t.h3,{id:"point_line_end",children:(0,i.jsx)(t.code,{children:"point_line_end"})}),"\n",(0,i.jsx)(t.p,{children:"The end of the vertical line drawn at selected point position."}),"\n",(0,i.jsxs)(t.p,{children:["Defaults to data point's ",(0,i.jsx)(t.code,{children:"y"})," value."]}),"\n",(0,i.jsx)(t.h3,{id:"point_line_start",children:(0,i.jsx)(t.code,{children:"point_line_start"})}),"\n",(0,i.jsx)(t.p,{children:"The start of the vertical line drawn under the selected point."}),"\n",(0,i.jsx)(t.p,{children:"Defaults to chart's bottom edge."}),"\n",(0,i.jsx)(t.h3,{id:"right_axis",children:(0,i.jsx)(t.code,{children:"right_axis"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the appearance of the right axis, its title and labels."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartaxis",children:(0,i.jsx)(t.code,{children:"ChartAxis"})})," class."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_bgcolor",children:(0,i.jsx)(t.code,{children:"tooltip_bgcolor"})}),"\n",(0,i.jsxs)(t.p,{children:["Background ",(0,i.jsx)(t.a,{href:"/docs/reference/colors",children:"color"})," of tooltips."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_border_side",children:(0,i.jsx)(t.code,{children:"tooltip_border_side"})}),"\n",(0,i.jsx)(t.p,{children:"The tooltip border side."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_direction",children:(0,i.jsx)(t.code,{children:"tooltip_direction"})}),"\n",(0,i.jsx)(t.p,{children:"Controls showing tooltip on top or bottom."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/charttooltipdirection",children:(0,i.jsx)(t.code,{children:"TooltipDirection"})})," and defaults to ",(0,i.jsx)(t.code,{children:"TooltipDirection.AUTO"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_fit_inside_horizontally",children:(0,i.jsx)(t.code,{children:"tooltip_fit_inside_horizontally"})}),"\n",(0,i.jsx)(t.p,{children:"Forces the tooltip to shift horizontally inside the chart, if overflow happens."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.code,{children:"bool"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_fit_inside_vertically",children:(0,i.jsx)(t.code,{children:"tooltip_fit_inside_vertically"})}),"\n",(0,i.jsx)(t.p,{children:"Forces the tooltip to shift vertically inside the chart, if overflow happens."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.code,{children:"bool"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_horizontal_offset",children:(0,i.jsx)(t.code,{children:"tooltip_horizontal_offset"})}),"\n",(0,i.jsx)(t.p,{children:"Applies horizontal offset for showing tooltip."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_margin",children:(0,i.jsx)(t.code,{children:"tooltip_margin"})}),"\n",(0,i.jsx)(t.p,{children:"Applies a bottom margin for showing tooltip on top of rods."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_max_content_width",children:(0,i.jsx)(t.code,{children:"tooltip_max_content_width"})}),"\n",(0,i.jsx)(t.p,{children:"Restricts the tooltip's width."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_padding",children:(0,i.jsx)(t.code,{children:"tooltip_padding"})}),"\n",(0,i.jsx)(t.p,{children:"Applies a padding for showing contents inside the tooltip."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/aliases#paddingvalue",children:(0,i.jsx)(t.code,{children:"PaddingValue"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_rounded_radius",children:(0,i.jsx)(t.code,{children:"tooltip_rounded_radius"})}),"\n",(0,i.jsx)(t.p,{children:"Sets a rounded radius for the tooltip."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_rotate_angle",children:(0,i.jsx)(t.code,{children:"tooltip_rotate_angle"})}),"\n",(0,i.jsx)(t.p,{children:"The rotation angle of the tooltip."}),"\n",(0,i.jsx)(t.h3,{id:"tooltip_show_on_top_of_chart_box_area",children:(0,i.jsx)(t.code,{children:"tooltip_show_on_top_of_chart_box_area"})}),"\n",(0,i.jsx)(t.p,{children:"Whether to force the tooltip container to the top of the line."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.code,{children:"bool"})," and defaults to ",(0,i.jsx)(t.code,{children:"False"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"top_axis",children:(0,i.jsx)(t.code,{children:"top_axis"})}),"\n",(0,i.jsx)(t.p,{children:"Defines the appearance of the top axis, its title and labels."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartaxis",children:(0,i.jsx)(t.code,{children:"ChartAxis"})}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"vertical_grid_lines",children:(0,i.jsx)(t.code,{children:"vertical_grid_lines"})}),"\n",(0,i.jsx)(t.p,{children:"Controls drawing of chart's vertical lines."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/chartgridlines",children:(0,i.jsx)(t.code,{children:"ChartGridLines"})}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"events",children:"Events"}),"\n",(0,i.jsx)(t.h3,{id:"on_chart_event",children:(0,i.jsx)(t.code,{children:"on_chart_event"})}),"\n",(0,i.jsx)(t.p,{children:"Fires when a chart line is hovered or clicked."}),"\n",(0,i.jsxs)(t.p,{children:["Value is of type ",(0,i.jsx)(t.a,{href:"/docs/reference/types/linechartevent",children:(0,i.jsx)(t.code,{children:"LineChartEvent"})}),"."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>l});var i=n(96540);const o={},a=i.createContext(o);function r(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);