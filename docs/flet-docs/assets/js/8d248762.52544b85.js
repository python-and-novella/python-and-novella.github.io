"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[92658],{92740:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var s=t(74848),o=t(28453);const a={title:"Client storage",sidebar_label:"Client storage"},r=void 0,i={id:"cookbook/client-storage",title:"Client storage",description:"Flet's client storage API allows storing key-value data on a client side in a persistent storage. Flet implementation uses sharedpreferences Flutter package.",source:"@site/docs/cookbook/client-storage.md",sourceDirName:"cookbook",slug:"/cookbook/client-storage",permalink:"/docs/flet-docs/docs/cookbook/client-storage",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/cookbook/client-storage.md",tags:[],version:"current",frontMatter:{title:"Client storage",sidebar_label:"Client storage"},sidebar:"docs",previous:{title:"Fonts",permalink:"/docs/flet-docs/docs/cookbook/fonts"},next:{title:"Session storage",permalink:"/docs/flet-docs/docs/cookbook/session-storage"}},l={},c=[];function d(e){const n={a:"a",admonition:"admonition",code:"code",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Flet's client storage API allows storing key-value data on a client side in a persistent storage. Flet implementation uses ",(0,s.jsx)(n.a,{href:"https://pub.dev/packages/shared_preferences",children:(0,s.jsx)(n.code,{children:"shared_preferences"})})," Flutter package."]}),"\n",(0,s.jsx)(n.p,{children:"The actual storage mechanism depends on a platform where Flet app is running:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Web - ",(0,s.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Storage",children:"Local storage"}),"."]}),"\n",(0,s.jsx)(n.li,{children:"Desktop - JSON file."}),"\n",(0,s.jsxs)(n.li,{children:["iOS - ",(0,s.jsx)(n.a,{href:"https://developer.apple.com/documentation/foundation/nsuserdefaults",children:"NSUserDefaults"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Android - ",(0,s.jsx)(n.a,{href:"https://developer.android.com/reference/android/content/SharedPreferences",children:"SharedPreferences"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Writing data to the storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# strings\npage.client_storage.set("key", "value")\n\n# numbers, booleans\npage.client_storage.set("number.setting", 12345)\npage.client_storage.set("bool_setting", True)\n\n# lists\npage.client_storage.set("favorite_colors", ["red", "green", "blue"])\n'})}),"\n",(0,s.jsxs)(n.admonition,{type:"note",children:[(0,s.jsxs)(n.p,{children:["Each Flutter application using ",(0,s.jsx)(n.code,{children:"shared_preferences"})," plugin has its own set of preferences. As the same Flet client (which is a Flutter app) is used to run UI for multiple Flet apps any values stored in one Flet application are visible/available to another Flet app running by the same user."]}),(0,s.jsxs)(n.p,{children:["To distinguish one application settings from another it is recommended to use some unique prefix for all storage keys, for example ",(0,s.jsx)(n.code,{children:"{company}.{product}."}),". For example to store auth token in one app you could use ",(0,s.jsx)(n.code,{children:"acme.one_app.auth_token"})," key and in another app use ",(0,s.jsx)(n.code,{children:"acme.second_app.auth_token"}),"."]})]}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsx)(n.p,{children:"It is responsibility of Flet app developer to encrypt sensitive data before sending it to a client storage, so it's not read/tampered by another app or an app user."})}),"\n",(0,s.jsx)(n.p,{children:"Reading data:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# The value is automatically converted back to the original type\nvalue = page.client_storage.get("key")\n\ncolors = page.client_storage.get("favorite_colors")\n# colors = ["red", "green", "blue"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Check if a key exists:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.client_storage.contains_key("key") # True if the key exists\n'})}),"\n",(0,s.jsx)(n.p,{children:"Get all keys:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.client_storage.get_keys("key-prefix.")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Remove a value:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'page.client_storage.remove("key")\n'})}),"\n",(0,s.jsx)(n.p,{children:"Clear the storage:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"page.client_storage.clear()\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"clear()"})," is a dangerous function that removes all preferences of all Flet apps ever run by the same user and serves as a heads-up that permanent application data shouldn't be stored in the client storage."]})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var s=t(96540);const o={},a=s.createContext(o);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);