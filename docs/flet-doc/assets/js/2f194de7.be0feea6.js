"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[48189],{81707:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"flet-v-0-26-release-announcement","metadata":{"permalink":"/docs/flet-doc/blog/flet-v-0-26-release-announcement","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2025-01-24-flet-v-0-26-release-announcement.md","source":"@site/blog/2025-01-24-flet-v-0-26-release-announcement.md","title":"Flet v0.26.0 Release Announcement","description":"The Flet 0.26.0 release is here, featuring a significant update to the extensibility approach!","date":"2025-01-24T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":3.735,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-v-0-26-release-announcement","title":"Flet v0.26.0 Release Announcement","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"nextItem":{"title":"Flet v0.25.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-25-release-announcement"}},"content":"The Flet 0.26.0 release is here, featuring a significant update to the extensibility approach!\\n\\nIn summary, a Flet extension is now a single Python package that bundles both Python and Flutter code. This package can be part of your Flet project or hosted in a public Git repository or PyPI.\\n\\nBuilt-in Flet extensions, such as `Audio`, `Video`, and `Map`, have been moved to their own repositories. You\u2019re welcome to fork these extensions to create your own or contribute to Flet! These extensions have been published to PyPI, making them easy to include in your Flet app. To use them, simply add the desired extensions to the `dependencies` section of your `pyproject.toml` file.\\n\\nFor more details, see below.\\n\\n## How to upgrade\\n\\nRun the following command to upgrade Flet:\\n\\n```\\npip install \'flet[all]\' --upgrade\\n```\\n\\n:::note\\n`[all]` is an \\"extra\\" specifier which tells pip to install or upgrade all `flet` packages: `flet`, `flet-cli`, `flet-desktop` and `flet-web`.\\n:::\\n\\nBump `flet` package version to `0.26.0` (or remove it at all to use the latest) in your `pyproject.toml`.\\n\\n## Extensibility changes\\n\\n### Built-in extensions\\n\\nFlet controls based on 3rd-party Flutter packages that used to be a part of Flet repository, now have been moved to separate repos and published on pypi:\\n\\n* [flet-ads](https://pypi.org/project/flet-ads/)\\n* [flet-audio](https://pypi.org/project/flet-audio/)\\n* [flet-audio-recorder](https://pypi.org/project/flet-audio-recorder/)\\n* [flet-flashlight](https://pypi.org/project/flet-flashlight/)\\n* [flet-geolocator](https://pypi.org/project/flet-geolocator/)\\n* [flet-lottie](https://pypi.org/project/flet-lottie/)\\n* [flet-map](https://pypi.org/project/flet-map/)\\n* [flet-permission-handler](https://pypi.org/project/flet-permission-handler/)\\n* [flet-rive](https://pypi.org/project/flet-rive/)\\n* [flet-video](https://pypi.org/project/flet-video/)\\n* [flet-webview](https://pypi.org/project/flet-webview/)\\n\\nTo use a built-in Flet extension in your project, add it to the `dependencies` section of your `pyproject.toml` file, for example:\\n\\n```\\ndependencies = [\\n  \\"flet-audio\\",\\n  \\"flet>=0.26.0\\",\\n]\\n```\\n\\n### User extensions\\n\\nFlet now makes it easy to create and build projects with your custom controls based on Flutter widgets or Flutter 3rd-party packages:\\n\\n1. Create new virtual enviroment and [install Flet](/docs/getting-started/#python-venv-module) there.\\n\\n2. Create new Flet extension project from template:\\n\\n```\\nflet create --template extension --project-name my-control\\n```\\n\\nA project with new MyControl control will be created. The control is just a Flutter Text widget with a single `text` property.\\n\\n3. Build your app.\\n\\nFlet project created from extension template has `examples/my_control_example` folder with the example app.\\n\\nWhen in the folder where your `pyproject.toml` for the app is, run `flet build` command, for example, for macOS:\\n\\n```\\nflet build macos -v\\n```\\n\\nRun the app and see the new custom Flet Control:\\n\\n```\\nopen build/macos/my-control-example.app\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/extensions/example.png\\" className=\\"screenshot-30\\" />\\n\\nRead more about how to customise your extension [here](/docs/extend/user-extensions).\\n\\n## Development environment configuration\\n\\nTo enhance the developer experience with the `flet build` command, Flet 0.26.0 ensures that the correct versions of Flutter SDK, Java (JDK), and Android SDK are installed. If any of these are missing or outdated, it automatically installs them for you.\\n\\nYou still need to install Visual Studio 2022 yourself if you\'re building a Flet app for Windows, or Xcode if you\'re building for iOS or macOS.\\n\\nIn the next releases we are going to introduce automatic configuration and startup of Android and iOS emulators.\\n\\n## Flutter 3.27\\n\\nFlet has been migrated to Flutter SDK 3.27. See [this pull request](https://github.com/flet-dev/flet/pull/4703) for new and updated control properties.\\n\\n## Python 3.9\\n\\nFlet 0.26.0 requires Python 3.9 or later. Python 3.8 has reached [EOL](https://devguide.python.org/versions/).\\n\\n## Other changes\\n\\n* Optional on-demand creation of `ListView.controls` ([#3931](https://github.com/flet-dev/flet/issues/3931))\\n* Reset `InteractiveViewer` tranformations ([#4391](https://github.com/flet-dev/flet/issues/4391))\\n* Passthrough of mouse events from main window to other applications ([#1438](https://github.com/flet-dev/flet/issues/1438))\\n* Implemented `Window.ignore_mouse_events` ([#4465](https://github.com/flet-dev/flet/pull/4465))\\n* Adding Google/Android TV platform support ([#4581](https://github.com/flet-dev/flet/pull/4581))\\n* Remove `Optional[]` from predefined typing `*Value`s ([#4702](https://github.com/flet-dev/flet/pull/4702))\\n* Throttle `InteractiveViewer` update events ([#4704](https://github.com/flet-dev/flet/pull/4704))\\n* Remove v0.26.0-related deprecations ([#4456](https://github.com/flet-dev/flet/issues/4456))\\n\\n## Bug fixes\\n\\n* Fixed: Update project_dependencies.py ([#4459](https://github.com/flet-dev/flet/pull/4459))\\n* Fixed: `SafeArea` object has no attribute `_SafeArea__minimum` ([#4500](https://github.com/flet-dev/flet/pull/4500))\\n* Fixed: Tooltip corruption in `Segment` and `BarChartRod` on `update()` ([#4525](https://github.com/flet-dev/flet/pull/4525))\\n* Fixed: Setting `CheckBox.border_side.stroke_align` to an Enum fails ([#4526](https://github.com/flet-dev/flet/pull/4526))\\n* Fixed: `ControlState` should be resolved based on user-defined order ([#4556](https://github.com/flet-dev/flet/pull/4556))\\n* Fixed: broken `Dismissible.dismiss_direction` ([#4557](https://github.com/flet-dev/flet/pull/4557))\\n* Fixed: Fix Rive not updating ([#4582](https://github.com/flet-dev/flet/pull/4582))\\n* Fixed: `DatePicker` regression with first and last dates ([#4661](https://github.com/flet-dev/flet/pull/4661))\\n* `flet build` command: Copy `flutter-packages`, support for platform-specific dependencies ([#4667](https://github.com/flet-dev/flet/pull/4667))\\n* Fixed: `CupertinoBottomSheet` applies a red color and yellow underline to `Text`  content ([#4673](https://github.com/flet-dev/flet/pull/4673))\\n* Fixed: setting `ButtonTheme` displays a grey screen ([#4731](https://github.com/flet-dev/flet/pull/4731))\\n* Fixed: `Textfield` input border color considers user-specified `border_color` property ([#4735](https://github.com/flet-dev/flet/pull/4735))\\n* Fixed: make `Tooltip.message` a required parameter ([#4736](https://github.com/flet-dev/flet/pull/4736))\\n\\n## Conclusion\\n\\nUpgrade to Flet 0.26.0, test your apps and let us know how you find the new features we added.\\n\\nIf you have any questions, please join [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nHappy Flet-ing! \ud83d\udc7e"},{"id":"flet-v-0-25-release-announcement","metadata":{"permalink":"/docs/flet-doc/blog/flet-v-0-25-release-announcement","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-11-27-flet-v-0-25-release-announcement.md","source":"@site/blog/2024-11-27-flet-v-0-25-release-announcement.md","title":"Flet v0.25.0 Release Announcement","description":"Hey Flet developers, we\u2019ve got something exciting to share \u2014 Flet 0.25.0 is officially released!","date":"2024-11-27T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":9.7,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-v-0-25-release-announcement","title":"Flet v0.25.0 Release Announcement","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet v0.26.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-26-release-announcement"},"nextItem":{"title":"pyproject.toml support for flet build command","permalink":"/docs/flet-doc/blog/pyproject-toml-support-for-flet-build-command"}},"content":"Hey Flet developers, we\u2019ve got something exciting to share \u2014 Flet 0.25.0 is officially released!\\n\\nThe biggest news? No more Kivy for iOS and Android packaging. No more dealing with frustrating Python binary dependencies \u2014 Flet now uses its own custom Python runtime, so your app builds are easier than ever. Plus, we\u2019ve added loads of new features like better permissions control, faster rebuilds, and even a lightweight Linux client that skips the bloat.\\n\\nLet\u2019s dive into all the cool stuff Flet 0.25.0 has to offer! \ud83d\ude80\\n\\n## How to upgrade\\n\\nRun the following command to upgrade Flet:\\n\\n```\\npip install \'flet[all]\' --upgrade\\n```\\n\\n:::note\\n`[all]` is an \\"extra\\" specifier which tells pip to install all `flet` package dependencies. See [New Python packages structure](#new-python-packages-structure) section below for the explanation.\\n:::\\n\\nBump `flet` package version to `0.25.0` (or remove it at all to use the latest) in `requirements.txt` or `pyproject.toml`.\\n\\n## New packaging\\n\\nFlet packaging for iOS and Android has been relying on Kivy and it was super annoying when your app depends on Python binary packages, such as Numpy or Pillow. You needed to compile those packages yourself using Kivy command line tools. It was really frustrating and even hopeless if Kivy didn\'t have \\"recipes\\" for some packages, like Pydantic.\\n\\nFlet does not depend on Kivy anymore and uses its own Python runtime \\"meticulously crafted in-house\\".\\n\\nFlet packaging implementation for iOS and Androind adheres to strict specifications defined in [PEP 730](https://peps.python.org/pep-0730/) (iOS) and [PEP 738](https://peps.python.org/pep-0738/) (Android) which were implemented and released in Python 3.13 (and back-ported to Python 3.12). When pypi.org supports wheel tags for iOS and Android and 3rd-party Python package maintainers start uploading their mobile packages Flet will be compatible with them and you\'ll be able to use them in your Flet app.\\n\\n### Pre-built binary packages\\n\\n`flet build` command for iOS and Android is now installing pre-built binary packages from https://pypi.flet.dev.\\n\\nNew packages can be built with creating a recipe in [Mobile Forge](https://github.com/flet-dev/mobile-forge) project. For now, Flet team is authoring those recipes for you, but when the process is polished and fully-automated you\'ll be able to send a PR and test the compiled package right away.\\n\\nIf you don\'t yet see a package you require at https://pypi.flet.dev, you can request it in [Flet discussions - Packages](https://github.com/flet-dev/flet/discussions/categories/packages). Please do not request pure Python packages. Go to package\'s \\"Download files\\" section at https://pypi.org and make sure it contains binary platform-specific wheels.\\n\\nPackaging behavior was changed too:\\n\\n- The packaging is not trying to replace `flet` dependency with `flet-runtime`, `flet-embed` or `flet-pyodide`, but install all dependencies \\"as is\\" from `requirements.txt` or `pyproject.toml` - thanks to the [new Flet packages structure](#new-python-packages-structure).\\n- If the binary package for target platform is not found the packaging won\'t be trying to compile it from source distribution, but will fail instead with a meaningful error.\\n\\n### Python 3.12\\n\\nPackaged Flet app runs on Python 3.12.7 runtime on all platforms.\\n\\n### Permissions\\n\\nNew `flet build` command allows granular control over permissions, features and entitlements embedded into `AndroidManifest.xml`, `Info.plist` and `.entitlements` files.\\n\\nNo more hard-coded permissions in those files!\\n\\nFor example, setting permissions for iOS bundle:\\n\\n```\\nflet build --info-plist NSLocationWhenInUseUsageDescription=\\"This app uses location service when in use.\\"\\n```\\n\\nor the same in `pyproject.toml` (read about `pyproject.toml` support below):\\n\\n```toml\\n[tool.flet.ios.info] # --info-plist\\nNSLocationWhenInUseUsageDescription = \\"This app uses location service when in use.\\"\\n```\\n\\nAn example of setting Android permissions and features:\\n\\n```\\nflet build \\\\\\n    --android-permissions android.permission.READ_EXTERNAL_STORAGE=True \\\\\\n      android.permission.WRITE_EXTERNAL_STORAGE=True \\\\\\n    --android-features android.hardware.location.network=False\\n```\\n\\n[Read more about permissions in the docs](/docs/publish#permissions).\\n\\n### Control over app compilation and cleanup\\n\\n`flet build` command is no longer compiling app `.py` files into `.pyc` by default which allows you to defer discovery of any syntax errors in your app and complete the packaging.\\n\\nYou can control the compilation and cleanup with the following new options:\\n\\n* `--compile-app` - compile app\'s `.py` files.\\n* `--compile-packages` - compile installed packages\' `.py` files.\\n* `--cleanup-on-compile` - remove unnecessary files upon successful compilation.\\n\\n### Signing Android bundles\\n\\nWe also added new options for signing Android builds:\\n\\n* `--android-signing-key-store` - path to an upload keystore `.jks` file for Android apps.\\n* `--android-signing-key-store-password` - Android signing store password.\\n* `--android-signing-key-alias` - Android signing key alias. Default is \\"upload\\".\\n* `--android-signing-key-password` - Android signing key password.\\n\\nRead [Build and release an Android app](https://docs.flutter.dev/deployment/android#signing-the-app) for more information on how to configure upload key for Android builds.\\n\\n### Deep linking configuration\\n\\nThere is a new `--deep-linking-url` option to configure deep linking for iOS and Android builds. The value must be in the format `<sheme>://<host>`.\\n\\n### Faster re-builds\\n\\nEphemeral Flutter app created by `flet build` command is no longer being re-created on every build in a temp directory, but cached in `build/flutter` directory which gives faster re-builds, improves packaging troubleshooting and does not pollute user temp directory.\\n\\nYou can use `--clear-cache` option to do a clean build though.\\n\\n### Split APKs per ABI\\n\\n`flet build` now provides the built-in `--split-per-abi` option to split the APKs per ABIs.\\n\\n## \\"Data\\" and \\"Temp\\" directories for the app\\n\\nFlet developers have been asking where to store application data, such as uploaded files, SQLite databases, etc. that are persistent across application updates.\\n\\nThis release introduce two environment variables that are available in your Flet apps:\\n\\n* `FLET_APP_STORAGE_DATA` - directory for storing application data that is preserved between app updates. That directory is already pre-created and its location depends on the platform the app is running on.\\n* `FLET_APP_STORAGE_TEMP` - directory for temporary application files, i.e. cache. That directory is already pre-created and its location depends on the platform the app is running on.\\n\\nFor example, data folder path can be read in your app as:\\n\\n```\\nimport os\\n\\n# it\'s `None` when running the app in web mode\\ndata_dir = os.getenv(\\"FLET_APP_STORAGE_DATA\\")\\n```\\n\\n:::note\\n`flet run` command creates data and temp directories and sets `FLET_APP_STORAGE_DATA` and `FLET_APP_STORAGE_TEMP` to their paths.\\n:::\\n\\n## `pyproject.toml` support\\n\\nIt\'s inconvenient and bulky to carry all `flet build` settings as command line options.\\n\\nIn Flet 0.25.0 release is now possible to configure `flet build`, `flet run`, and `flet publish` settings in `pyproject.toml`!\\n\\nFlet adds `tool.flet` section and sub-sections to `pyproject.toml`. Here\'s the minimal version of `pyproject.toml` you can put into root folder of your app:\\n\\n```toml\\n[project]\\nname = \\"my_app\\"\\nversion = \\"1.0.0\\"\\ndescription = \\"My first Flet project\\"\\nauthors = [\\n  {name = \\"John Smith\\", email = \\"john@email.com\\"}\\n]\\ndependencies = [\\"flet\\"]\\n```\\n\\nYou can also generate a starting `pyproject.toml` (and other files) for your project with `flet create` command.\\n\\n\\n## New Python packages structure\\n\\nWe re-factored Flet Python packages and removed `flet-core`, `flet-runtime`, `flet-embed` or`flet-pyodide` packages.\\n\\nThe new structure avoids rewriting pip dependencies while installing `flet` package on various platforms. There was a problem of detecting the correct `flet` package to install (`flet-runtime`, `flet-embed` or`flet-pyodide`?) if `flet` was not a direct dependency in user\'s app.\\n\\nNew Flet packages:\\n\\n* `flet` - required for minimal Flet setup, app entry point for various platforms with core logic and controls. Installed on all platforms.\\n* `flet-cli` - contains Flet CLI commands. Installed on desktop only.\\n* `flet-desktop` - contains pre-built Flet \\"client\\" app binary for macOS, Windows and Linux. By default installed on macOS and Windows desktops only. \\n* `flet-desktop-light` - contains a light-weight version (without Audio and Video controls) of Flet \\"client\\" for Linux. By default installed on Linux desktops only. \\n* `flet-web` - contains Flet web \\"client\\" and FastAPI integration. Installed on desktop only.\\n\\nPackaged Flet app contains only `flet` package now.\\n\\n### `flet` package extras\\n\\n`flet` package defines the following extras that can be specified when installing Flet with pip, uv, poetry and other package manager:\\n\\n* `flet[all]` - installs `flet`, `flet-cli`, `flet-desktop` and `flet-web`. Recommended for development.\\n* `flet[cli]` - installs `flet` and `flet-cli`. Can be used in CI environment for packaging only.\\n* `flet[web]` - installs `flet` and `flet-web`. Used for deploying Flet web apps.\\n* `flet[desktop]` - installs `flet` and `flet-desktop`. Used for desktop-only development.\\n\\n### New Flet install and upgrade commands\\n\\nStarting from this release the development version of `flet` package should be installed with the following command:\\n\\n```\\npip install \'flet[all]\'\\n```\\n\\nUgrading `flet` package:\\n\\n```\\npip install \'flet[all]\' --upgrade\\n```\\n\\n:::note\\n`pip install flet` still works too, but it will install `flet` package only and dependent packages will be installed on demand. For example, when you run any `flet` CLI command `flet-cli` will be installed, or when you run `flet run` command `flet-desktop` package will be installed.\\n:::\\n\\n## \\"Light\\" client for Linux\\n\\nA lightweight desktop client, without Audio and Video controls, is now installed on Linux by default. It improves initial user experience as user doesn\'t need to immediately deal with `gstreamer` (audio) and `mpv` (video) dependencies and Flet \\"just works\\".\\n\\nOnce user got some Flet experience and wants to use Video and Audio controls in their application they can install gstreamer and/or mpv and replace Flet desktop with a full version.\\n\\nUninstall \\"light\\" Flet client:\\n\\n```\\npip uninstall flet-desktop-light --yes\\n```\\n\\nInstall full Flet desktop client:\\n\\n```\\npip install flet-desktop\\n```\\n\\n## New controls\\n\\n* Mobile Ads (`Banner` and `Interstitial`) ([details and example](https://github.com/flet-dev/flet/pull/3288)).\\n* `Button` control ([#4265](https://github.com/flet-dev/flet/pull/4265)) - which is just an alias for `ElevatedButton` control.\\n\\n## Breaking changes\\n\\n* Refactor `Badge` Control to a Dataclass; added new `badge` property to all controls ([#4077](https://github.com/flet-dev/flet/pull/4077)).\\n\\nBelow is how to migrate:\\n\\n```python\\n# before\\n    page.navigation_bar = ft.NavigationBar(\\n        destinations=[\\n            ft.NavigationBarDestination(\\n                icon_content=ft.Badge(\\n                    content=ft.Icon(ft.Icons.PHONE),\\n                    text=10,\\n                ),\\n                label=\\"Calls\\",\\n            ),\\n        ]\\n    )\\n\\n# after\\n    page.navigation_bar = ft.NavigationBar(\\n        destinations=[\\n            ft.NavigationBarDestination(\\n                  icon=ft.Icon(\\n                        ft.Icons.PHONE,\\n                        badge=\\"10\\",\\n                    ),\\n                label=\\"Calls\\",\\n            ),\\n        ]\\n    )\\n```\\n\\n## Other changes\\n\\n* Added `{value_length}`, `{max_length}`, and `{symbols_left}` placeholders to `TextField.counter_text` ([#4403](https://github.com/flet-dev/flet/pull/4403)).\\n* Added `--skip-flutter-doctor` to build cli command ([#4388](https://github.com/flet-dev/flet/pull/4388)).\\n* `WebView` enhancements ([#4018](https://github.com/flet-dev/flet/pull/4018)).\\n* `Map` control enhancements ([#3994](https://github.com/flet-dev/flet/pull/3994)).\\n* Exposed more `Theme` props ([#4278](https://github.com/flet-dev/flet/pull/4278), [#4278](https://github.com/flet-dev/flet/pull/4278)).\\n* Exposed more properties in multiple Controls ([#4105](https://github.com/flet-dev/flet/pull/4105))\\n* Added `__contains__` methods in container-alike Controls ([#4374](https://github.com/flet-dev/flet/pull/4374)).\\n* Added a custom `Markdown` code theme ([#4343](https://github.com/flet-dev/flet/pull/4343)).\\n* Added `barrier_color` prop to dialogs ([#4236](https://github.com/flet-dev/flet/pull/4236)).\\n* Merged `icon` and `icon_content` props into `icon: str | Control` ([#4305](https://github.com/flet-dev/flet/pull/4305)).\\n* Migrated `colors` and `icons` variables to Enums ([#4180](https://github.com/flet-dev/flet/pull/4180)).\\n* TextField: `suffix_icon`, `prefix_icon` and `icon` can be `Control` or `str` ([#4173](https://github.com/flet-dev/flet/pull/4173)).\\n* Added `--pyinstaller-build-args` to `flet pack` CLI command ([#4187](https://github.com/flet-dev/flet/pull/4187)).\\n* Made SearchBar\'s view height adjustable; added new properties ([#4039](https://github.com/flet-dev/flet/pull/4039)).\\n* Bumped Rive version and fixed Linux app build template for `rive_common`.\\n\\n## Bug fixes\\n\\n* Fixed `Icon` rotation ([#4384](https://github.com/flet-dev/flet/pull/4384)).\\n* Fixed regression in `Markdown.code_theme` when using `MarkdownCodeTheme` enum ([#4373](https://github.com/flet-dev/flet/pull/4373)).\\n* Fixed `Segment` and `NavigationBarDestination` accept only string tooltips ([#4326](https://github.com/flet-dev/flet/pull/4326)).\\n* Display informative message when `date` has wrong format ([#4019](https://github.com/flet-dev/flet/pull/4019)).\\n* Fixed `MapConfiguration.interaction_configuration` is not honoured ([#3976](https://github.com/flet-dev/flet/pull/3976)).\\n* Fixed `Video.jump_to()` fails with negative indexes ([#4294](https://github.com/flet-dev/flet/pull/4294)).\\n* Fixed condition in `AppBar.tooltip_opacity` ([#4280](https://github.com/flet-dev/flet/pull/4280)).\\n* Fixed wrong type (asyncio.Future -> concurrent.futures.Future) and handle `CancelledError` ([#4268](https://github.com/flet-dev/flet/pull/4268)).\\n* Fixed clicking on `CupertinoContextMenuAction` doesn\'t close context menu ([#3948](https://github.com/flet-dev/flet/pull/3948)).\\n* Fixed dropdown `max_menu_height` ([#3974](https://github.com/flet-dev/flet/pull/3974)).\\n* Fixed prevent button style from being modified in `before_update()` ([#4181](https://github.com/flet-dev/flet/pull/4181)).\\n* Fixed disabling filled buttons is not visually respected ([#4090](https://github.com/flet-dev/flet/pull/4090)).\\n* when `label` is set, use `MainAxisSize.min` for the `Row` ([#3998](https://github.com/flet-dev/flet/pull/3998)).\\n* Fixed `NavigationBarDestination.disabled` has no visual effect ([#4073](https://github.com/flet-dev/flet/pull/4073)).\\n* Fixed autofill in `CupertinoTextField` ([#4103](https://github.com/flet-dev/flet/pull/4103)).\\n* Linechart: `jsonDecode` tooltip before displaying ([#4069](https://github.com/flet-dev/flet/pull/4069)).\\n* Fixed button\'s `bgcolor`, `color` and `elevation` ([#4126](https://github.com/flet-dev/flet/pull/4126)).\\n* Fixed scrolling issues on Windows ([#4145](https://github.com/flet-dev/flet/pull/4145)).\\n* Skip running flutter doctor on windows if `no_rich_output` is `True` ([#4108](https://github.com/flet-dev/flet/pull/4108)).\\n* Fixed `TextField` freezes on Linux Mint #4422](https://github.com/flet-dev/flet/pull/4422)).\\n\\n## Conclusion\\n\\nFlet 0.25.0 is a huge release and your feedback is highly welcomed!\\n\\nUpgrade to Flet 0.25.0, test your apps and let us know how you find the new features we added.\\n\\nIf you have any questions, please join [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nHappy Flet-ing! \ud83d\udc7e"},{"id":"pyproject-toml-support-for-flet-build-command","metadata":{"permalink":"/docs/flet-doc/blog/pyproject-toml-support-for-flet-build-command","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-10-15-pyproject-toml-support-for-flet-build-command.md","source":"@site/blog/2024-10-15-pyproject-toml-support-for-flet-build-command.md","title":"pyproject.toml support for flet build command","description":"The number of options for flet build command grew substantially over the time and it\'s been inconvenient to carry all these settings in a command line.","date":"2024-10-15T00:00:00.000Z","tags":[],"readingTime":4.76,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"pyproject-toml-support-for-flet-build-command","title":"pyproject.toml support for flet build command","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"},"unlisted":false,"prevItem":{"title":"Flet v0.25.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-25-release-announcement"},"nextItem":{"title":"Flet new packaging pre-release","permalink":"/docs/flet-doc/blog/flet-new-packaging-pre-release"}},"content":"The number of options for `flet build` command grew substantially over the time and it\'s been inconvenient to carry all these settings in a command line.\\n\\nToday, we are excited to announce another Flet pre-release which now allows configuring app build settings in `pyproject.toml`!\\n\\n## Installing pre-release\\n\\n```\\npip install flet==0.25.0.dev3526\\n```\\n\\n:::note\\nFor testing purposes we suggest installing Flet pre-release in a dedicated Python virtual environment.\\n:::\\n\\n## Building the app with pre-release\\n\\nTo build your app with `flet build` command and pre-release version of Flet make sure your `requirements.txt` either contains exact version specifier:\\n\\n```\\nflet==0.25.0.dev3526\\n```\\n\\nor `--pre` flag before `flet` dependency:\\n\\n```\\n--pre\\nflet\\n```\\n\\n## Quick start\\n\\nCreate the following minimal `pyproject.toml` file in the root of your Flet app or run `flet create` to create a new app from template:\\n\\n```toml\\n[project]\\nname = \\"my_app\\"\\nversion = \\"1.0.0\\"\\ndescription = \\"My first Flet project\\"\\nauthors = [\\n  {name = \\"John Smith\\", email = \\"john@email.com\\"}\\n]\\ndependencies = [\\"flet==0.25.0.dev3526\\"]\\n```\\n\\n:::note\\nWith `pyproject.toml`, you no longer need `requirements.txt`. However, if a `requirements.txt` file exists in the app\'s directory, the flet build command will prioritize reading dependencies from it instead of those listed in `pyproject.toml`.\\n:::\\n\\n`[project]` is the standard required section of `project.toml`.\\n\\n:::note\\nFlet also supports `[tool.poetry]` section created by Poetry which contains project settings.\\n:::\\n\\nA minimal `pyproject.toml` for Poetry, which is also supported by `flet build` command, is the following:\\n\\n```toml\\n[tool.poetry]\\nname = \\"my_app\\"\\nversion = \\"1.0.0\\"\\ndescription = \\"My first Flet project\\"\\nauthors = [\\"John Smith <john@email.com>\\"]\\n\\n[tool.poetry.dependencies]\\npython = \\"^3.10\\"\\nflet = \\"0.25.0.dev3526\\"\\n```\\n\\n`project.name` (or `tool.poetry.name`) corresponds to `--project` option of `flet build` command and it will be the name of app bundle or executable. The value of `project.name` will be \\"slugified\\" where all non-alphanumeric values are replaced with dashes `-`.\\n\\n`project.version` (or `tool.poetry.version`) corresponds to `--build-version` option and it is a value in \\"x.y.z\\" string used as the version number shown to users.\\n\\n`project.description` (or `tool.poetry.description`) corresponds to `--description` option which is the description to use for executable or bundle.\\n\\n:::note\\n`project.authors` and `tool.poetry.authors` are not used by `flet build`, but required by a standard and other tools.\\n:::\\n\\n### Overriding config with CLI options\\n\\nAll settings in `pyproject.toml` have corresponding `flet build` CLI options. If you run the flet build command and specify options that are already configured in `pyproject.toml`, the CLI option values will override those from the configuration file.\\n\\n## Project dependencies\\n\\nList project dependencies in `project.dependencies` section. The value is an array with pip-like requirement specifiers:\\n\\n```\\n[project]\\ndependencies = [\\n  \\"flet==0.25.0.dev3526\\",\\n  \\"numpy\\"\\n]\\n```\\n\\n## Product information\\n\\nAll Flet specific settings should be put into `[tool.flet]` section and sub-sections below it.\\n\\nProduct information settings complement the ones in `[project]` section and allows configuring app bundle identifier and product display name.\\n\\n```toml\\n[tool.flet]\\norg = \\"com.mycompany\\" # --org\\nproduct = \\"Product name\\" # --product\\ncompany = \\"My Company\\" # --company\\ncopyright = \\"Copyright (C) 2024 by MyCompany\\" # --copyright\\nbuild_number = 1 # --build-number\\n```\\n\\n## App package contents\\n\\nThe following settings control the contents of Python app archive and compilation of app/packages sources.\\n\\n```toml\\n[tool.flet]\\napp.module = \\"main\\" # --module-name\\napp.path = \\"src\\" # path to Python app relative to `pyproject.toml`\\napp.exclude = [\\"assets\\"] # --exclude\\n\\ncompile.app = false # --compile-app\\ncompile.packages = false # --compile-packages\\ncompile.cleanup = false # --cleanup-on-compile\\n```\\n\\nThey could be alternatively written under their own sub-sections as:\\n\\n```toml\\n[tool.flet.app]\\nmodule = \\"main\\"\\npath = \\"src\\"\\nexclude = [\\"assets\\"]\\n\\n[tool.flet.compile]\\napp = false\\npackages = false\\ncleanup = false\\n```\\n\\n## Splash\\n\\n```toml\\n[tool.flet.splash]\\ncolor = \\"\\" # --splash-color\\ndark_color = \\"\\" # --splash-dark-color\\nweb = false # --no-web-splash\\nios = false # --no-ios-splash\\nandroid = false # --no-android-splash\\n```\\n\\n## Permissions\\n\\n```toml\\n[tool.flet]\\npermissions = [\\"camera\\", \\"microphone\\"] # --permissions\\n```\\n\\n## Deep linking\\n\\n```toml\\n[tool.flet.deep_linking]\\nscheme = \\"https\\" # --deep-linking-scheme\\nhost = \\"mydomain.com\\" # --deep-linking-host\\n```\\n\\n### Android settings\\n\\n```toml\\n[tool.flet.android]\\nadaptive_icon_background = \\"\\" # --android-adaptive-icon-background\\nsplit_per_abi = false # --split-per-abi\\n```\\n\\nPermissions (notice quotes `\\"` around key names):\\n\\n```toml\\n[tool.flet.android.permission] # --android-permissions\\n\\"android.permission.CAMERA\\" = true\\n\\"android.permission.CAMERA\\" = true\\n```\\n\\nFeatures (notice quotes `\\"` around key names):\\n\\n```toml\\n[tool.flet.android.feature] # --android-features\\n\\"android.hardware.camera\\" = false\\n```\\n\\nAndroid-specific deep-linking:\\n\\n```toml\\n[tool.flet.android.deep_linking]\\nscheme = \\"https\\" # --deep-linking-scheme\\nhost = \\"mydomain.com\\" # --deep-linking-host\\n```\\n\\nAndroid bundle signing options:\\n\\n```toml\\n[tool.flet.android.signing]\\n# store and key passwords can be passed with `--android-signing-key-store-password`\\n# and `--android-signing-key-password` options or\\n# FLET_ANDROID_SIGNING_KEY_STORE_PASSWORD\\n# and FLET_ANDROID_SIGNING_KEY_PASSWORD environment variables.\\nkey_store = \\"path/to/store.jks\\" # --android-signing-key-store\\nkey_alias = \\"upload\\"\\n```\\n\\n### iOS settings\\n\\n```toml\\n[tool.flet.ios]\\nteam = \\"team_id\\" # --team\\n\\n[tool.flet.ios.info] # --info-plist\\nNSCameraUsageDescription = \\"This app uses the camera to ...\\"\\n\\n[tool.flet.ios.info.deep_linking]\\nscheme = \\"https\\"\\nhost = \\"mydomain.com\\"\\n```\\n\\n### macOS settings\\n\\n```toml\\n[tool.flet.macos]\\nentitlement.\\"com.apple.security.personal-information.photos-library\\" = true\\n```\\n\\n```toml\\n[tool.flet]\\nbuild_arch = \\"arm64\\" # --arch - if arch is not specified Flet will build universal package for both arm64 and x86_64 archs\\n```\\n\\n### Web settings\\n\\n```toml\\n[tool.flet.web]\\nbase_url = \\"/\\" # --base-url\\nrenderer = \\"canvaskit\\" # --web-renderer\\nuse_color_emoji = false # --use-color-emoji\\nroute_url_strategy = \\"path\\" # --route-url-strategy\\n```\\n\\n## Flutter settings\\n\\n### Dependencies\\n\\n```toml\\nflutter.dependencies = [\\"flet_video\\", \\"flet_audio\\"] # --include-packages\\n```\\n\\nor with alternative syntax with versions:\\n\\n```toml\\n[tool.flet.flutter.dependencies]\\nflet_video = \\"1.0.0\\"\\nflet_audio = \\"2.0.0\\"\\n```\\n\\nor with path to the package on your disk:\\n\\n```toml\\n[tool.flet.flutter.dependencies.my_package]\\npath = \\"/path/to/my_package\\"\\n```\\n\\n### Extra build args\\n\\nflutter.build_args = [\\"--some-flutter-arg\\"] # --flutter-build-args\\n\\n### Extra `pubspec.yaml` settings\\n\\nAllows injecting arbitrary content into resulting `pubspec.yaml`, for example:\\n\\n```toml\\n[tool.flet.flutter.pubspec.dependency_overrides]\\nweb = \\"1.0.0\\"\\n```\\n\\n## Custom template\\n\\n```toml\\n[tool.flet.template]\\npath = \\"gh:some-github/repo\\" # --template\\ndir = \\"\\" # --template-dir\\nref = \\"\\" # --template-ref\\n```\\n\\nThat\'s it! Upgrade to Flet 0.25.0.dev3526, give this new feature and try and let us know what you think!\\n\\nCheers!"},{"id":"flet-new-packaging-pre-release","metadata":{"permalink":"/docs/flet-doc/blog/flet-new-packaging-pre-release","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-10-10-flet-new-packaging-pre-release.md","source":"@site/blog/2024-10-10-flet-new-packaging-pre-release.md","title":"Flet new packaging pre-release","description":"Flet packaging for iOS and Android has been relying on Kivy and it was super annoying when your app depends on Python binary packages, such as Numpy or Pillow. You needed to compile those packages yourself using Kivy command line tools. It was really frustrating and even hopeless if Kivy didn\'t have \\"recipes\\" for some packages, like Pydantic.","date":"2024-10-10T00:00:00.000Z","tags":[],"readingTime":7.5,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-new-packaging-pre-release","title":"Flet new packaging pre-release","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"},"unlisted":false,"prevItem":{"title":"pyproject.toml support for flet build command","permalink":"/docs/flet-doc/blog/pyproject-toml-support-for-flet-build-command"},"nextItem":{"title":"Flet v0.24.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-24-release-announcement"}},"content":"Flet packaging for iOS and Android has been relying on Kivy and it was super annoying when your app depends on Python binary packages, such as Numpy or Pillow. You needed to compile those packages yourself using Kivy command line tools. It was really frustrating and even hopeless if Kivy didn\'t have \\"recipes\\" for some packages, like Pydantic.\\n\\nKivy no more! We\'ve just published Flet 0.25.0.dev3519 pre-release with the improved `flet build` command which does not use Kivy! Flet is now using its own Python runtime \\"meticulously crafted in-house\\".\\n\\nFlet packaging implementation for iOS and Androind adheres to strict specifications defined in [PEP 730](https://peps.python.org/pep-0730/) (iOS) and [PEP 738](https://peps.python.org/pep-0738/) (Android) which were implemented and released in Python 3.13 (and back-ported to Python 3.12). When pypi.org supports wheel tags for iOS and Android and 3rd-party Python package maintainers start uploading their mobile packages Flet will be compatible with them and you\'ll be able to use them in your Flet app.\\n\\n## Installing pre-release\\n\\n```\\npip install flet==0.25.0.dev3519\\n```\\n\\n:::note\\nFor testing purposes we suggest installing Flet pre-release in a dedicated Python virtual environment.\\n:::\\n\\n## Building the app with pre-release\\n\\nTo build your app with `flet build` command and pre-release version of Flet make sure your `requirements.txt` either contains exact version specifier:\\n\\n```\\nflet==0.25.0.dev3519\\n```\\n\\nor `--pre` flag before `flet` dependency:\\n\\n```\\n--pre\\nflet\\n```\\n\\n## Python 3.12\\n\\nPackaged Flet app runs on Python 3.12.6 runtime for all platforms.\\n\\n## Pre-built binary packages\\n\\n`flet build` command for iOS and Android is now installing pre-built binary packages from https://pypi.flet.dev.\\n\\nNew packages can be built with creating a recipe in [Mobile Forge](https://github.com/flet-dev/mobile-forge) project. For now, Flet team is authoring those recipes for you, but when the process is polished and fully-automated you\'ll be able to send a PR and test the compiled package right away.\\n\\nIf you don\'t yet see a package at https://pypi.flet.dev you can request it in [Flet discussions - Packages](https://github.com/flet-dev/flet/discussions/categories/packages). Please do not request pure Python packages. Go to package\'s \\"Download files\\" section at https://pypi.org and make sure it contains binary platform-specific wheels.\\n\\nPackaging behavior was changed too:\\n\\n- The packaging is not trying to replace `flet` dependency with `flet-runtime`, `flet-embed` or `flet-pyodide`, but install all dependencies \\"as is\\" from `requirements.txt` or `pyproject.toml` - thanks to the new Flet packages structure (link).\\n- If the binary package for target platform is not found the packaging won\'t be trying to compile it from source distribution, but will fail instead with a meaningful error.\\n\\n## New packages structure\\n\\nThe structure avoids rewriting pip dependencies while installing `flet` package on various platforms. There was a problem of detecting the correct `flet` package to install (`flet-runtime`, `flet-embed` or`flet-pyodide`?) if `flet` was not a direct dependency in user\'s app.\\n\\nNew Flet packages:\\n\\n* `flet` - required for minimal Flet setup, app entry point for various platforms. Installed on all platforms.\\n* `flet-core` - required for minimal Flet setup, core logic and controls. Installed on all platforms.\\n* `flet-cli` - contains Flet CLI commands. Installed on desktop only.\\n* `flet-desktop` - contains pre-built Flet \\"client\\" app binary for macOS, Windows and Linux. By default installed on macOS and Windows desktops only. \\n* `flet-desktop-light` - contains a light-weight version (without Audio and Video controls) of Flet \\"client\\" for Linux. By default installed on Linux desktops only. \\n* `flet-web` - contains Flet web \\"client\\" and FastAPI integration. Installed on desktop only.\\n\\nOther words, packaged Flet app contains only `flet` and `flet-core` packages.\\n\\n### \\"Light\\" client for Linux\\n\\nA light-weight desktop client, without Audio and Video controls, is not installed on Linux by default. It improves initial user experience as user doesn\'t need to immediately deal with gstreamer (audio) and mpv (video) dependencies right away and Flet \\"just works\\".  \\n\\nOnce user got some Flet experience and wants to use Video and Audio controls in their application they can install gstreamer and/or mpv and replace Flet desktop with a full version.\\n\\nUninstall \\"light\\" Flet client:\\n\\n```\\npip uninstall flet-desktop-light --yes\\n```\\n\\nInstall full Flet desktop client:\\n\\n```\\npip install flet-desktop==0.25.0.dev3519\\n```\\n\\n## Permissions\\n\\nNew `flet build` command allows granular control over permissions, features and entitlements embedded into `AndroidManifest.xml`, `Info.plist` and `.entitlements` files.\\n\\nNo more hard-coded permissions in those files!\\n\\n### iOS\\n\\nSetting iOS permissions:\\n\\n```\\nflet build --info-plist permission_1=True|False|description permission_2=True|False|description ...\\n```\\n\\nFor example:\\n\\n```\\nflet build --info-plist NSLocationWhenInUseUsageDescription=This app uses location service when in use.\\n```\\n\\n### macOS\\n\\nSetting macOS entitlements:\\n\\n```\\nflet build --macos-entitlements name_1=True|False name_2=True|False ...\\n```\\n\\nDefault macOS entitlements:\\n\\n* `com.apple.security.app-sandbox = False`\\n* `com.apple.security.cs.allow-jit = True`\\n* `com.apple.security.network.client = True`\\n* `com.apple.security.network.server\\" = True`\\n\\n### Android\\n\\nSetting Android permissions and features:\\n\\n```\\nflet build --android-permissions permission=True|False ... --android-features feature_name=True|False\\n```\\n\\nFor example:\\n\\n```\\nflet build \\\\\\n    --android-permissions android.permission.READ_EXTERNAL_STORAGE=True \\\\\\n      android.permission.WRITE_EXTERNAL_STORAGE=True \\\\\\n    --android-features android.hardware.location.network=False\\n```\\n\\nDefault Android permissions:\\n\\n* `android.permission.INTERNET`\\n\\nDefault permissions can be disabled with `--android-permissions` option and `False` value, for example:\\n\\n```\\nflet build --android-permissions android.permission.INTERNET=False\\n```\\n\\nDefault Android features:\\n\\n* `android.software.leanback=False` (`False` means it\'s written in manifest as `android:required=\\"false\\"`)\\n* `android.hardware.touchscreen=False`\\n\\n### Cross-platform permission groups\\n\\nThere are pre-defined permissions that mapped to `Info.plist`, `*.entitlements` and `AndroidManifest.xml` for respective platforms.\\n\\nSetting cross-platform permissions:\\n\\n```\\nflet build --permissions permission_1 permission_2 ...\\n```\\n\\nSupported permissions:\\n\\n* `location`\\n* `camera`\\n* `microphone`\\n* `photo_library`\\n\\n#### iOS mapping to `Info.plist` entries\\n\\n* `location`\\n  * `NSLocationWhenInUseUsageDescription = This app uses location service when in use.`\\n  * `NSLocationAlwaysAndWhenInUseUsageDescription = This app uses location service.`\\n* `camera`\\n  * `NSCameraUsageDescription = This app uses the camera to capture photos and videos.`\\n* `microphone`\\n  * `NSMicrophoneUsageDescription = This app uses microphone to record sounds.`\\n* `photo_library`\\n  * `NSPhotoLibraryUsageDescription = This app saves photos and videos to the photo library.`\\n\\n#### macOS mapping to entitlements\\n\\n* `location`\\n  * `com.apple.security.personal-information.location = True`\\n* `camera`\\n  * `com.apple.security.device.camera = True`\\n* `microphone`\\n  * `com.apple.security.device.audio-input = True`\\n* `photo_library`\\n  * `com.apple.security.personal-information.photos-library = True`\\n\\n#### Android mappings\\n\\n* `location`\\n  * permissions:\\n    * `android.permission.ACCESS_FINE_LOCATION\\": True`\\n    * `android.permission.ACCESS_COARSE_LOCATION\\": True`\\n    * `android.permission.ACCESS_BACKGROUND_LOCATION\\": True`\\n  * features:\\n    * `android.hardware.location.network\\": False`\\n    * `android.hardware.location.gps\\": False`\\n* `camera`\\n  * permissions:\\n    * `android.permission.CAMERA\\": True`\\n  * features:\\n    * `android.hardware.camera\\": False`\\n    * `android.hardware.camera.any\\": False`\\n    * `android.hardware.camera.front\\": False`\\n    * `android.hardware.camera.external\\": False`\\n    * `android.hardware.camera.autofocus\\": False`\\n* `microphone`\\n  * permissions:\\n    * `android.permission.RECORD_AUDIO\\": True`\\n    * `android.permission.WRITE_EXTERNAL_STORAGE\\": True`\\n    * `android.permission.READ_EXTERNAL_STORAGE\\": True`\\n* `photo_library`\\n  * permissions:\\n    * `android.permission.READ_MEDIA_VISUAL_USER_SELECTED\\": True`\\n\\n## Control over app compilation and cleanup\\n\\n`flet build` command is no longer compiling app `.py` files into `.pyc` by default which allows you to avoid (defer?) discovery of any syntax errors in your app and complete the packaging.\\n\\nYou can control the compilation and cleanup with the following new options:\\n\\n* `--compile-app` - compile app\'s `.py` files.\\n* `--compile-packages` - compile installed packages\' `.py` files.\\n* `--cleanup-on-compile` - remove unnecessary files upon successful compilation.\\n\\n## Signing Android bundles\\n\\nAdded new options for signing Android builds:\\n\\n* `--android-signing-key-store` - path to an upload keystore `.jks` file for Android apps.\\n* `--android-signing-key-store-password` - Android signing store password.\\n* `--android-signing-key-alias` - Android signing key alias. Default is \\"upload\\".\\n* `--android-signing-key-password` - Android signing key password.\\n\\nRead [Build and release an Android app](https://docs.flutter.dev/deployment/android#signing-the-app) for more information on how to configure upload key for Android builds.\\n\\n## \\"Data\\" and \\"Temp\\" directories for the app\\n\\nFlet developers have been asking where to store application data, such as uploaded files, SQLite databases, etc. that are persistent across application updates.\\n\\nThis release introduce two environment variables that are available in your Flet apps:\\n\\n* `FLET_APP_STORAGE_DATA` - directory for storing application data that is preserved between app updates. That directory is already pre-created.\\n* `FLET_APP_STORAGE_TEMP` - directory for temporary application files, i.e. cache. That directory is already pre-created.\\n\\nFor example, data folder path can be read in your app as:\\n\\n```\\nimport os\\n\\n# it\'s `None` when running the app in web mode\\ndata_dir = os.getenv(\\"FLET_APP_STORAGE_DATA\\")\\n```\\n\\n:::note\\n`flet run` command creates data and temp directories and sets `FLET_APP_STORAGE_DATA` and `FLET_APP_STORAGE_TEMP` to their paths.\\n:::\\n\\n## Deep linking configuration\\n\\nThere is a new `--deep-linking-url` option to configure deep linking for iOS and Android builds. The value must be in the format `<sheme>://<host>`.\\n\\n## Faster re-builds\\n\\nEphemeral Flutter app created by `flet build` command is not re-created all the time in a temp directory, but cached in `build/flutter` directory which gives faster re-builds, improves packaging troubleshooting and does not pollute temp directory.\\n\\n## Split APKs per ABI\\n\\n`flet build` now provides the built-in `--split-per-abi` option to split the APKs per ABIs.\\n\\n## Known pre-release issues\\n\\n* `flet publish` is not yet working.\\n\\n## What else coming in the release\\n\\nWe would like to include a few more things into Flet 0.25.0 release. Expect more pre-releases in the coming weeks.\\n\\n### `pyproject.toml` support\\n\\nIt\'s inconvenient and bulky to carry all `flet build` settings as command line options.\\n\\nYou will be able to store project and build settings in `[tool.flet]` section of `pyproject.toml`.\\n\\n### Running Flet app on simulator\\n\\nWe will add an option to `flet build` and run packaged app on a real device or simulator.\\n\\n### Installing Flutter\\n\\n`flet build` will download and configure Flutter for you if there is no suitable installation available on your machine."},{"id":"flet-v-0-24-release-announcement","metadata":{"permalink":"/docs/flet-doc/blog/flet-v-0-24-release-announcement","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-08-31-flet-v-0-24-release-announcement.md","source":"@site/blog/2024-08-31-flet-v-0-24-release-announcement.md","title":"Flet v0.24.0 Release Announcement","description":"I am very happy to announce the release of Flet version 0.24.0!","date":"2024-08-31T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":5.235,"hasTruncateMarker":false,"authors":[{"name":"Henri Ndonko","title":"Flet Contributor and Maintainer","url":"https://github.com/ndonkoHenri","imageURL":"https://avatars.githubusercontent.com/u/98978078?v=4"}],"frontMatter":{"slug":"flet-v-0-24-release-announcement","title":"Flet v0.24.0 Release Announcement","author":"Henri Ndonko","author_title":"Flet Contributor and Maintainer","author_url":"https://github.com/ndonkoHenri","author_image_url":"https://avatars.githubusercontent.com/u/98978078?v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet new packaging pre-release","permalink":"/docs/flet-doc/blog/flet-new-packaging-pre-release"},"nextItem":{"title":"Flet v0.23.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-23-release-announcement"}},"content":"I am very happy to announce the release of Flet version 0.24.0! \\nIt comes with a very long list of bug fixes, several enhancements and new features.\\n\\n## New Controls\\n\\n- [`InteractiveViewer`](/docs/controls/interactiveviewer)\\n- [`Placeholder`](/docs/controls/placeholder)\\n\\n## New Properties\\n\\n- [`AudioRecorder`](/docs/controls/audiorecorder): `cancel_recording()`\\n- [`Video`](/docs/controls/video): `on_completed`, `on_track_changed`\\n- [`InputFilter`](/docs/reference/types/inputfilter): `unicode`, `case_sensitive`, `dot_all`, `multiline`\\n- [`Geolocator`](/docs/controls/geolocator): `on_error`, `on_position_change`\\n- [`Barchart`](/docs/controls/barchart), [`LineChart`](/docs/controls/linechart): `tooltip_border_side`, `tooltip_direction`, `tooltip_fit_inside_horizontally`, `tooltip_fit_inside_vertically`, `tooltip_horizontal_offset`, `tooltip_margin`, `tooltip_max_content_width`, `tooltip_padding`, `tooltip_rounded_radius`, `tooltip_rotate_angle`\\n- [`Container`](/docs/controls/container): `decoration`, `foreground_decoration`, `ignore_interactions`, `image`\\n- [`Page`](/docs/controls/page), [`View`](/docs/controls/view): `decoration`, `foreground_decoration`\\n- [`CupertinoTextField`](/docs/controls/cupertinotextfield): `enable_scribble`, `image`, `obscuring_character`, `padding`, `scroll_padding`, `on_click`\\n- [`DataTable`](/docs/controls/datatable): `heading_row_alignment`\\n- [`TextField`](/docs/controls/textfield): `counter`, `disabled_hint_content`, `options_fill_horizontally`\\n- [`ExpansionTile`](/docs/controls/expansiontile): `min_tile_height`, `show_trailing_icon`\\n- [`Markdown`](/docs/controls/markdown): `fit_content`, `img_error_content`, `md_style_sheet`, `shrink_wrap`, `soft_line_break`, `on_selection_change`\\n- [`MenuItemButton`](/docs/controls/menuitembutton): `autofocus`, `overflow_axis`, `semantic_label`\\n- [`Tabs`](/docs/controls/tabs): `label_padding`, `label_text_style`, `padding`, `splash_border_radius`, `unselected_label_text_style`, `on_click`\\n- and lot of [new classes](/docs/reference) (enums, dataclasses, events)\u2026\\n\\n## Enhancements\\n- Better string output of Events when printed\\n- `Image.filter_quality` now has a default of `FilterQuality.MEDIUM` (previously `FilterQuality.LOW`), which is a better default for downscaled images.\\n- `Geolocator` control has been improved to support location streaming through the newly added on_position_change event. When defined, you will be able to \\"listen\\" to location changes as they happen.\\n- When `AppBar.adaptive=True` and the app is running on an Apple platform, the `AppBar.actions` controls are now wrapped in a `Row`, then displayed. Before this, only the first item of `AppBar.actions` list was displayed.\\n- The `Markdown` control has been significantly improved. It can now display SVG images and be much more customized.\\n- A very requested feature was the ability to set a background image or gradient for the application. In [#3820](https://github.com/flet-dev/flet/pull/3820), we made this possible and easy to use.\\n- rtl (right-to-left) property has been added to more controls (`NavigationRailDestination`, `NavigationRail`, `AppBar`, `CupertinoAppBar`, and `NavigationDrawer` ) to improve support for right-to-left text directions.\\n- Introduced `--no-rich-output` flag (only in `flet build` command for now) to make it possible to disable rich output (mainly emojis) in the console. More information in [#3708](https://github.com/flet-dev/flet/pull/3708).\\n- Typing has been significantly improved, particularly for event-handler properties. In modern IDEs like PyCharm and VSCode, you can now easily determine the type of an event handler\'s argument by simply hovering over the event in the control. Additionally, the IDE will highlight errors when you attempt to access a non-existent property on the event handler argument, ensuring more robust and error-free code.\\n\\n## Bug Fixes\\n\\nThe below issues were successfully fixed:\\n\\n- [#3769](https://github.com/flet-dev/flet/issues/3769): `InputFilter` clears the `TextField` text content when an invalid character is entered\\n- [#3770](https://github.com/flet-dev/flet/issues/3770): `Theme.floating_action_button_theme` non existent\\n- [#3734](https://github.com/flet-dev/flet/issues/3734): Ensure `Dropdown.alignment` is respected.\\n- [#3730](https://github.com/flet-dev/flet/issues/3730): `UnicodeEncodeError` raised when packaging on WindowOS\\n- [#2160](https://github.com/flet-dev/flet/issues/2160): `Markdown` control can\'t render svg images\\n- [#2158](https://github.com/flet-dev/flet/issues/2158): `Markdown` broken when an image is not found\\n- [#3679](https://github.com/flet-dev/flet/issues/3679): Broken `Dismissible`\\n- [#3670](https://github.com/flet-dev/flet/issues/3670): `Switch.height` and `Switch.width` not respected\\n- [#3612](https://github.com/flet-dev/flet/issues/3612), [#3566](https://github.com/flet-dev/flet/issues/3566): Broken `OnScrollEvent`\\n- [#3564](https://github.com/flet-dev/flet/issues/3564): Broken `TextField.capitalization`\\n- [#3649](https://github.com/flet-dev/flet/issues/3649): `CupertinoPicker` jumps-scroll on some platforms\\n- [#3557](https://github.com/flet-dev/flet/issues/3557): Impeller causes blank screen on mac Intel\\n- [#3574](https://github.com/flet-dev/flet/issues/3574): `Geolocator` not working on Android devices\\n- [#3505](https://github.com/flet-dev/flet/issues/3505): `WindowEventType` doesn\'t contain fullscreen all events\\n\\nThanks to all those who reported them!\\n\\n## Deprecations\\n\\nAll deprecated items from this release will be removed in version 0.27.0.\\n\\n- `ThemeVisualDensity` is deprecated and has been renamed to [`VisualDensity`](/docs/reference/types/visualdensity)\\n- [`CupertinoButton`](/docs/controls/cupertinobutton): `disabled_color` is deprecated and has been renamed to `disabled_bgcolor`, which better reflects its use\\n- [`Markdown`](/docs/controls/markdown): `code_style` is deprecated and should now be accessed as  `code_style_sheet.code_text_style`\\n- [`Container`](/docs/controls/container): `image_fit`, `image_opacity`, `image_repeat`, `image_src` and `image_src_base64` are deprecated and should now be accessed from `image` which is of type [`DecorationImage`](/docs/reference/types/decorationimage)\\n\\n## Breaking Changes and Migration\\n\\n### Tooltip\\nThe Tooltip class is no more a Flet control and is from now on a simple Python dataclass. The tooltip property (available in almost all controls) now supports both strings and Tooltip objects.\\n\\nBelow is how to migrate:\\n\\n```python\\n# before\\npage.add(\\n    ft.Tooltip(\\n        message=\\"This is tooltip\\",\\n        content=ft.Text(\\"Hover to see tooltip\\"),\\n        padding=20,\\n        border_radius=10,\\n    )\\n)\\n\\n# after\\npage.add(\\n    ft.Text(\\n        \\"Hover to see tooltip\\",\\n        tooltip=ft.Tooltip(\\n            message=\\"This is tooltip\\",\\n            padding=20,\\n            border_radius=10,\\n        )\\n    )\\n)\\n```\\n\\n### TextField InputFilter\\nWe modified how `InputFilter.regex_string` is internally handled. As a result of this, you (might) now have to anchor your regex pattern. This simply implies using start (^) and end ($) regex anchors.\\nFor example: `r\\"[0-9]\\"` now becomes `r\\"^[0-9]$\\"`. Using this new string will lead work as expected and only numbers/digits will be allowed, but you might notice another issue: the last character of the text field cannot be deleted. To resolve this, you need to add an asterisk (*) in the regex which in this case will simply mean \\"match zero or more digits (including an empty string)\\". The new regex now becomes `r\\"^[0-9]*$\\"`.\\nTo ease this migration, you can use an AI tool with the following simple prompt: `\\"update the following regex pattern: #### ensuring that the entire string matches the pattern and it allows for an empty string\\"`.\\n\\n### Event-Handler subscription\\nThe possibility to \\"subscribe\\" more than one callback to an event handler has been removed, as this was somehow biased (was only possible on some, and not all).\\nBelow is a simple example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def print_one(e):\\n        print(\\"1\\")\\n    def print_two(e):\\n        print(\\"2\\")\\n    def print_three(e):\\n        print(\\"3\\")\\n    c = ft.Container(\\n        bgcolor=ft.Colors.random_color(),\\n        width=300,\\n        height=300,\\n    )\\n    \\n    # subscribe callbacks\\n    c.on_tap_down = print_one\\n    c.on_tap_down = print_two\\n    c.on_tap_down = print_three\\n    page.add(c)\\n\\nft.app(main)\\n```\\n\\nIn the above code, we subscribe multiple callbacks to the [`Container.on_tap_down`](/docs/controls/container#on_tap_down) event. Prior to Flet version 0.24.0, running this code and tapping on the `Container`, you will see all the callbacks getting called (\\"1\\", \\"2\\" and \\"3\\" are printed out).\\nFrom Flet version 0.24.0 going forward, one event = one callback. Meaning only the lastly subscribed callback will get executed (\\"3\\" is printed out)\\nSo, if you still want the final output to resemble the first one you can simply create one callback which calls the others:\\n\\n```python\\n\\ndef main(page: ft.Page):\\n    #....\\n  \\n    def print_all(e):\\n            print_one(e)\\n            print_two(e)\\n            print_three(e)\\n    \\n    c = ft.Container(\\n            bgcolor=ft.Colors.random_color(),\\n            width=300,\\n            height=300,\\n            on_tap_down=print_all,\\n        )\\n\\n    # OR\\n    c.on_tap_down = print_all\\n```\\n\\n## Conclusion\\nAs you can see, we made a lot of changes in this release and as usual, your feedback is highly welcomed!\\n\\nUpgrade to Flet 0.24.0, test your apps and let us know how you find the new features we added.\\nIf you have any questions, please join [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nHappy Flet-ing! \ud83d\udc7e"},{"id":"flet-v-0-23-release-announcement","metadata":{"permalink":"/docs/flet-doc/blog/flet-v-0-23-release-announcement","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-06-18-flet-v-0-23-release-announcement.md","source":"@site/blog/2024-06-18-flet-v-0-23-release-announcement.md","title":"Flet v0.23.0 Release Announcement","description":"We are excited to announce the release of Flet 0.23.0. It is a big release with many new features and bug fixes.","date":"2024-06-18T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":2.95,"hasTruncateMarker":false,"authors":[{"name":"Henri Ndonko","title":"Flet Contributor and Maintainer","url":"https://github.com/ndonkoHenri","imageURL":"https://avatars.githubusercontent.com/u/98978078?v=4"}],"frontMatter":{"slug":"flet-v-0-23-release-announcement","title":"Flet v0.23.0 Release Announcement","author":"Henri Ndonko","author_title":"Flet Contributor and Maintainer","author_url":"https://github.com/ndonkoHenri","author_image_url":"https://avatars.githubusercontent.com/u/98978078?v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet v0.24.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-24-release-announcement"},"nextItem":{"title":"Flet at PyCon US 2024","permalink":"/docs/flet-doc/blog/flet-at-pycon-us-2024"}},"content":"We are excited to announce the release of Flet 0.23.0. It is a big release with many new features and bug fixes.\\n\\n## New Controls\\n\\n- [`AutoComplete`](/docs/controls/autocomplete)\\n- [`AutoFillGroup`](/docs/controls/autofillgroup)\\n- [`Flashlight`](/docs/controls/flashlight)\\n- [`Geolocator`](/docs/controls/geolocator)\\n- [`Map`](/docs/controls/map)\\n- [`PermissionHandler`](/docs/controls/permissionhandler)\\n\\n## New Properties\\n\\n- [`Option`](/docs/controls/dropdown#option-properties): `content`, `text_style`\\n- [`TextStyle`](/docs/reference/types/textstyle): `baseline`, `overflow`, `word_spacing`\\n\\n## Error Handling\\n\\n> PEP 20 (Zen of Python): Errors should never pass silently.\\n\\nSeveral devs reported that, on some occasions, a control might visually break without clear information on what caused\\nthe break.\\n\\nFor example, in issue [#3149](https://github.com/flet-dev/flet/issues/3149), @base-13 mentioned that _\\"in a DataTable if\\nthe number of columns is less than the number of datacells in any row it will grey out whole table without throwing\\nerror\\"_.\\n\\nKnowing this, we added more assertion-checks in most of the controls, such that, when you provide them with a wrong\\nvalue, an AssertionError is raised with a very clear message of what was wrongly done.\\n\\nIf you find out that some checks are still missing, please point them out so they can be addressed.\\n\\n## Command Line (CLI) Output\\n\\nThe output of the `flet build` command has been prettified.\\n\\nAlso, a new option has been added --show-platform-matrix which displays a table containing the build platform matrix,\\nwhich has header columns \\"Command\\" (possible build commands) and \\"Platform\\" (the device you should use with the\\nrespective command).\\n\\nFurthermore, when the targeted platform can\'t be built on your device, a table displaying the build platform matrix is\\nshown with an informative message.\\n\\n## Breaking Changes\\n\\nWhile doing \\"Error Handling\\" mentioned above, we had to mark some important properties as required.\\n\\nThe following properties are now \\"required\\" (must be provided and visible) when creating an instance of their classes:\\n\\n* [`AnimatedSwitcher.content`](/docs/controls/animatedswitcher#content)\\n* [`Banner.content`](/docs/controls/banner#content), [`Banner.actions`](/docs/controls/banner#actions)\\n* [`BottomSheet.content`](/docs/controls/bottomsheet#content)\\n* [`CupertinoActionSheetAction.content`](/docs/controls/cupertinoactionsheetaction#content)\\n* [`DataRow.cells`](/docs/controls/datatable)\\n* [`DataTable.columns`](/docs/controls/datatable)\\n* [`DragTarget.content`](/docs/controls/dragtarget#content)\\n* [`Draggable.content`](/docs/controls/draggable#content)\\n* [`ExpansionTile.title`](/docs/controls/expansiontile#title)\\n* [`MenuBar.controls`](/docs/controls/menubar#controls)\\n* [`Pagelet.content`](/docs/controls/pagelet#content)\\n* [`RadioGroup.content`](/docs/controls/radio#content)\\n* [`SafeArea.content`](/docs/controls/safearea#content)\\n* [`ShaderMask.shader`](/docs/controls/shadermask#shader)\\n* [`WindowDragArea.content`](/docs/controls/windowdragarea#content)\\n\\n## Bug Fixes\\n\\nThe below issues were successfully fixed:\\n\\n* [#3144](https://github.com/flet-dev/flet/issues/3144): `ScrollbarTheme.thickness` value not respected when not\\n  interacting with\\n* [#3072](https://github.com/flet-dev/flet/issues/3072): High-resolution videos play laggy on Android TV devices.\\n* [#3023](https://github.com/flet-dev/flet/issues/3023): (Regression) Some `LineChart` colors not visually respected\\n* [#2989](https://github.com/flet-dev/flet/issues/2989): Color of [`Dropdown`](/docs/controls/dropdown) when disabled\\n  doesn\'t reflect its disabled state\\n* [#1753](https://github.com/flet-dev/flet/issues/1753): [`Markdown`](/docs/controls/markdown) code block not selectable\\n* [#3097](https://github.com/flet-dev/flet/issues/3097): Hot-reload occurs when a file is opened\\n* [#1647](https://github.com/flet-dev/flet/issues/1647): [`Container.theme_mode`](/docs/controls/container#theme_mode)\\n  not honoured when `Container.theme=None`\\n* [#3064](https://github.com/flet-dev/flet/issues/3064): [`Container.on_tap_down`](/docs/controls/container#on_tap_down)\\n  not called when `Container.on_click=None`\\n\\nSpecial Thanks to the dynamic Flet community for reporting all the issues they encountered. We keep working hard on\\nsolving the remaining ones.\\n\\n## Deprecations\\n\\n* All the `Page.window_***` properties are now deprecated and moved to [`Page.window`](/docs/controls/page#window)\\n  property, which is of type [`Window`](/docs/reference/types/window).\\n  To migrate, simply use change `window_` to `window.` as seen below:\\n  ```python\\n  # before \\n  page.window_height = 200\\n  page.on_window_event = lambda e: print(e.type)\\n  \\n  # now\\n  page.window.height = 200\\n  page.window.on_event = lambda e: print(e.type)\\n  ```\\n\\n* `SafeArea.minimum` is deprecated and has been renamed\\n  to [`minimum_padding`](/docs/controls/safearea#minimum_padding)\\n* `MaterialState` enum is deprecated and has been renamed to [`ControlState`](/docs/reference/types/controlstate)\\n* `NavigationDestination` is deprecated and has been renamed\\n  to [`NavigationBarDestination`](/docs/controls/navigationbar#navigationbardestination-properties)\\n\\nAlso, the deprecation policy has been modified. While Flet is pre-1.0, all deprecations will be removed from the API after the next 3 releases.\\nSo the above deprecations made in v0.23.0 (and all the other deprecations made in the previous versions), will be removed in v0.26.0.\\n\\nThat\'s it! :)\\n\\nUpgrade to Flet 0.23.0, test your apps and let us know how you find the new features we added.\\nIf you have any questions, please join [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nHappy Flet-ing!"},{"id":"flet-at-pycon-us-2024","metadata":{"permalink":"/docs/flet-doc/blog/flet-at-pycon-us-2024","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-05-24-flet-at-pycon-us-2024.md","source":"@site/blog/2024-05-24-flet-at-pycon-us-2024.md","title":"Flet at PyCon US 2024","description":"Last week we attended PyCon US in a beautiful city of Pittsburgh, PA!","date":"2024-05-24T00:00:00.000Z","tags":[],"readingTime":1.005,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-at-pycon-us-2024","title":"Flet at PyCon US 2024","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"},"unlisted":false,"prevItem":{"title":"Flet v0.23.0 Release Announcement","permalink":"/docs/flet-doc/blog/flet-v-0-23-release-announcement"},"nextItem":{"title":"Flet packaging update","permalink":"/docs/flet-doc/blog/flet-packaging-update"}},"content":"Last week we attended PyCon US in a beautiful city of Pittsburgh, PA!\\n\\nI\'ve been on many conferences, but at PyCon I was amazed by the spacious venue, flawless event organization, high-quality content and welcoming community \ud83d\ude0e, ...and good food \ud83c\udf54!\\n\\n<img src=\\"/docs/flet-doc/img/blog/pycon-us-2024/pycon-us-2024-collage.jpg\\" className=\\"screenshot-60 screenshot-rounded\\" />\\n\\nWe met a lot of great people and, especially, wonderful people from Beeware (hello Russell, Malcolm and Russell \ud83d\udc4b). They did a great job of popularizing Python on mobile and advocating the addition of iOS and Android to the list of supported platforms in the next release of Python 3.13 \ud83c\udf89!\\n\\nWe enjoyed good talks and inspirational key notes, learned new things, enjoyed the city. Lightning talks (short 5-minute presentations) were real fun!\\n\\nOh, I saw Guido van Rossum (The Creator of Python himself, in case you didn\'t know \ud83d\ude05) at Microsoft booth, but didn\'t have a chance to take a picture with him as there was a line up \ud83d\ude09.\\n\\nAs first time attendees we did\'t do talks or presentations, but watched and learned instead.\\nWe plan to present next year \ud83e\udd1e.\\n\\nNext PyCon US is going to be at the same place. Will come again and hope to see more of you there!"},{"id":"flet-packaging-update","metadata":{"permalink":"/docs/flet-doc/blog/flet-packaging-update","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-05-01-flet-packaging-update.md","source":"@site/blog/2024-05-01-flet-packaging-update.md","title":"Flet packaging update","description":"The problem","date":"2024-05-01T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":6.54,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-packaging-update","title":"Flet packaging update","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet at PyCon US 2024","permalink":"/docs/flet-doc/blog/flet-at-pycon-us-2024"},"nextItem":{"title":"Controls and theming enhancements","permalink":"/docs/flet-doc/blog/controls-and-theming-enhancements"}},"content":"## The problem\\n\\nWhen you package your Flet program in Python to run on a mobile device (or desktop) the resulting\\nbundle (.apk, .ipa, .exe, .app) contains your Python program, Python interpreter and [Python Standard Library](https://docs.python.org/3/library/index.html).\\n\\nIf your program uses only Python standard library then packaging process is relatively easy - Flet zips your code and combines Flutter app together with Python interpreter and standard library both compiled for the target platform: Android or iOS.\\n\\nHowever, problems may arise when your Flet program uses third-party packages, with thousands of them published on PyPI or Conda.\\n\\nThere are two kinds of third-party packages:\\n\\n### Pure-Python packages\\n\\nA \\"pure-Python\\" package is a package that only contains Python code, and doesn\'t include extensions written in C, C++, Rust or other languages. You only need a Python interpreter and the Python Standard Library to run a pure-Python package, and it doesn\'t matter what your OS or platform is.\\n\\nExamples of such packages: `httpx`, `click`, `rich`, `requests`.\\n\\nTo verify if the package is pure, find that package on [PyPI](https://pypi.org) and navigate to its \\"Download files\\" page. If under \\"Built distribution\\" section there is only one wheel ending with `-py3-none-any.whl` then *most probably* it\'s a pure Python package that will work \\"as is\\" on any device with Python.\\n\\n<img src=\\"/docs/flet-doc/img/blog/packaging/pypi-pure-package.png\\" className=\\"screenshot-80 screenshot-rounded\\" />\\n\\nWe say *\\"probably\\"* because that pure package could depend on a non-pure package which brings you to the next section. For example, [`pydantic`](https://pypi.org/project/pydantic/#files) is a pure package, but to work properly it requires [`pydantic-core`](https://pypi.org/project/pydantic-core/#files) non-pure package written in Rust.\\n\\n### Non-pure Python packages\\n\\nA \\"non-pure Python\\" package is one that is fully or partially written in C, C++, Rust, or another language and must be compiled to machine code for the platform on which it will run.\\n\\nExamples of such packages: `cryptography`, `opencv-python`, `numpy`, `msgpack`.\\n\\nOn \\"Download files\\" page of non-pure package you will find a bunch of wheels pre-built for various platforms: macOS, Windows, Linux.\\n\\n<img src=\\"/docs/flet-doc/img/blog/packaging/pypi-non-pure-package.png\\" className=\\"screenshot-80 screenshot-rounded\\" />\\n\\nWhen you run `pip install <package>` pip tries to find a wheel for your specific platform and Python version looking at\\nwheel suffixes that include that information.\\n\\nIt\'s a courtesy of package developer to provide pre-compiled wheels for multiple platforms. There could be missing wheels for some platforms, or no wheels at all - just `.tar.gz` under \\"Source distribution\\" with package sources.\\n\\n#### Building package from sources is hard\\n\\nTo install a package with source distribution only, pip will attempt to build non-Python code on your machine using installed compilers, linkers, libraries, and SDKs. However, this process can be lengthy and error-prone. The compiled code base might be large, and your machine could lack the required libraries or toolchains.\\n\\n#### No wheels for iOS and Android yet\\n\\nThere are no pre-built wheels for iOS and Android on PyPI and PyPI\'s validation process won\'t allow package developers to upload them anyway as both iOS and Android are not officially supported platforms in Python.\\n\\nThere is a process ([PEP 730](https://peps.python.org/pep-0730/) and [PEP 738](https://peps.python.org/pep-0738/)) to add official support for iOS and Android to Python 3.13, so, hopefully, the developer experience will improve.\\n\\n#### Package dependencies\\n\\nPure-Python packages can import or depend on non-pure packages and you should keep that in mind while packaging your Flet app to run on a mobile device.\\n\\nFor example, `supabase` package, to access Supabase API, is a pure package which depends on `pydantic` package which is also pure Python package. In its turn `pydantic` package depends on `pydantic-core` which is a non-pure package written in Rust. Thus, to run your Flet app using Supabase API the packaging process should be able to find a pre-build wheel for your target platform. If PyPI doesn\'t have that wheel then it could be either Flet developers, building that wheel on their servers and hosting it somewhere, or you, building that wheel on your own machine.\\n\\nTo see a dependency graph for a package you can use [`pipgrip`](https://pypi.org/project/pipgrip/).\\n\\nRun it with `--tree` option to get a tree view of dependencies:\\n\\n```\\n$ pipgrip --tree fastapi\\n\\nfastapi (0.110.3)\\n\u251c\u2500\u2500 pydantic!=1.8,!=1.8.1,!=2.0.0,!=2.0.1,!=2.1.0,<3.0.0,>=1.7.4 (2.7.1)\\n\u2502   \u251c\u2500\u2500 annotated-types>=0.4.0 (0.6.0)\\n\u2502   \u251c\u2500\u2500 pydantic-core==2.18.2 (2.18.2)\\n\u2502   \u2502   \u2514\u2500\u2500 typing-extensions!=4.7.0,>=4.6.0 (4.11.0)\\n\u2502   \u2514\u2500\u2500 typing-extensions>=4.6.1 (4.11.0)\\n\u251c\u2500\u2500 starlette<0.38.0,>=0.37.2 (0.37.2)\\n\u2502   \u2514\u2500\u2500 anyio<5,>=3.4.0 (4.3.0)\\n\u2502       \u251c\u2500\u2500 idna>=2.8 (3.7)\\n\u2502       \u2514\u2500\u2500 sniffio>=1.1 (1.3.1)\\n\u2514\u2500\u2500 typing-extensions>=4.8.0 (4.11.0)\\n```\\n\\n## Current approach\\n\\nWe released the first version of packaging [4 months ago](/blog/packaging-apps-for-distribution) and since then, we have realized that the initial approach has multiple flaws and should be improved.\\n\\nWhen you run `flet build apk` with the current Flet version it downloads Python runtime with standard library both pre-built for Android (or iOS if ran with `flet build ipa`).\\n\\nFor non-pure packages, like `numpy`, Flet is asking you to build those packages by yourself using \\"Python for Android\\" (p4a) tool from Kivy and then provide a path to \\"p4a\\" distributive where those pre-build packages could be found.\\n\\nThis is problem #1 - you are forced to struggle with a complicated process of installing \\"p4a\\" tool and compiling Python modules on your machine.\\n\\nProblem #2 - all packages from p4a\'s `dist` directory will be included into a final application bundle - it could contain non-relevant packages and other junk.\\n\\nProblem #3 - non-pure packages must be built *before* running `flet build` command. You have to analyze all dependencies of your app and separate what must be built with p4a.\\n\\nProblem #4 - p4a \\"recipes\\" to build packages could be either very old or missing. You hope that older version of the package works with your app, try authoring a \\"recipe\\" and hope it works or submit a request for new recipe in Kivy repository.\\n\\nWhen you\'re done with building non-pure packages using p4a, Flet requires you to specify only pure packages in `requirements.txt` which doesn\'t work if pure package directly or indirectly depends on non-pure (see [example above](#package-dependencies)) - this is problem #5. There is a [recent example](https://github.com/flet-dev/flet/issues/3114) of this problem: `flet build` replaces `flet` with `flet-embed` in `requirements.txt`, but it\'s unable to know if there is a 3rd-party package depending on `flet`, thus both `flet-embed` and non-suitable-for-mobile `flet` are installed. This is not a solution, but a hack!\\n\\n## Packaging 2.0\\n\\nIn the next iteration of Flet\'s packaging implementation, we are going to move away from Kivy and replace it with [Mobile Forge](https://github.com/flet-dev/mobile-forge). Mobile Forge has been created by Beeware team based and their experience with Briefcase and Chaquopy. Mobile Forge is a clean-room implementation of a packaging tool for binary Python packages which is relies on [crossenv](https://github.com/benfogle/crossenv).\\n\\nThe main promise of Mobile Forge with `crossenv` is that most existing non-pure Python packages will be able to compile for iOS and/or Android by simply adding a recipe with `meta.yaml` file only, without requiring any hacks or patches.\\n\\nWe are going to use Mobile Forge to pre-build the most popular non-pure Python packages for iOS and Android and host them in our own public repository. You will be able to use that tool to build and contribute other packages, non present in our repository.\\n\\nWe\'ve created a new [\\"Packages\\" category in Flet discussions](https://github.com/flet-dev/flet/discussions/categories/packages) where you can post, vote and discuss requests for non-pure (native) Python packages that work with Flet (check [rules](https://github.com/flet-dev/flet/discussions/3139) before posting there). Flet\'s goal is to provide the most comprehensive catalog of pre-built Python packages and make the process of adding new packages as friendly and transparent as possible.\\n\\nThe new version of `flet build` will use a custom-made virtual pip index. This index will analyze dependencies, detect non-pure packages, and offer to pip mobile packages. For all other packages, it will fall back to PyPI.\\n\\nThe new packaging will be hopefully available in a few weeks. While we are working we encourage you to visit [Packages](https://github.com/flet-dev/flet/discussions/categories/packages) and see if the package you need is there. Submitting a request or voting for existing package will help us to prioritize package \\"recipes\\".\\n\\nThank you!"},{"id":"controls-and-theming-enhancements","metadata":{"permalink":"/docs/flet-doc/blog/controls-and-theming-enhancements","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-04-10-controls-and-theming-enhancements.md","source":"@site/blog/2024-04-10-controls-and-theming-enhancements.md","title":"Controls and theming enhancements","description":"One month after the release of Flet 0.21.0, we are excited to announce the release of Flet 0.22.0.","date":"2024-04-10T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":4.09,"hasTruncateMarker":false,"authors":[{"name":"Henri Ndonko","title":"Flet Contributor and Maintainer","url":"https://github.com/ndonkoHenri","imageURL":"https://avatars.githubusercontent.com/u/98978078?v=4"}],"frontMatter":{"slug":"controls-and-theming-enhancements","title":"Controls and theming enhancements","author":"Henri Ndonko","author_title":"Flet Contributor and Maintainer","author_url":"https://github.com/ndonkoHenri","author_image_url":"https://avatars.githubusercontent.com/u/98978078?v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet packaging update","permalink":"/docs/flet-doc/blog/flet-packaging-update"},"nextItem":{"title":"Flet FastAPI and async API improvements","permalink":"/docs/flet-doc/blog/flet-fastapi-and-async-api-improvements"}},"content":"One month after the release of Flet 0.21.0, we are excited to announce the release of Flet 0.22.0.\\n\\nThis release comes with a lot of enhancements, bug fixes, and deprecations:\\n\\n## Enhancements\\n\\nThis was one of the main concerns while coming up with this release. Two types of enhancements were made:\\n\\n### Controls Enhancement\\n\\nWe went through the long list of already-present controls and exposed, where possible, more\\nproperties - [PR #2882](https://github.com/flet-dev/flet/pull/2882). This will grant you more power/control over the\\nFlet Controls you use in your awesome applications.\\n\\nBelow is the complete list:\\n\\n- [`AppBar`](https://flet.dev/docs/controls/appbar): elevation_on_scroll, exclude_header_semantics,\\n  force_material_transparency, is_secondary, shadow_color, surface_tint_color, clip_behavior, title_spacing,\\n  toolbar_opacity, title_text_style, toolbar_text_style, shape\\n- [`AlertDialog`](https://flet.dev/docs/controls/alertdialog): action_button_padding, clip_behavior, icon_padding,\\n  shadow_color, surface_tint_color\\n- [`Banner`](https://flet.dev/docs/controls/banner): content_text_style, margin, elevation, divider_color, shadow_color,\\n  surface_tint_color, on_visible\\n- [`CupertinoListTile`](https://flet.dev/docs/controls/cupertinolisttile): leading_size, leading_to_title\\n- [`CupertinoSegmentedButton`](https://flet.dev/docs/controls/cupertinosegmentedbutton): click_color\\n- [`CupertinoSwitch`](https://flet.dev/docs/controls/cupertinoswitch):on_label_color, off_label_color\\n- [`CupertinoTimerPicker`](https://flet.dev/docs/controls/cupertinotimerpicker): item_extent\\n- [`Chip`](https://flet.dev/docs/controls/chip): surface_tint_color, color, click_elevation, clip_behavior,\\n  visual_density, border_side\\n- [`Divider`](https://flet.dev/docs/controls/divider): leading_indent, trailing_indent\\n- [`ExpansionTile`](https://flet.dev/docs/controls/expansiontile): dense, enable_feedback, visual_density\\n- [`Card`](https://flet.dev/docs/controls/card): clip_behavior, is_semantic_container, show_border_on_foreground,\\n  variant\\n- [`Checkbox`](https://flet.dev/docs/controls/checkbox): border_side, semantics_label, shape, splash_radius, is_error,\\n  visual_density, mouse_cursor\\n- [`CircleAvatar`](https://flet.dev/docs/controls/circleavatar): on_image_error\\n- [`DataTable`](https://flet.dev/docs/controls/datatable): clip_behavior\\n- [`DatePicker`](https://flet.dev/docs/controls/datepicker): on_entry_mode_change\\n- [`Draggable`](https://flet.dev/docs/controls/draggable): on_drag_complete, on_drag_start\\n- [`DragTarget`](https://flet.dev/docs/controls/dragtarget): on_move\\n- [`Dropdown`](https://flet.dev/docs/controls/dropdown): fill_color, hint_content, icon_content, elevation, item_height,\\n  max_menu_height, icon_size, enable_feedback, padding, icon_enabled_color, icon_disabled_color, on_click\\n- [`ElevatedButton`](https://flet.dev/docs/controls/elevatedbutton): clip_behavior\\n- [`FloatingActionButton`](https://flet.dev/docs/controls/floatingactionbutton): clip_behavior, enable_feedback,\\n  focus_color, foreground_color, disabled_elevation, elevation, focus_elevation, highlight_elevation, hover_elevation,\\n  mouse_cursor\\n- [`GridView`](https://flet.dev/docs/controls/gridview): cache_extent, clip_behavior, semantic_child_count\\n- [`IconButton`](https://flet.dev/docs/controls/iconbutton): alignment, disabled_color, focus_color, enable_feedback,\\n  hover_color, padding, splash_color, splash_radius, focus_color, mouse_cursor, visual_density\\n- [`Image`](https://flet.dev/docs/controls/image): exclude_from_semantics, filter_quality\\n- [`ListTile`](https://flet.dev/docs/controls/listtile): enable_feedback, horizontal_spacing, min_leading_width,\\n  min_vertical_padding, selected_color, selected_tile_color, style, title_alignment, icon_color, text_color, shape,\\n  visual_density, mouse_cursor, title_text_style, subtitle_text_style, leading_and_trailing_text_style\\n- [`ListView`](https://flet.dev/docs/controls/listview): cache_extent, clip_behavior, semantic_child_count\\n- [`NavigationBar`](https://flet.dev/docs/controls/navigationbar): animation_duration, overlay_color\\n- [`NavigationDrawerDestination`](https://flet.dev/docs/controls/navigationdrawer): bgcolor\\n- [`NavigationBarDestination`](https://flet.dev/docs/controls/navigationbardestination): bgcolor\\n- [`NavigationRail`](https://flet.dev/docs/controls/navigationrail): selected_label_text_style,\\n  unselected_label_text_style\\n- [`NavigationRailDestination`](https://flet.dev/docs/controls/navigationrail): indicator_color, indicator_shape\\n- [`Option`](https://flet.dev/docs/controls/dropdown#option-properties): alignment, on_click\\n- [`OutlinedButton`](https://flet.dev/docs/controls/outlinedbutton): clip_behavior\\n- [`Page`](https://flet.dev/docs/controls/page): locale_configuration\\n- [`PopupMenuItem`](https://flet.dev/docs/controls/popupmenubutton#popupmenuitem-properties): height, padding,\\n  mouse_cursor\\n- [`PopupMenuButton`](https://flet.dev/docs/controls/popupmenubutton): bgcolor, clip_behavior, elevation,\\n  enable_feedback, icon_color, shadow_color, surface_tint_color, icon_size, padding, splash_radius, shape, on_open,\\n  on_cancel\\n- [`ProgressBar`](https://flet.dev/docs/controls/progressbar): border_radius, semantics_label, semantics_value\\n- [`ProgressRing`](https://flet.dev/docs/controls/progressring): semantics_label, semantics_value, stroke_cap,\\n  stroke_align\\n- [`Radio`](https://flet.dev/docs/controls/radio): focus_color, hover_color, overlay_color, splash_radius, toggleable,\\n  visual_density, mouse_cursor\\n- [`SearchBar`](https://flet.dev/docs/controls/searchbar): keyboard_type, view_surface_tint_color, autofocus\\n- [`SelectionArea`](https://flet.dev/docs/controls/selectionarea): on_change\\n- [`Slider`](https://flet.dev/docs/controls/slider): interaction, overlay_color, mouse_cursor, secondary_track_value,\\n  secondary_active_color\\n- [`Stack`](https://flet.dev/docs/controls/stack): alignment, fit\\n- [`SnackBar`](https://flet.dev/docs/controls/snackbar): clip_behavior, shape, on_visible, action_overflow_threshold\\n- [`Switch`](https://flet.dev/docs/controls/switch): hover_color, splash_radius, overlay_color, track_outline_color,\\n  mouse_cursor\\n- [`Tabs`](https://flet.dev/docs/controls/tabs): divider_height, enable_feedback, indicator_thickness, is_secondary,\\n  mouse_cursor, clip_behavior\\n- [`TextField`](https://flet.dev/docs/controls/textfield): fill_color, hover_color\\n- [`TimePicker`](https://flet.dev/docs/controls/timepicker): orientation, on_entry_mode_change\\n- [`Tooltip`](https://flet.dev/docs/controls/tooltip): enable_tap_to_dismiss, exclude_from_semantics\\n- [`VerticalDivider`](https://flet.dev/docs/controls/verticaldivider): leading_indent, trailing_indent\\n\\nIf you however feel that something lacks and should be added, don\'t hesitate to let us know.\\n\\nCheck out the article I wrote\\nconcerning `Page.locale_configuration` [here](https://ndonkohenri.medium.com/app-localization-in-flet-5b523e83ca89).\\n\\n### Theme Enhancements\\n\\nThe Theme class which is used for application theming in light and dark mode has equally been further enhanced.\\nLots of new themes were introduced - [PR #2955](https://github.com/flet-dev/flet/pull/2955).\\n\\nSee the Theming Guide [here](https://flet.dev/docs/cookbook/theming/).\\n\\n## Rive Animations\\n\\n[Rive](https://rive.app/) is a very popular real-time interactive design and animation tool.\\nThe newly introduced [`Rive`](https://flet.dev/docs/controls/rive/) Control allows you to load and visualize any Rive\\nanimation in your applications.\\n\\nThe animation\'s source (`Rive.src`) can either be a local asset file or a URL - as usual, it all depends on your needs.\\n\\n## Parent Control\\n\\nAs requested in [#952](https://github.com/flet-dev/flet/issues/952), the ability to access the parent of any control has\\nbeen added: `Control.parent`.\\n\\nRead more on it [here](https://ndonkohenri.medium.com/access-any-controls-parent-flet-98e2c60dfab8).\\n\\n## Bug Fixes\\n\\nThe below issues were successfully fixed:\\n\\n- [#2560](https://github.com/flet-dev/flet/issues/2560) - `Dropdown.bgcolor` was not visually respected\\n- [#2740](https://github.com/flet-dev/flet/issues/2740) - `CircleAvatar` not working with local asset images\\n- [#2781](https://github.com/flet-dev/flet/issues/2781) - `\'FletSocketServer\'` Error raised on Linux\\n- [#2826](https://github.com/flet-dev/flet/issues/2826) - `PopupMenuItem.data` not respected\\n- [#2839](https://github.com/flet-dev/flet/issues/2839) - `ExpansionTile.initially_expanded` had no visual effect\\n- [#2867](https://github.com/flet-dev/flet/issues/2867) - `PopupMenuButton` had an always-visible tooltip of \\"Show menu\\"\\n- On some Python versions, you might have seen a RuntimeError(\'Event loop is closed\') which usually shows up when\\n  closing the app\'s window. The Python-dev\\n  team [fixed](https://github.com/python/cpython/issues/109538#issuecomment-1823306415) this asyncio-related issue\\n  recently, but this fix is only present in the versions released from the year 2024. So if you face this issue,\\n  please [download](https://www.python.org/downloads/) one of the latest Python releases and replace the one used in\\n  your environment.\\n\\nSpecial Thanks to the dynamic Flet community for reporting all the issues they encountered. We keep working hard on\\nsolving the remaining ones.\\n\\n## Deprecations\\n\\nAs previously mentioned in the [announcement](https://python.plainenglish.io/whats-new-in-flet-0-21-0-ca482ab4520b)\\nconcerning Flet v0.21.0, all deprecations will be completely removed from the API in version 1.0 - so you have enough\\ntime to update your apps.\\n\\nYou must not completely memorize what has been deprecated as we\'ve added DeprecationWarnings which will be shown\\ndirectly in your console (without breaking your app).\\n\\n- [`PopupMenuButton.on_cancelled`](https://flet.dev/docs/controls/popupmenubutton/#on_cancelled) has been renamed\\n  to [`on_cancel`](https://flet.dev/docs/controls/popupmenubutton/#on_cancel)\\n- [`foreground_image_url`](https://flet.dev/docs/controls/circleavatar/#foreground_image_url)\\n  and [`background_image_url`](https://flet.dev/docs/controls/circleavatar/#background_image_url) properties\\n  of [`CircleAvatar`](https://flet.dev/docs/controls/circleavatar/) were renamed\\n  to [`foreground_image_src`](https://flet.dev/docs/controls/circleavatar/#foreground_image_src)\\n  and [`background_image_src`](https://flet.dev/docs/controls/circleavatar/#background_image_src) respectively\\n- `DragTargetAcceptEvent` used in the [`DragTarget.on_accept`](https://flet.dev/docs/controls/dragtarget/#on_accept) has\\n  been renamed to `DragTargetEvent`\\n\\n## Documentation\\n\\nThe Flet documentation has been reorganized to ease navigation (especially for beginners/new users).\\n\\nUpgrade to Flet 0.22.0, test your apps and let us know how you find the new features we added.\\nIf you have any questions, please join [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nHappy Flet-ing!"},{"id":"flet-fastapi-and-async-api-improvements","metadata":{"permalink":"/docs/flet-doc/blog/flet-fastapi-and-async-api-improvements","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-03-06-flet-fastapi-and-async-api-improvements.md","source":"@site/blog/2024-03-06-flet-fastapi-and-async-api-improvements.md","title":"Flet FastAPI and async API improvements","description":"Flet makes writing dynamic, real-time web apps a real fun!","date":"2024-03-06T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":5.735,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-fastapi-and-async-api-improvements","title":"Flet FastAPI and async API improvements","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Controls and theming enhancements","permalink":"/docs/flet-doc/blog/controls-and-theming-enhancements"},"nextItem":{"title":"Flet adaptive UI and custom controls release","permalink":"/docs/flet-doc/blog/flet-adaptive-and-custom-controls"}},"content":"Flet makes writing dynamic, real-time web apps a real fun!\\n\\nFlet 0.21.0 further improves web apps development experience as well as using asyncio APIs in your Flet apps.\\n\\nHere\'s what\'s new in Flet 0.21.0:\\n\\n## FastAPI with Uvicorn replaces built-in web server\\n\\nFrom very beginning of Flet life to serve web apps there was a built-in web server written in Go\\nand called \\"Fletd\\". It\'s being started on the background when you run your app with `flet run --web`.\\nFletd was part of Flet Python wheel contributing a few megabytes to its size.\\nAdditionally, Python app was using WebSockets to talk to Fletd web server which was adding sometimes noticeable overhead.\\n\\nThen, in [Flet 0.10.0](/blog/flet-for-fastapi) we have added FastAPI support to build \\"serious\\" web apps using AsyncIO API.\\n\\nNow, in Flet 0.21.0 built-in web server has been completely removed and replaced with FastAPI and Uvicorn. Fletd is not\\na part of Flet distribution anymore.\\n\\nUsing FastAPI means there is no more communication overhead as web server is a part of Flet app.\\nAlso, you don\'t need to do any additional steps to host your app in production with FastAPI -\\nyou just use the same `ft.app(main)` command to run your app.\\n\\n:::warning Breaking change\\n\\n`flet_fastapi` package has been deprecated and its contents moved to `flet` package as `flet.fastapi`\\nmodule. If you were using FastAPI in your Flet app replace:\\n\\n```python\\nimport flet_fastapi\\n```\\n\\nwith\\n\\n```python\\nimport flet.fastapi as flet_fastapi\\n```\\n:::\\n\\n**Use any ASGI web server for hosting**\\n\\nYou can host your Flet web app with any ASGI-compatible server such as [Uvicorn](https://www.uvicorn.org/) (used by default), [Hypercorn](https://pgjones.gitlab.io/hypercorn/) or [Daphne](https://github.com/django/daphne).\\n\\nJust tell Flet to export ASGI app:\\n\\n```python title=\\"main.py\\"\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(\\"Hello ASGI!\\"))\\n\\napp = ft.app(main, export_asgi_app=True)\\n```\\n\\nand then run with Hypercorn as:\\n\\n```\\nhypercorn main:app --bind 0.0.0.0:8000\\n```\\n\\n**Web app environment variables**\\n\\nEvery aspect of web app hosting can be controlled with environment variables:\\n\\n* `FLET_FORCE_WEB_SERVER` - `true` to force running app as a web app. Automatically set on headless Linux hosts.\\n* `FLET_SERVER_PORT` - TCP port to run app on. `8000` if the program is running on a Linux server or `FLET_FORCE_WEB_SERVER` is set; otherwise random port.\\n* `FLET_SERVER_IP` - IP address to listen web app on, e.g. `127.0.0.1`. Default is `0.0.0.0` - bound to all server IPs.\\n* `FLET_ASSETS_DIR` - absolute path to app \\"assets\\" directory.\\n* `FLET_UPLOAD_DIR` - absolute path to app \\"upload\\" directory.\\n* `FLET_MAX_UPLOAD_SIZE` - max allowed size of uploaded file, in bytes. Unlimited if not specified.\\n* `FLET_SECRET_KEY` - a secret key to sign temporary upload URLs.\\n* `FLET_WEB_APP_PATH` - a URL path after domain name to host web app under, e.g. `/apps/myapp`. Default is `/` - host app in the root.\\n* `FLET_SESSION_TIMEOUT` - session lifetime, in seconds. Default is `3600`.\\n* `FLET_OAUTH_STATE_TIMEOUT` - max allowed time to complete OAuth web flow, in seconds. Default is `600`.\\n* `FLET_WEB_RENDERER` - Flutter rendering mode: `canvaskit` (default), `html` or `auto`.\\n* `FLET_WEB_USE_COLOR_EMOJI` - `true`, or `True` or `1` to load web font with colorful emojis.\\n* `FLET_WEB_ROUTE_URL_STRATEGY` - `path` (default) or `hash`.\\n* `FLET_WEBSOCKET_HANDLER_ENDPOINT` - custom path for WebSocket handler. Default is `/ws`.\\n* `FLET_UPLOAD_HANDLER_ENDPOINT` - custom path for upload handler. Default is `/upload`.\\n* `FLET_OAUTH_CALLBACK_HANDLER_ENDPOINT` - custom path for OAuth handler. Default is `/oauth_callback`.\\n\\n## Async-first framework\\n\\nFlet is now async-first framework which means you don\'t have to decide whether your app is entirely sync or async, but you can mix both sync and async methods in the same app.\\n\\nFor example, in Flet 0.21.0 you can write an app like this:\\n\\n```python\\nimport flet as ft\\nimport time\\nimport asyncio\\n\\ndef main(page: ft.Page):\\n\\n    def handler(e):\\n      time.sleep(3)\\n      page.add(ft.Text(\\"Handler clicked\\"))\\n\\n    async def handler_async(e):\\n      await asyncio.sleep(3)\\n      page.add(ft.Text(\\"Async handler clicked\\"))\\n\\n    page.add(\\n        ft.ElevatedButton(\\"Call handler\\", on_click=handler),\\n        ft.ElevatedButton(\\"Call async handler\\", on_click=handler_async)\\n    )\\n\\nft.app(main)\\n```\\n\\nIn the example above a click on one button is handled by a \\"blocking\\" handler while a click\\non second button calls asynchronous handler. The first handler is run in a `threading.Thread` while second handler is run in `asyncio.Task`.\\n\\nAlso, notice in `async def` handler you are not required to use `await page.add_async()` anymore, but a regular `page.add()` works just fine.\\n\\n:::info API changes\\nMost of `Page.<method>_async()` and `Control.<method>_async()` methods have been deprecated and their `Page.<method>()` and `Control.<method>()` counterparts should be used instead.\\n\\nThe only exception here is methods returning results, like those ones in `Audio` control: you still have to use async methods in async event handlers.\\n::: \\n\\n## Custom controls API normalized\\n\\nIn this Flet release we also re-visited API for writing custom controls in Python.\\n\\nAs a result `UserControl` class has been deprecated. You just inherit from a specific control with layout that works for your needs.\\n\\nFor example, `Countdown` custom control is just a `Text` and could be implemented as following:\\n\\n```python\\nimport asyncio\\n\\nimport flet as ft\\n\\nclass Countdown(ft.Text):\\n    def __init__(self, seconds):\\n        super().__init__()\\n        self.seconds = seconds\\n\\n    def did_mount(self):\\n        self.running = True\\n        self.page.run_task(self.update_timer)\\n\\n    def will_unmount(self):\\n        self.running = False\\n\\n    async def update_timer(self):\\n        while self.seconds and self.running:\\n            mins, secs = divmod(self.seconds, 60)\\n            self.value = \\"{:02d}:{:02d}\\".format(mins, secs)\\n            self.update()\\n            await asyncio.sleep(1)\\n            self.seconds -= 1\\n\\ndef main(page: ft.Page):\\n    page.add(Countdown(120), Countdown(60))\\n\\nft.app(main)\\n```\\n\\nNotice the usage of `self.page.run_task(self.update_timer)` to start a new task.\\nThere is also `self.page.run_thread()` method that must be used by control developer to start a new background job in a thread.\\n\\nIf you want to spawn your own tasks or threads Flet provides the current event loop and thread executor via `Page.loop` and `Page.executor` properties respectively. \\n\\n:::info API changes\\n`Control._before_build_command()` replaced with `Control.before_update()`\\n\\n`Control.build()` should not return any control now, but must update inherited control properties, for example:\\n\\n```python\\ndef build():\\n    self.controls.append(ft.Text(\\"Something\\"))\\n```\\n\\n`Control.did_mount_async()` and `Control.will_unmount_async()` are deprecated. Use `Control.did_mount()` and `Control.will_unmount()` instead.\\n:::\\n\\n## New Cupertino controls\\n\\nThis Flet release adds more Cupertino controls to make your apps shine on iOS:\\n\\n* `CupertinoActivityIndicator`\\n* `CupertinoActionSheet`\\n* `CupertinoSlidingSegmentedButton`\\n* `CupertinoSegmentedButton`\\n* `CupertinoTimerPicker`\\n* `CupertinoPicker`\\n* `CupertinoDatePicker`\\n* `CupertinoContextMenu`\\n\\n## Accessibility improvements\\n\\nNow Flet has complete implementation of `Semantics` control and new `SemanticsService` control.\\n\\n## App lifecycle change event\\n\\nThere is a new `Page.on_app_lifecycle_state_change` event that allows listening for changes in the application lifecycle.\\n\\nFor example, you can now update UI with the latest information when the app becomes active (brought to the front). This event works on iOS, Android, all desktop platforms and web!\\n\\nThe following app lifecycle transitions are recognized:\\n\\n* `SHOW`\\n* `RESUME`\\n* `HIDE`\\n* `INACTIVE`\\n* `PAUSE`\\n* `DETACH`\\n* `RESTART`\\n\\n:::note\\nRead more about each [lifecycle state](/docs/controls/page#on_app_lifecycle_state_change).\\n:::\\n\\nHere\'s a small example of how this event can be used: \\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    def app_lifecycle_change(e: ft.AppLifecycleStateChangeEvent):\\n        if e.state == ft.AppLifecycleState.RESUME:\\n          print(\\"Update UI with fresh data!\\")\\n\\n    page.on_app_lifecycle_state_change = app_lifecycle_change\\n    page.add(ft.Text(\\"Hello World\\"))\\n\\nft.app(target=main)\\n```\\n\\nFlet 0.21.0 release has some breaking changes. Upgrade to it, test your apps and let us know how it worked for you.\\nJoin [Flet Discord server](https://discord.gg/dzWXP8SHG8) or create a new thread\\non [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nEnjoy!"},{"id":"flet-adaptive-and-custom-controls","metadata":{"permalink":"/docs/flet-doc/blog/flet-adaptive-and-custom-controls","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2024-02-14-flet-adaptive-and-custom-controls.md","source":"@site/blog/2024-02-14-flet-adaptive-and-custom-controls.md","title":"Flet adaptive UI and custom controls release","description":"\ud83e\udd70 Happy Valentine\'s Day lovely people! \ud83e\udd70","date":"2024-02-14T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":2.67,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-adaptive-and-custom-controls","title":"Flet adaptive UI and custom controls release","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet FastAPI and async API improvements","permalink":"/docs/flet-doc/blog/flet-fastapi-and-async-api-improvements"},"nextItem":{"title":"Packaging apps for distribution","permalink":"/docs/flet-doc/blog/packaging-apps-for-distribution"}},"content":"\ud83e\udd70 Happy Valentine\'s Day lovely people! \ud83e\udd70\\n\\nWe just released Flet 0.20.0 with the focus on:\\n\\n1) Adaptive UI.\\n2) Extending Flet apps with 3rd-party Flutter packages.\\n3) New controls: [`Video`](/docs/controls/video) (yay!), [`AudioRecorder`](/docs/controls/audiorecorder) and a bunch of `Cupertino`-like controls. Flet now includes 97 built-in controls!\\n\\n:::warning\\nFlet 0.20.0 includes a new [`Video`](/docs/controls/video) control. While macOS and Windows already include all required media libraries to test Flet apps on Linux, the [libmpv](https://mpv.io/) package must be installed. On Ubuntu/Debian in can be installed with:\\n\\n```\\nsudo apt install libmpv-dev mpv\\n```\\n:::\\n\\n## Adaptive UI\\n\\nAdaptive controls allow writing apps with a single code base which look and behave differently depending on the platform they are running on.\\n\\nTo the date Flet provides 11 adaptive controls. To make control adaptive you should set its `adaptive` property to `True`.\\n\\nIn Flet 0.20.0 we introduce `adaptive` property to all container-alike controls.\\nSetting `adaptive=True` on a container propagates this property to all child adaptive controls.\\n\\nPage adds `design` property which enables granular control over controls design language and can have the following values: `ft.PageDesign.ADAPTIVE`, `ft.PageDesign.MATERIAL` or `ft.PageDesign.CUPERTINO`.\\n\\nBy setting just `page.design = ft.PageDesign.ADAPTIVE` you can make you app looking awesome on both iOS and Android devices:\\n\\n<div className=\\"row\\">\\n  <div className=\\"col col--6\\" style={{textAlign: \'center\'}}>\\n    <h3>iPhone</h3>\\n    <img src=\\"/docs/flet-doc/img/blog/adaptive/iphone-adaptive-app.png\\" className=\\"screenshot-60\\" />\\n  </div>\\n  <div className=\\"col col--6\\" style={{textAlign: \'center\'}}>\\n    <h3>Android</h3>\\n    <img src=\\"/docs/flet-doc/img/blog/adaptive/android-adaptive-app.png\\" className=\\"screenshot-60\\" style={{ width: \'57%\'}} />\\n  </div>  \\n</div>\\n\\n## Integrating existing Flutter packages\\n\\nToday Flet offers almost 100 controls, but, as you can imagine, not every Flutter library/widget could be added to the core Flet library and Flet team couldn\'t do that alone in the acceptable timeframe.\\n\\nAt the same time we do not want to put early adopters, who chose Flet to build their next commercial or corporate app, into a situation where their progress depends on Flet team availability and desire to implement a Flutter control they need.\\n\\nIn Flet 0.20.0 we re-factored Flutter core packages and identified the API that can be used by 3rd-party developers to add their own Flet controls written in Dart.\\n\\nWe are currently working on API docs, but you can learn now how custom Flutter packages are implemented by looking at Dart sources for [`Video`](https://github.com/flet-dev/flet/tree/main/packages/flet_video), and [`Audio`](https://github.com/flet-dev/flet/tree/main/packages/flet_audio) controls.\\n\\nIn short, you have to create a new Flutter package which implements and exports two methods:\\n\\n```dart\\nvoid ensureInitialized();\\nWidget createControl(CreateControlArgs args);\\n```\\n\\nSee [`ensureInitialized()`](https://github.com/flet-dev/flet/blob/main/packages/flet_video/lib/src/create_control.dart#L16-L18) and [`createControl()`](https://github.com/flet-dev/flet/blob/main/packages/flet_video/lib/src/create_control.dart#L6-L14) implementations for `Video` control.\\n\\nOn Python side you create a new class inherited from `Control` (non-visual or overlay controls) or `ConstrainedControl`.\\n\\nSee [`Video`](https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-core/src/flet_core/video.py#L44) class implementation in Python.\\n\\nTo integrate a custom Flutter package while building your Flet app with `flet build` command you can list extra packages with either `--include-packages` option or in `pubspec.yaml` file put into root of your Flet app.\\n\\n## `Video` control\\n\\n`Video` control is implemented in a separate Flutter package.\\n\\nTo build your Flet app with `Video` control add `--include-packages flet_video` to your `flet build` command, for example:\\n\\n```\\nflet build apk --include-packages flet_video\\n```\\n\\nFlet 0.20.0 is a relatively [\\"large\\" release](https://github.com/flet-dev/flet/blob/main/CHANGELOG.md#0200) and could break some things.\\n\\nUpgrade to Flet 0.20.0, test your apps and let us know what you think by joining [Flet Discord server](https://discord.gg/dzWXP8SHG8) or creating a new thread on [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nEnjoy!"},{"id":"packaging-apps-for-distribution","metadata":{"permalink":"/docs/flet-doc/blog/packaging-apps-for-distribution","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-12-30-packaging-apps-for-distribution.md","source":"@site/blog/2023-12-30-packaging-apps-for-distribution.md","title":"Packaging apps for distribution","description":"Dear friends! In the final post of this year I would like to thank you all for your contributions","date":"2023-12-30T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":2.02,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"packaging-apps-for-distribution","title":"Packaging apps for distribution","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet adaptive UI and custom controls release","permalink":"/docs/flet-doc/blog/flet-adaptive-and-custom-controls"},"nextItem":{"title":"Flet for FastAPI","permalink":"/docs/flet-doc/blog/flet-for-fastapi"}},"content":"Dear friends! In the final post of this year I would like to thank you all for your contributions\\nto Flet project whether it\'s spreading a word, submitting pull request, joining Discord discussion or a even sending an annoying bug report!\\n\\nWith your fantastic support we achieved a lot in year 2023:\\n\\n* 70+ controls (special thanks to [@ndonkoHenri](https://github.com/ndonkoHenri) for his tremendous contribution).\\n* 7,700 stars on GitHub.\\n* 2,150 users with community moderators (thank you guys!) on Discord.\\n* Flet integration with Pyodide for pure client-side Python apps - no other frameworks provide a better UI for Pyodide!\\n* Flet app in AppStore and Google Play - great way to test on mobile devices and real proof of Flet apps being accepted in stores.\\n* ...and finally... drum roll...\ud83e\udd41\ud83e\udd41\ud83e\udd41 `flet build` command is here! \ud83c\udf89\ud83c\udf89\ud83c\udf89\\n\\n\ud83c\udf84 \\"New Year\\" \ud83c\udf84 edition of Flet 0.18.0 has been just released which allows packaging\\nyour Flet apps for distribution on all platforms: iOS, Android, Web, macOS, Windows and Linux!\\n\\n**The one command to rule them all!**\\n\\nThe full circle is now closed: you can create (`flet create`), run (`flet run`) and build (`flet build`) your Flet apps with Flet CLI.\\n\\nFlet CLI provides `flet build` command that allows packaging Flet app into a standalone executable or install package for distribution.\\n\\n`flet build` command supersedes both [`flet pack`](/docs/cookbook/packaging-desktop-app) (packaging into desktop app) and [`flet publish`](/docs/publish/web/static-website) (packaging into a static website) commands and allows converting your Flet app into Android or iOS bundle, desktop app and a static website.\\n\\nFor building desktop apps `flet build` does not longer rely on PyInstaller like `flet pack` does, but uses Flutter SDK to produce a fast, offline, fully customizable (your own icons, about dialog and metadata) executable for Windows, Linux and macOS with Python runtime embedded into executable and running in-process.\\n\\nStatic websites built with `flet build`, compared to `flet publish`, have faster load time as all Python dependencies are now packaged into a single archive instead of being pulled in runtime with `micropip`. `flet build web` also detects native Python [packages built into Pyodide](https://pyodide.org/en/stable/usage/packages-in-pyodide.html), such as `bcrypt`, `html5lib`, `numpy` and many others, and installs them from Pyodide package registry.\\n\\nCheck [Packaging app for distribution](/docs/publish) guide for complete information about `flet build` command.\\n\\nLet us know what you think by joining [Flet Discord server](https://discord.gg/dzWXP8SHG8) or creating a new thread on [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions).\\n\\nWe wish you Happy New Year! Enjoy your holidays!"},{"id":"flet-for-fastapi","metadata":{"permalink":"/docs/flet-doc/blog/flet-for-fastapi","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-08-30-flet-for-fastapi.md","source":"@site/blog/2023-08-30-flet-for-fastapi.md","title":"Flet for FastAPI","description":"We\'ve just released Flet 0.10.0 with FastAPI support!","date":"2023-08-30T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":1.255,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-for-fastapi","title":"Flet for FastAPI","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Packaging apps for distribution","permalink":"/docs/flet-doc/blog/packaging-apps-for-distribution"},"nextItem":{"title":"Flet for Android","permalink":"/docs/flet-doc/blog/flet-for-android"}},"content":"We\'ve just released Flet 0.10.0 with FastAPI support!\\n\\n<img src=\\"/docs/flet-doc/img/blog/fastapi/fastapi-logo-teal.png\\" className=\\"screenshot-60\\" />\\n\\n[FastAPI](https://fastapi.tiangolo.com/) coupled with Uvicorn, Hypercorn, Gunicorn or other web server replaces built-in Flet web server (Fletd) to reliably run production Flet workloads.\\n\\nOn the other hand, seasoned FastAPI developers can use Flet to easily add interactive, real-time dashboards and admin UI to their existing or new FastAPI services.\\n\\n## A minimal app example\\n\\n```python\\nimport flet as ft\\nimport flet_fastapi\\n\\nasync def main(page: ft.Page):\\n    await page.add_async(\\n        ft.Text(\\"Hello, Flet!\\")\\n    )\\n\\napp = flet_fastapi.app(main)\\n```\\n\\nIt\'s a simple app that just outputs \\"Hello, Flet!\\" on a web page.\\n\\nTo run the app install Flet for FastAPI and Uvicorn:\\n\\n```\\npip install flet-fastapi\\npip install uvicorn\\n```\\n\\nSave the code above to `hello.py` and then start uvicorn as:\\n\\n```\\nuvicorn hello:app\\n```\\n\\nOpen the browser and navigate to http://127.0.0.1:8000 to see the app running.\\n\\n:::note\\nFlet app must be [async](/docs/getting-started/async-apps) in order to work with FastAPI WebSocket handler.\\n:::\\n\\n## Features and benefits\\n\\n* [Multiple Flet apps on a single domain](/docs/publish/web/dynamic-website#hosting-multiple-flet-apps-under-the-same-domain) - mapped to the root and/or sub-paths.\\n* Simple [one-line mappings](/docs/publish/web/dynamic-website#flet-fastapi-app) or [individual endpoint configurations](/docs/publish/web/dynamic-website#configuring-individual-flet-endpoints).\\n* Light-weight async wrapper around FastAPI WebSocket connection for greater concurrency.\\n* Serves Flet static files with user assets and app meta-information customization.\\n* Uploads handler for `FilePicker` control.\\n* OAuth callback handler for authentication flows.\\n\\nCheck [the guide](/docs/publish/web/dynamic-website) for complete information about Flet with FastAPI.\\n\\nLet us know what you think by joining [Flet Discord server](https://discord.gg/dzWXP8SHG8) or creating a new thread on [Flet GitHub discussions](https://github.com/flet-dev/flet/discussions)."},{"id":"flet-for-android","metadata":{"permalink":"/docs/flet-doc/blog/flet-for-android","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-07-08-flet-for-android.md","source":"@site/blog/2023-07-08-flet-for-android.md","title":"Flet for Android","description":"\ud83e\udd16 Android support is here!","date":"2023-07-08T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":1.36,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-for-android","title":"Flet for Android","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet for FastAPI","permalink":"/docs/flet-doc/blog/flet-for-fastapi"},"nextItem":{"title":"Flet for iOS","permalink":"/docs/flet-doc/blog/flet-for-ios"}},"content":"\ud83e\udd16 Android support is here!\\n\\n<a href=\\"https://play.google.com/store/apps/details?id=com.appveyor.flet\\" target=\\"_blank\\"><img src=\\"/docs/flet-doc/img/docs/getting-started/testing-on-android/google-play-badge.png\\" className=\\"screenshot-40\\" /></a>\\n\\nWith Flet Android app you can see how your Flet Python app looks and behaves on Android devices while the app itself is running on your computer.\\n\\nSimilar to iOS, Flet for Android is a Flutter app written entirely in Python with the help of two open-source packages: [`serious_python`](https://pub.dev/packages/serious_python) and [`flet`](https://pub.dev/packages/flet). Resulting app package is technically compliant with Google Play requirements, so you can publish awesome Android apps in pure Python.\\n\\n**[Follow this guide](/docs/getting-started/testing-on-android)** to get started with testing your Flet apps on Android. Explore the app, browse gallery, play with sample projects and app settings.\\n\\n## FAQ\\n\\n### How to package my Flet app for Google Play?\\n\\nWe are going to provide a project template for bootstrap Flutter app and a guide how to combine Flutter, `serious_python` package and your Python app together to create a standalone Android app and publish it to Google Play.\\n\\nCheck [`serious_python`\'s readme](https://github.com/flet-dev/serious-python#usage) for instructions on how create a Flutter bootstrap and package your Python app to run within it. Use [flet_example](https://github.com/flet-dev/serious-python/tree/main/example/flet_example) project as a starting point.\\n\\n### Will you provide packaging for Windows, macOS and Linux?\\n\\nYes! At the moment Flet desktop apps are packaged with `flet pack` command and PyInstaller. Produced app bundle adds performance and size overhead and is hard to customize, so we are going to replace it with native Flutter packaging.\\n\\n## Flet v0.9.0 release notes\\n\\nFor testing on Android you need to upgrade your Flet installation to v0.9.0.\\n\\nThere were [a few changes](https://github.com/flet-dev/flet/blob/main/CHANGELOG.md#090) mainly to support Android in Flet CLI. Let us know if you notice something unusual.\\n\\nEnjoy!"},{"id":"flet-for-ios","metadata":{"permalink":"/docs/flet-doc/blog/flet-for-ios","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-07-05-flet-for-ios.md","source":"@site/blog/2023-07-05-flet-for-ios.md","title":"Flet for iOS","description":"\ud83c\udf89 Whoo-hoo, Flet app is now on App Store! \ud83c\udf89","date":"2023-07-05T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":1.64,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-for-ios","title":"Flet for iOS","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet for Android","permalink":"/docs/flet-doc/blog/flet-for-android"},"nextItem":{"title":"Scrolling controls and Theming","permalink":"/docs/flet-doc/blog/scrolling-controls-and-theming"}},"content":"\ud83c\udf89 Whoo-hoo, Flet app is now on App Store! \ud83c\udf89\\n\\n<a href=\\"https://apps.apple.com/app/flet/id1624979699\\" target=\\"_blank\\"><img src=\\"/docs/flet-doc/img/blog/ios/flet-1080x1080.png\\" className=\\"screenshot-50 screenshot-rounded\\"/></a>\\n\\nWith Flet iOS app you can see how your Flet Python app looks and behaves on iPhone or iPad while the app itself is running on your computer.\\n\\nBut it\'s more than just testing Flet apps on the phone! Flet mobile app itself is written in Python and its publishing to App Store is an important milestone for the entire Flet project. It is a successful proof that you can create awesome mobile apps in Python only and package them so that they are accepted in App Store!\\n\\n**[Follow this guide](/docs/getting-started/testing-on-ios)** to get started with testing your Flet apps on iPhone or iPad. Explore the app, browse gallery, play with sample projects and app settings.\\n\\nI would like to thank [Kivy project](https://kivy.org/) for making a [toolchain for iOS](https://github.com/kivy/kivy-ios) which we used to compile Python interpreter and dependencies for iOS devices. We published [serious_python](https://pub.dev/packages/serious_python) package for adding Python runtime to any Flutter app.\\n\\n## FAQ\\n\\n### When Android is supported?\\n\\nSoon. It has #1 priority now and we\'ve already started working on it.\\n\\n### How to package my Flet app for App Store?\\n\\nWe are going to provide a project template for bootstrap Flutter app and a guide how to combine Flutter, `serious_python` package and your Python app together to create a standalone iOS app and publish it to App Store.\\n\\nLater this year we\'ll create a CI pipeline to fully automate the process.\\n\\nCheck [`serious_python`\'s readme](https://github.com/flet-dev/serious-python#usage) for instructions on how create a Flutter bootstrap and package your Python app to run within it. Use [flet_example](https://github.com/flet-dev/serious-python/tree/main/src/serious_python/example/flet_example) project as a starting point.\\n\\n## Flet v0.8.0 release notes\\n\\nFor testing on iOS you need to upgrade your Flet installation to v0.8.0.\\n\\nIt\'s been [changed a lot](https://github.com/flet-dev/flet/blob/main/CHANGELOG.md#080) in v0.8.0 and there were some breaking changes. Bear with us while you are upgrading to 0.8.0 and let us know if you have any troubles with it.\\n\\nEnjoy!"},{"id":"scrolling-controls-and-theming","metadata":{"permalink":"/docs/flet-doc/blog/scrolling-controls-and-theming","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-05-12-theming-and-scrollables.md","source":"@site/blog/2023-05-12-theming-and-scrollables.md","title":"Scrolling controls and Theming","description":"Flet 0.7.1 enables developers changing scroll position and receiving scroll notifications from Page, View, Column, Row, ListView and GridView controls.","date":"2023-05-12T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":4.28,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"scrolling-controls-and-theming","title":"Scrolling controls and Theming","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet for iOS","permalink":"/docs/flet-doc/blog/flet-for-ios"},"nextItem":{"title":"Canvas","permalink":"/docs/flet-doc/blog/canvas"}},"content":"Flet 0.7.1 enables developers [changing scroll position](#controlling-scroll-position) and [receiving scroll notifications](#receiving-scroll-notifications) from `Page`, `View`, `Column`, `Row`, `ListView` and `GridView` controls.\\n\\nThe release also introduces theming improvements:\\n* [Color scheme customization](#color-scheme-customization)\\n* [Nested themes](#nested-themes)\\n* [Text theming](#text-theming)\\n* [Scrollbar theming](#scrollbar-theme)\\n* [Tabs theming](#tabs-theming)\\n\\n## Controlling scroll position\\n\\nScrollable controls (`Page`, `View`, `Column`, `Row`, `ListView` and `GridView`) introduce `scroll_to()` method to change their scroll position to either absolute `offset`, relative `delta` or jump to the control with specified `key`.\\n\\nMoving to a `key` is particularly exciting as it allows simulating the navigation between page bookmarks, kind of HTML hrefs with `#`:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/column/column-scroll-to-key.gif\\"  className=\\"screenshot-70 screenshot-rounded\\" />\\n\\nCheck the [source code](https://github.com/flet-dev/examples/blob/main/python/controls/column/column-scroll-to-key.py) of the example above.\\n\\nSee [`Column.scroll_to`](/docs/controls/column#scroll_tooffset-delta-key-duration-curve) for more details about controlling scroll position.\\n\\n## Receiving scroll notifications\\n\\nAll scrollable controls now provide `on_scroll` event handler which fires when a scroll position is changed. From event object properties you can determine whether scroll operation has started, finished, changed direction or scroll position went behind scrolling extent (overscroll). You can also get updates of the current scroll position as well as dimensions of the scroll area, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def on_column_scroll(e: ft.OnScrollEvent):\\n        print(\\n            f\\"Type: {e.event_type}, pixels: {e.pixels}, min_scroll_extent: {e.min_scroll_extent}, max_scroll_extent: {e.max_scroll_extent}\\"\\n        )\\n\\n    cl = ft.Column(\\n        spacing=10,\\n        height=200,\\n        width=200,\\n        scroll=ft.ScrollMode.ALWAYS,\\n        on_scroll=on_column_scroll,\\n    )\\n    for i in range(0, 50):\\n        cl.controls.append(ft.Text(f\\"Text line {i}\\", key=str(i)))\\n\\n    page.add(\\n        ft.Container(cl, border=ft.border.all(1)),\\n    )\\n\\nft.app(main)\\n```\\n\\nSee [`Column.on_scroll`](/docs/controls/column#on_scroll) for more details about scroll notification.\\n\\nCheck [infinite scroll example](https://github.com/flet-dev/examples/blob/main/python/controls/column/column-infinite-list.py).\\n\\n## Color scheme customization\\n\\nUntil today the only way to control color scheme for your application was specifying `color_scheme_seed` when creating a new `ft.Theme` object.\\n\\nThis release enables you to fine tune all 30 colors based on the [Material spec](https://m3.material.io/styles/color/the-color-system/color-roles) and used by various Flet controls.\\n\\n<img src=\\"/docs/flet-doc/img/blog/theme-scrolling/material-theme-builder.png\\"  className=\\"screenshot-70 screenshot-rounded\\" />\\n\\nYou can even use [Material Theme Builder](https://m3.material.io/theme-builder#/dynamic) and apply exported color palette to your app, for example:\\n\\n```python\\npage.theme = ft.Theme(\\n    color_scheme=ft.ColorScheme(\\n        primary=ft.Colors.GREEN,\\n        primary_container=ft.Colors.GREEN_200\\n        # ...\\n    ),\\n)\\n```\\n\\nSee [`ColorScheme` class](/docs/reference/types/colorscheme) for more details.\\n\\n## Nested themes\\n\\nAnother awesome feature of this release is nested themes!\\n\\nYou can have a part of your app to use a different theme or override some theme styles for specific controls.\\n\\nRemember `page` object having `theme` and `theme_mode` properties? Now `Container` has `theme` and `theme_mode` properties too!\\n\\n`Container.theme` accepts the same `ft.Theme` object as a page. Specifying `theme_mode` in the container means you don\'t want to inherit parent theme, but want a completely new, unique scheme for all controls inside the container. However, if the container does not have `theme_mode` property set then the styles from its `theme` property will override the ones from the parent, inherited theme:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    # Yellow page theme with SYSTEM (default) mode\\n    page.theme = ft.Theme(\\n        color_scheme_seed=ft.Colors.YELLOW,\\n    )\\n\\n    page.add(\\n        # Page theme\\n        ft.Container(\\n            content=ft.ElevatedButton(\\"Page theme button\\"),\\n            bgcolor=ft.Colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n\\n        # Inherited theme with primary color overridden\\n        ft.Container(\\n            theme=ft.Theme(color_scheme=ft.ColorScheme(primary=ft.Colors.PINK)),\\n            content=ft.ElevatedButton(\\"Inherited theme button\\"),\\n            bgcolor=ft.Colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n\\n        # Unique always DARK theme\\n        ft.Container(\\n            theme=ft.Theme(color_scheme_seed=ft.Colors.INDIGO),\\n            theme_mode=ft.ThemeMode.DARK,\\n            content=ft.ElevatedButton(\\"Unique theme button\\"),\\n            bgcolor=ft.Colors.SURFACE_VARIANT,\\n            padding=20,\\n            width=300,\\n        ),\\n    )\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/theme-scrolling/nested-themes.png\\"  className=\\"screenshot-60\\" />\\n\\n## Scrollbar theme\\n\\nYou can now customize the look and fill of scrollbars in your application (or a particular scroillbar with [nested themes](#nested-themes)).\\n\\nIt could be done via [`page.theme.scrollbar_theme`](/docs/reference/types/scrollbartheme) property, for example:\\n\\n```python\\npage.theme = ft.Theme(\\n    scrollbar_theme=ft.ScrollbarTheme(\\n        track_color={\\n            ft.MaterialState.HOVERED: ft.Colors.AMBER,\\n            ft.MaterialState.DEFAULT: ft.Colors.TRANSPARENT,\\n        },\\n        track_visibility=True,\\n        track_border_color=ft.Colors.BLUE,\\n        thumb_visibility=True,\\n        thumb_color={\\n            ft.MaterialState.HOVERED: ft.Colors.RED,\\n            ft.MaterialState.DEFAULT: ft.Colors.GREY_300,\\n        },\\n        thickness=30,\\n        radius=15,\\n        main_axis_margin=5,\\n        cross_axis_margin=10,\\n    )\\n)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/column/column-scroll-to.png\\"  className=\\"screenshot-60\\" />\\n\\n## Text theming\\n\\nMaterial 3 design defines [5 groups of text styles with 3 sizes in each group](/docs/controls/text#pre-defined-theme-text-styles): \\"Display\\", \\"Headline\\", \\"Title\\", \\"Label\\" and \\"Body\\" which are used across Flet controls. You can now customize each of those styles with `page.theme.text_theme`, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.theme = ft.Theme(\\n        text_theme=ft.TextTheme(body_medium=ft.TextStyle(color=ft.Colors.GREEN))\\n    )\\n\\n    page.add(ft.Text(\\"Hello, green world!\\"))\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/theme-scrolling/text-theme.png\\"  className=\\"screenshot-50\\" />\\n\\nApparently, `Body Medium` is used by `Text` control as a default style.\\n\\nSee [`TextTheme` class](/docs/reference/types/texttheme) for more details.\\n\\n## Tabs theming\\n\\nYou can now control the look and feel of `Tabs` control. In this release `Tabs` adds a bunch of new properties and there is a new [`page.theme.tabs_theme`](/docs/reference/types/tabstheme) property to style all tabs in your app:\\n\\n```python\\npage.theme = ft.Theme(\\n    tabs_theme=ft.TabsTheme(\\n        divider_color=ft.Colors.BLUE,\\n        indicator_color=ft.Colors.RED,\\n        indicator_tab_size=True,\\n        label_color=ft.Colors.GREEN,\\n        unselected_label_color=ft.Colors.AMBER,\\n        overlay_color={\\n            ft.MaterialState.FOCUSED: ft.Colors.with_opacity(0.2, ft.Colors.GREEN),\\n            ft.MaterialState.DEFAULT: ft.Colors.with_opacity(0.2, ft.Colors.PINK),\\n        },\\n    )\\n)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/theme-scrolling/tabs-theme.png\\"  className=\\"screenshot-60\\" />\\n\\nSee [`TabsTheme` class](/docs/reference/types/tabstheme) for more details.\\n\\n## Other changes\\n\\n### Flutter 3.10\\n\\nThis Flet release is based on Flutter 3.10 which [brings new features, performance and size optimizations](https://medium.com/flutter/whats-new-in-flutter-3-10-b21db2c38c73). As a result, most of Flet dependencies bumped their versions too, so if you notice any issues please let us know.\\n\\n### Color emoji in web apps\\n\\nColor emoji support in web apps are back! In Flutter 3.7 color emoji were disabled in \\"CanvasKit\\" renderer (default in Flet) because of their font size (8 MB!) and returned back as an opt-in in Flutter 3.10. You can enable color emoji in server-driven app with `use_color_emoji` argument:\\n\\n```python\\nft.app(main, use_color_emoji=True)\\n```\\n\\nand [use `--use-color-emoji` switch](/docs/publish/web/static-website#color-emojis) when publishing app as a static side.\\n\\nThat\'s all for today!\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"canvas","metadata":{"permalink":"/docs/flet-doc/blog/canvas","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-04-26-canvas.md","source":"@site/blog/2023-04-26-canvas.md","title":"Canvas","description":"Unleash your inner artist \ud83e\uddd1\u200d\ud83c\udfa8 and boost your Flet creativity with brand-new Canvas control just released in Flet 0.6.0!","date":"2023-04-26T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":2.125,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"canvas","title":"Canvas","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Scrolling controls and Theming","permalink":"/docs/flet-doc/blog/scrolling-controls-and-theming"},"nextItem":{"title":"Flet Charts","permalink":"/docs/flet-doc/blog/flet-charts"}},"content":"Unleash your inner artist \ud83e\uddd1\u200d\ud83c\udfa8 and boost your Flet creativity with brand-new [Canvas](/docs/controls/canvas) control just released in [Flet 0.6.0](https://pypi.org/project/flet/)!\\n\\nCanvas enables you to draw arbitrary graphics using a set of primitives, or \\"shapes\\", such as line, circle, arc, path and text. I bet you can even implement your own version of [charts](/blog/flet-charts) using Canvas control!\\n\\nCombine Canvas with [GestureDetector](/docs/controls/gesturedetector) and you get a free-hand drawing app - Flet Brush \ud83d\ude00!\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/canvas/canvas-flet-brush.gif\\" className=\\"screenshot-70 screenshot-rounded\\"/>\\n\\n[Example source](https://github.com/flet-dev/examples/blob/main/python/controls/canvas/canvas-flet-brush.py)\\n\\n`Canvas` control is located in `flet.canvas` package. You need another import to use it:\\n\\n```python\\nimport flet.canvas as cv\\n```\\n\\nHere\'s a simple program drawing a smiley face with [`Circle`](/docs/controls/canvas#circle-shape-properties) and [`Arc`](/docs/controls/canvas#arc-shape-properties) shapes using filled and stroke [`Paint`](/docs/reference/types/paint):\\n\\n```python\\nimport math\\nimport flet as ft\\nimport flet.canvas as cv\\n\\ndef main(page: ft.Page):\\n    stroke_paint = paint = ft.Paint(stroke_width=2, style=ft.PaintingStyle.STROKE)\\n    fill_paint = paint = ft.Paint(style=ft.PaintingStyle.FILL)\\n    cp = cv.Canvas(\\n        [\\n            cv.Circle(100, 100, 50, stroke_paint),\\n            cv.Circle(80, 90, 10, stroke_paint),\\n            cv.Circle(84, 87, 5, fill_paint),\\n            cv.Circle(120, 90, 10, stroke_paint),\\n            cv.Circle(124, 87, 5, fill_paint),\\n            cv.Arc(70, 95, 60, 40, 0, math.pi, paint=stroke_paint),\\n        ],\\n        width=float(\\"inf\\"),\\n        expand=True,\\n    )\\n\\n    page.add(cp)\\n\\nft.app(main)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/canvas/canvas-face.png\\" className=\\"screenshot-30\\"/>\\n\\nRead more about Canvas in [docs](/docs/controls/canvas) and explore [Canvas examples](https://github.com/flet-dev/examples/tree/main/python/controls/canvas)!\\n\\n## Other changes\\n\\n### Rich text support\\n\\nWhile working on [drawing text on Canvas](/docs/controls/canvas#drawing-text), as a bonus to this release, we implemented a new [`TextSpan`](/docs/reference/types/textspan) control which can now be used with [`Text.spans`](/docs/controls/text#spans) to output rich text.\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/text/richtext-borders-stroke.png\\" className=\\"screenshot-60\\" />\\n\\nCheck rich text examples: [one](/docs/controls/text#rich-text-basics), [two](/docs/controls/text#rich-text-with-borders-and-stroke) and [three](/docs/controls/text#rich-text-with-gradient).\\n\\n### `url` property for buttons\\n\\nIf you need to open a URL by clicking on a button or any other control with `on_click` event you can just provide that URL in `url` instead of doing that in the code with [`page.launch_url()`](/docs/controls/page#launch_urlurl) method.\\n\\nInstead of that:\\n\\n```python\\nft.ElevatedButton(\\"Go to Google\\", on_click=lambda e: e.page.launch_url(\\"https://google.com\\"))\\n```\\n\\nyou can just do this:\\n\\n```python\\nft.ElevatedButton(\\"Go to Google\\", url=\\"https://google.com\\")\\n```\\n\\nA new `url` property also solves [blocked window on Safari](https://github.com/flet-dev/flet/issues/1105) issue.\\n\\n### Auto-follow links in `Markdown`\\n\\nAs a continuation of `url` property `Markdown` control can now be enabled to auto-follow URLs in the document:\\n\\n```python\\nimport flet as ft\\n\\nmd = \\"\\"\\"\\n[Go to Google](https://www.google.com)\\n\\"\\"\\"\\n\\ndef main(page: ft.Page):\\n    page.add(\\n        ft.Markdown(\\n            md,\\n            extension_set=ft.MarkdownExtensionSet.GITHUB_WEB,\\n            auto_follow_links=True,\\n        )\\n    )\\n\\nft.app(main)\\n```\\n\\n### Better web support\\n\\nIn this release we also did some improvements to web support like [capturing user info in `page.client_id` and `page.client_user_agent`](https://github.com/flet-dev/flet/pull/1302) as well as fixing nasty [#1333](https://github.com/flet-dev/flet/pull/1333) and [#1289](https://github.com/flet-dev/flet/pull/1289) bugs related to routing.\\n\\nThat\'s all for today!\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give canvas and rich text a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-charts","metadata":{"permalink":"/docs/flet-doc/blog/flet-charts","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-04-12-flet-charts.md","source":"@site/blog/2023-04-12-flet-charts.md","title":"Flet Charts","description":"Last year we introduced support for Matplotlib and Plotly charts. Both libraries are able to export charts as SVG images which are then displayed in a Flet app. However, such charts, while serving the purpose of visualization, are lacking interactivity and animation.","date":"2023-04-12T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":1.295,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-charts","title":"Flet Charts","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Canvas","permalink":"/docs/flet-doc/blog/canvas"},"nextItem":{"title":"Standalone Flet web apps with Pyodide","permalink":"/docs/flet-doc/blog/standalone-flet-web-apps-with-pyodide"}},"content":"Last year we introduced support for [Matplotlib and Plotly charts](/blog/matplotlib-and-plotly-charts). Both libraries are able to export charts as SVG images which are then displayed in a Flet app. However, such charts, while serving the purpose of visualization, are lacking interactivity and animation.\\n\\nToday we are releasing [Flet 0.5.2](https://pypi.org/project/flet/) with built-in charts \ud83d\udcca based on the awesome [fl_chart](https://pub.dev/packages/fl_chart) library!\\n\\nThree new chart controls have been introduced:\\n\\n## LineChart\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/linechart-sample-1.gif\\" className=\\"screenshot-50\\"/>\\n\\n[Docs](/docs/controls/linechart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n## BarChart\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/barchart-sample-2.gif\\" className=\\"screenshot-50\\"/>\\n\\n[Docs](/docs/controls/barchart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n## PieChart\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/piechart-sample-2.gif\\" className=\\"screenshot-30\\"/>\\n\\n[Docs](/docs/controls/piechart) \xb7 [Examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts)\\n\\n:::note\\nWe spent a lot of time studying `fl_chart` library while trying to implement most of its features in a Flet way. However, if you see anything missing in Flet, but available in a library please [submit a new feature request](https://github.com/flet-dev/flet/issues).\\n:::\\n\\n## Other changes\\n\\n### Pyodide 0.23\\n\\nPyodide, which provides Python runtime in a browser and is used to run Flet app as a static website, was upgraded to version 0.23 which is based on Python 3.11.2 and giving some [size and performance improvements](https://blog.pyodide.org/posts/0.23-release/).\\n\\n### Memory leak fixes\\n\\nIn this release we paid a lot of attention to memory leak issues in Flet apps. Now, when a user session is closed its memory is reliably released and garbage-collected. That makes Flet ready for production applications with a lot of users.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give charts a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nHey, [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 5K stars \u2b50\ufe0f - thank you all for your continuing support!"},{"id":"standalone-flet-web-apps-with-pyodide","metadata":{"permalink":"/docs/flet-doc/blog/standalone-flet-web-apps-with-pyodide","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-02-06-standalone-flet-web-apps-with-pyodide.md","source":"@site/blog/2023-02-06-standalone-flet-web-apps-with-pyodide.md","title":"Standalone Flet web apps with Pyodide","description":"We\'ve just released Flet 0.4.0 with a super exciting new feature - packaging Flet apps into a standalone static website that can be run entirely in the browser! The app can be published to any free hosting for static websites such as GitHub Pages or Cloudflare Pages. Thanks to Pyodide - a Python port to WebAssembly!","date":"2023-02-06T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":3.83,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"standalone-flet-web-apps-with-pyodide","title":"Standalone Flet web apps with Pyodide","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Flet Charts","permalink":"/docs/flet-doc/blog/flet-charts"},"nextItem":{"title":"Packaging desktop apps with a custom icon","permalink":"/docs/flet-doc/blog/packaging-desktop-apps-with-custom-icon"}},"content":"import Card from \'@site/src/components/card\';\\n\\nWe\'ve just released [Flet 0.4.0](https://pypi.org/project/flet/) with a super exciting new feature - [packaging Flet apps into a standalone static website](/docs/publish/web/static-website) that can be run entirely in the browser! The app can be published to any free hosting for static websites such as GitHub Pages or Cloudflare Pages. Thanks to [Pyodide](https://pyodide.org/en/stable/) - a Python port to WebAssembly!\\n\\n<img src=\\"/docs/flet-doc/img/blog/pyodide/pyodide-logo.png\\" className=\\"screenshot-50\\" />\\n\\nYou can quickly build awesome single-page applications (SPA) entirely in Python and host them everywhere! No HTML, CSS or JavaScript required!\\n\\n## Quick Flet with Pyodide demo\\n\\nInstall the latest Flet package:\\n\\n```\\npip install flet --upgrade\\n```\\n\\nCreate a simple `counter.py` app:\\n\\n```python title=\\"counter.py\\"\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Flet counter example\\"\\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\\n\\n    txt_number = ft.TextField(value=\\"0\\", text_align=ft.TextAlign.RIGHT, width=100)\\n\\n    def minus_click(e):\\n        txt_number.value = str(int(txt_number.value) - 1)\\n        page.update()\\n\\n    def plus_click(e):\\n        txt_number.value = str(int(txt_number.value) + 1)\\n        page.update()\\n\\n    page.add(\\n        ft.Row(\\n            [\\n                ft.IconButton(ft.Icons.REMOVE, on_click=minus_click),\\n                txt_number,\\n                ft.IconButton(ft.Icons.ADD, on_click=plus_click),\\n            ],\\n            alignment=ft.MainAxisAlignment.CENTER,\\n        )\\n    )\\n\\nft.app(main)\\n```\\n\\nRun a brand-new `flet publish` command to publish Flet app as a static website:\\n\\n```\\nflet publish counter.py\\n```\\n\\nThe website will be published to `dist` directory next to `counter.py`.\\nGive website a try using built-in Python web server:\\n\\n```\\npython -m http.server --directory dist\\n```\\n\\nOpen `http://localhost:8000` in your browser to check the published app.\\n\\n<img src=\\"/docs/flet-doc/img/docs/getting-started/flet-counter-safari.png\\" className=\\"screenshot-50\\" />\\n\\nHere are a few live Flet apps hosted at Cloudflare Pages:\\n\\nexport const ImageCard = ({title, href, imageUrl}) => (\\n    <div className=\\"col col--4 margin-bottom--lg\\">\\n      <Card href={href}>\\n        <img src={\\"/docs/flet-doc/img/gallery/\\" + imageUrl} className=\\"screenshot-100\\"/>\\n        <h2>{title}</h2>\\n      </Card>\\n    </div>\\n);\\n\\n<div className=\\"margin-top--lg\\">\\n  <section className=\\"row\\">\\n    <ImageCard title=\\"To-Do\\" href=\\"https://gallery.flet.dev/todo/\\" imageUrl=\\"todo.png\\" />\\n    <ImageCard title=\\"Icons browser\\" href=\\"https://gallery.flet.dev/icons-browser/\\" imageUrl=\\"icons-browser.png\\" />\\n    <ImageCard title=\\"Calc\\" href=\\"https://gallery.flet.dev/calculator/\\" imageUrl=\\"calc.png\\" />\\n    <ImageCard title=\\"Solitaire\\" href=\\"https://gallery.flet.dev/solitaire/\\" imageUrl=\\"solitaire.png\\" />\\n    <ImageCard title=\\"Trolli\\" href=\\"https://gallery.flet.dev/trolli/\\" imageUrl=\\"trolli.png\\" />\\n  </section>\\n</div>\\n\\n[Check the guide](/docs/publish/web/static-website) for more information about publishing Flet apps as standalone websites.\\n\\n## Built-in Fletd server in Python\\n\\nFlet 0.4.0 also implements a [new Flet desktop architecture](https://flet.dev/blog/flet-mobile-update#flet-new-desktop-architecture).\\n\\nIt replaces Fletd server written in Go with a light-weight shim written in Python with a number of pros:\\n\\n1. Only 2 system processes are needed to run Flet app: Python interpreter and Flutter client.\\n2. Less communication overhead (minus two network hops between Python and Fletd) and lower latency (shim uses TCP on Windows and Unix domain sockets on macOS/Linux).\\n3. Shim binds to `127.0.0.1` on Windows by default which is more secure.\\n4. The size of a standalone app bundle produced by `flet pack` reduced by ~8 MB.\\n\\nThe implementation was also required to support Pyodide (we can\'t run Go web server in the browser, right?) and paves the way to iOS and Android support.\\n\\n### Other changes\\n\\n* All controls loading resources from web URLs (`Image.src`, `Audio.src`, `Page.fonts`, `Container.image_src`) are now able to load them from local files too, by providing a full path in the file system, and from `assets` directory by providing relative path. For desktop apps a path in `src` property could be one of the following:\\n  * A path relative to `assets` directory, with or without starting slash, for example: `/image.png` or `image.png`. The name of artifact dir should not be included.\\n  * An absolute path within a computer file system, e.g. `C:\\\\projects\\\\app\\\\assets\\\\image.png` or `/Users/john/images/picture.png`.\\n  * A full URL, e.g. `https://mysite.com/images/pic.png`.\\n  * Add `page.on_error = lambda e: print(\\"Page error:\\", e.data)` to see failing images.\\n* `flet` Python package has separated into two packages: `flet-core` and `flet`.\\n* PDM replaced with Poetry.\\n* `beartype` removed everywhere.\\n\\n### \ud83d\udca5 Breaking changes\\n\\n* Default routing scheme changed from \\"hash\\" to \\"path\\" (no `/#/` at the end of app URL). Use `ft.app(main, route_url_strategy=\\"hash\\")` to get original behavior.\\n* OAuth authentication is not supported anymore in standalone desktop Flet apps.\\n\\n## Async support\\n\\nFlet apps can now be written as async apps and use `asyncio` with other Python async libraries. Calling coroutines is naturally supported in Flet, so you don\'t need to wrap them to run synchronously.\\n\\nTo start with an async Flet app you should make `main()` method `async`:\\n\\n```python\\nimport flet as ft\\n\\nasync def main(page: ft.Page):\\n    await page.add_async(ft.Text(\\"Hello, async world!\\"))\\n\\nft.app(main)\\n```\\n\\n[Read the guide](/docs/getting-started/async-apps) for more information about writing async Flet apps.\\n\\n## Conclusion\\n\\nFlet 0.4.0 brings the following exciting features:\\n\\n- Standalone web apps with Pyodide running in the browser and hosted on a cheap hosting.\\n- Faster and more secure architecture with a built-in Fletd server.\\n- Async apps support.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give `flet publish` command a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nHey, by the way, [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 4.2K stars \u2b50\ufe0f (+1K in just one month) - keep going!"},{"id":"packaging-desktop-apps-with-custom-icon","metadata":{"permalink":"/docs/flet-doc/blog/packaging-desktop-apps-with-custom-icon","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2023-01-04-packaging-desktop-apps-with-custom-icon.md","source":"@site/blog/2023-01-04-packaging-desktop-apps-with-custom-icon.md","title":"Packaging desktop apps with a custom icon","description":"Happy New Year! Flet project has reached \u2b50\ufe0f 3.3K stars \u2b50\ufe0f on GitHub which is very exciting and encouraging! Thank you all for your support!","date":"2023-01-04T00:00:00.000Z","tags":[{"inline":true,"label":"releases","permalink":"/docs/flet-doc/blog/tags/releases"}],"readingTime":0.965,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"packaging-desktop-apps-with-custom-icon","title":"Packaging desktop apps with a custom icon","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["releases"]},"unlisted":false,"prevItem":{"title":"Standalone Flet web apps with Pyodide","permalink":"/docs/flet-doc/blog/standalone-flet-web-apps-with-pyodide"},"nextItem":{"title":"Flet mobile update","permalink":"/docs/flet-doc/blog/flet-mobile-update"}},"content":"Happy New Year! [Flet project](https://github.com/flet-dev/flet) has reached \u2b50\ufe0f 3.3K stars \u2b50\ufe0f on GitHub which is very exciting and encouraging! Thank you all for your support!\\n\\nWe are starting this year with the release of [Flet 0.3.2](https://pypi.org/project/flet/) bringing a long-awaited feature: creating standalone desktop bundles with a custom icon!\\n\\n`flet` command has been used for running Flet program with [hot reload](/docs/reference/cli/run), but we recently re-worked Flet CLI to support multiple actions.\\n\\nThere is a new `flet pack` command that wraps [PyInstaller](https://github.com/pyinstaller/pyinstaller) API to package your Flet Python app into a standalone Windows executable or macOS app bundle which can be run by a user with no Python installed.\\n\\nCommand\'s `--icon` argument is now changing not only executable\'s icon, but Flet\'s app window icon and the icon shown in macOS dock, Windows taskbar, macOS \\"About\\" dialog, Task Manager and Activity Monitor:\\n\\n<img src=\\"/docs/flet-doc/img/docs/getting-started/package-desktop/macos-dock.png\\" className=\\"screenshot-20 screenshot-rounded\\" />\\n\\nBundle name, version and copyright can be changed too:\\n\\n<img src=\\"/docs/flet-doc/img/docs/getting-started/package-desktop/flet-app-bundle-about-clean.png\\" className=\\"screenshot-50\\" />\\n\\nFind all available options for packaging desktop apps in the [updated guide](/docs/publish).\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give `flet pack` command a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-mobile-update","metadata":{"permalink":"/docs/flet-doc/blog/flet-mobile-update","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-12-08-flet-mobile-update.md","source":"@site/blog/2022-12-08-flet-mobile-update.md","title":"Flet mobile update","description":"This post is a continuation of Flet mobile strategy published a few months ago.","date":"2022-12-08T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/docs/flet-doc/blog/tags/news"}],"readingTime":4.335,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-mobile-update","title":"Flet mobile update","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news"]},"unlisted":false,"prevItem":{"title":"Packaging desktop apps with a custom icon","permalink":"/docs/flet-doc/blog/packaging-desktop-apps-with-custom-icon"},"nextItem":{"title":"Flet versioning and pre-releases","permalink":"/docs/flet-doc/blog/flet-versioning-and-pre-releases"}},"content":"This post is a continuation of [Flet mobile strategy](/blog/flet-mobile-strategy) published a few months ago.\\n\\nOur original approach to Flet running on a mobile device was Server-Driven UI. Though SDUI has its own benefits (like bypassing App Store for app updates) it doesn\'t work in all cases, requires web server to host Python part of the app and, as a result, adds latency which is not great for user actions requiring nearly instance UI response, like drawing apps.\\n\\nI\'ve been thinking on how to make Python runtime embedded into Flutter iOS or Android app to run user Python program. No doubt, it\'s technically possible as Kivy and BeeWare projects do that already.\\n\\n## Current Flet architecture\\n\\nThe current architecture of Flet desktop app is shown on the diagram below:\\n\\n<img src=\\"/docs/flet-doc/img/blog/mobile-update/flet-desktop-architecture.svg\\" className=\\"screenshot-100\\" />\\n\\nRunning Flet program on a desktop involves three applications (processes) working together:\\n\\n* **Python runtime** (`python3`) - Python interpreter running your Python script. This is what you are starting from a command line. Python starts Fletd server and connects to it via WebSockets.\\n* **Fletd server** (`fletd`)- Flet web server written in Go, listening on a TCP port. Fletd holds the state of all user sessions (for desktop app there is only one session) and dispatches page updates and user generated events between Python program and Flet client.\\n* **Flet client** (`flet`) - desktop app written in Flutter and displaying UI in a native OS window. Flet client connects to Fletd server via WebSockets.\\n\\nThe architecture above works well for Flet web apps where web server is essential part, but for desktop it seems redundant:\\n\\n* If all three processes run on the same computer WebSockets could be replaced with sockets or named pipes with less overhead.\\n* Fletd server has no much sense as there is only one user session and UI state is persistently stored in Flet desktop client which is never \\"reloaded\\".\\n\\n## Flet new desktop architecture\\n\\nFlet desktop app architecture can be simplified by replacing Fletd with a \\"stub\\" written in Python and communicating with Flet desktop client via sockets (Windows) and named pipes (macOS and Linux):\\n\\n<img src=\\"/docs/flet-doc/img/blog/mobile-update/flet-desktop-architecture-v2.svg\\" className=\\"screenshot-70\\" />\\n\\n## Flet mobile architecture\\n\\nMobile applications are running in a very strict context with a number of limitations. For example, on iOS the app cannot spawn a new processes. Other words, Flet Flutter app cannot just start \\"python.exe\\" and pass your script as an argument.\\n\\nLuckily for us, [Python can be embedded](https://docs.python.org/3/extending/embedding.html) into another app as a C library and Dart (the language in which Flutter apps are written) allows calling C libraries via [FFI](https://dart.dev/guides/libraries/c-interop) (Foreign Function Interface).\\n\\nAdditionally, while Android allows loading of dynamically linked libraries iOS requires all libraries statically linked into app executable. [This article](https://blog.logrocket.com/dart-ffi-native-libraries-flutter/) covers Dart FFI in more details, if you are curious.\\n\\nFlet mobile architecture could look like this:\\n\\n<img src=\\"/docs/flet-doc/img/blog/mobile-update/flet-mobile-architecture-v2.svg\\" className=\\"screenshot-40\\" />\\n\\nPython runtime will be statically or dynamically linked with Flutter client app and called via FFI and/or named pipes.\\n\\nRunning Python on mobile will have some limitations though. Most notable one is the requirement to use \\"pure\\" Python modules or modules with native code compiled specifically for mobile ARM64 architecture.\\n\\n## Asyncio support\\n\\n[Asyncio](https://docs.python.org/3/library/asyncio.html) is part of Python 3 and we start seeing more and more libraries catching up with async/await programming model which is more effective for I/O-bound and UI logic.\\n\\nCurrently, Flet is spawning all UI event handlers in new threads and it\'s also a pain to see `threading.sleep()` calls hogging threads here and there just to do some UI animation. All that looks expensive.\\n\\nUsing of async libraries from a sync code is [possible](https://github.com/flet-dev/flet/issues/128), but looks hacky and inefficient as it keeps CPU busy just to wait async method to finish. So, we want a first-class support of async code in Flet app.\\n\\nAsync/await model is a state machine switching between tasks in a single thread. By going async Flet will able to utilize [streams](https://docs.python.org/3/library/asyncio-stream.html) for socket server and use async [WebSockets library](https://pypi.org/project/websockets/) library. It will be possible to use both sync and async event handlers in a single Flet app without any compromises or hacks.\\n\\nEven more exciting, async Flet will be able to run entirely in the browser within [Pyodide](https://pyodide.org/) - Python distribution based on WebAssembly (WASM). WebAssembly doesn\'t have multi-threading support yet, so running in a single thread is a must. Just imagine, Flet web app with a truly offline Flet PWA that does not require a web server to run a Python code!\\n\\n## Development plan\\n\\nWe are going to crunch the scope above in a few iterations:\\n\\n1. Async API support with async WebSockets library. Works with the same Fletd in Go.\\n2. Fletd server (\\"stub\\") in Python to use with a desktop.\\n3. Embedding Python with Fletd \\"stub\\" and user program into iOS.\\n4. Embedding Python into Android.\\n5. Packaging mobile apps for iOS and Android.\\n\\n:::caution HELP WANTED\\n\ud83d\ude4f I\'m looking for a help from the community with developing C/C++/native code integration part between Flutter and Python on iOS and Android. It could be either free help or a paid job - let me know if you are interested!\\n:::\\n\\nHop to [Discord](https://discord.gg/dzWXP8SHG8) to discuss the plan, offer help, ask questions!"},{"id":"flet-versioning-and-pre-releases","metadata":{"permalink":"/docs/flet-doc/blog/flet-versioning-and-pre-releases","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-11-16-flet-versioning-and-pre-releases.md","source":"@site/blog/2022-11-16-flet-versioning-and-pre-releases.md","title":"Flet versioning and pre-releases","description":"Flet is a fast-evolving framework with a new functionality and bug fixes being committed every other day.","date":"2022-11-16T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/docs/flet-doc/blog/tags/news"}],"readingTime":1.405,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-versioning-and-pre-releases","title":"Flet versioning and pre-releases","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news"]},"unlisted":false,"prevItem":{"title":"Flet mobile update","permalink":"/docs/flet-doc/blog/flet-mobile-update"},"nextItem":{"title":"ResponsiveRow and mobile controls","permalink":"/docs/flet-doc/blog/responsive-row-and-mobile-controls"}},"content":"Flet is a fast-evolving framework with a new functionality and bug fixes being committed every other day.\\n\\nThe development model with one pull request per release didn\'t work well for the project as users waited for weeks to get hands on a new release and, honestly, from development perspective producing large \\"heroic\\" releases takes a lot of energy \ud83e\udee0.\\n\\nFrom now on we\'ll be breaking releases into multiple pull requests with one feature/bugfix per PR.\\n\\nEvery PR merged into `main` branch will be publishing pre-release (developmental release) package to [pypi.org](https://pypi.org/project/flet/) having version format of `X.Y.Z.devN`.\\n\\n## Installing pre-releases\\n\\nTo install Flet pre-release package use the following command:\\n\\n```\\npip install flet --pre\\n```\\n\\n:::info\\nWe recommend installing pre-release builds into a virtual environment.\\n:::\\n\\n## Flet versioning\\n\\nFlet is switching to [Semanting Versioning](https://semver.org/) with a version number `MAJOR.MINOR.PATCH`:\\n\\n1. `MAJOR` will be incremented when there are \\"incompatible API changes\\". Right now it\'s `0` and we expect to make it `1` when we feel that Flet API is stable enough.\\n2. `MINOR` will be incremented when a new functionality added in a backwards compatible manner.\\n3. `PATCH` will be incremented when we make backward compatible bug fixes.\\n\\nAccording to that rule, upcoming Flet release will have version `0.2.0`. Bug fixes for that release will be labeled as `0.2.1`, `0.2.2`, etc. The release after that release will be `0.3.0` and so on.\\n\\nFlet pre-releases will have a format of `MAJOR.{LAST_MINOR + 1}.0.dev{BUILD}` where `LAST_MINOR` is `MINOR` version of the last release and `{BUILD}` is a build number set by [CI](https://ci.appveyor.com/project/flet-dev/flet). For example, if the last published release is `0.1.65` pre-releases will have versions `0.2.0.dev{BUILD}`. Pre-releases after `0.2.0` release will be labeled as `0.3.0.dev{BUILD}`."},{"id":"responsive-row-and-mobile-controls","metadata":{"permalink":"/docs/flet-doc/blog/responsive-row-and-mobile-controls","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-11-13-responsive-row-and-mobile-controls.md","source":"@site/blog/2022-11-13-responsive-row-and-mobile-controls.md","title":"ResponsiveRow and mobile controls","description":"We just released Flet 0.1.65 which is adding a bunch of mobile-optimized controls, fixing some bugs and introducing a new layout control - ResponsiveRow.","date":"2022-11-13T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":2.68,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"responsive-row-and-mobile-controls","title":"ResponsiveRow and mobile controls","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Flet versioning and pre-releases","permalink":"/docs/flet-doc/blog/flet-versioning-and-pre-releases"},"nextItem":{"title":"Matplotlib and Plotly charts","permalink":"/docs/flet-doc/blog/matplotlib-and-plotly-charts"}},"content":"We just released [Flet 0.1.65](https://pypi.org/project/flet/0.1.65/) which is adding a bunch of mobile-optimized controls, fixing some bugs and introducing a new layout control - `ResponsiveRow`.\\n\\n## `ResponsiveRow` control\\n\\n`ResponsiveRow` borrows the idea of grid layout from [Bootstrap](https://getbootstrap.com/docs/5.2/layout/grid/) web framework.\\n\\n`ResponsiveRow` allows aligning child controls to virtual columns. By default, a virtual grid has 12 columns, but that can be customized with `ResponsiveRow.columns` property.\\n\\nSimilar to `expand` property every control now has `col` property which allows specifying how many columns a control should span. For example, to make a layout consisting of two columns spanning 6 virtual columns each:\\n\\n```python\\nimport flet as ft\\n\\nft.ResponsiveRow([\\n    ft.Column(col=6, controls=ft.Text(\\"Column 1\\")),\\n    ft.Column(col=6, controls=ft.Text(\\"Column 2\\"))\\n])\\n```\\n\\n`ResponsiveRow` is \\"responsive\\" because it can adapt the size of its children to a changing screen (page, window) size. `col` property in the example above is a constant number which means the child will span 6 columns for any screen size.\\n\\nIf `ResponsiveRow`\'s child doesn\'t have `col` property specified it spans the maximum number of columns.\\n\\n`col` can be configured to have a different value for specific \\"breakpoints\\". Breakpoints are named dimension ranges:\\n\\n| Breakpoint | Dimension |\\n|---|---|\\n| xs | \\\\<576px |\\n| sm | \u2265576px |\\n| md | \u2265768px |\\n| lg | \u2265992px |\\n| xl | \u22651200px |\\n| xxl | \u22651400px |\\n\\nFor example, the following example collapses content into a single column on a mobile device and takes two columns on larger screens:\\n\\n```python\\nimport flet as ft\\n\\nft.ResponsiveRow([\\n    ft.Column(col={\\"sm\\": 6}, controls=ft.Text(\\"Column 1\\")),\\n    ft.Column(col={\\"sm\\": 6}, controls=ft.Text(\\"Column 2\\"))\\n])\\n```\\n\\nHere is more elaborate example of responsive layout:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/responsive-row/responsive-layout.gif\\" className=\\"screenshot-100\\"/>\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def page_resize(e):\\n        pw.value = f\\"{page.width} px\\"\\n        pw.update()\\n\\n    page.on_resize = page_resize\\n\\n    pw = ft.Text(bottom=50, right=50, style=\\"displaySmall\\")\\n    page.overlay.append(pw)\\n    page.add(\\n        ft.ResponsiveRow(\\n            [\\n                ft.Container(\\n                    ft.Text(\\"Column 1\\"),\\n                    padding=5,\\n                    bgcolor=ft.Colors.YELLOW,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 2\\"),\\n                    padding=5,\\n                    bgcolor=ft.Colors.GREEN,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 3\\"),\\n                    padding=5,\\n                    bgcolor=ft.Colors.BLUE,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n                ft.Container(\\n                    ft.Text(\\"Column 4\\"),\\n                    padding=5,\\n                    bgcolor=ft.Colors.PINK_300,\\n                    col={\\"sm\\": 6, \\"md\\": 4, \\"xl\\": 2},\\n                ),\\n            ],\\n        ),\\n        ft.ResponsiveRow(\\n            [\\n                ft.TextField(label=\\"TextField 1\\", col={\\"md\\": 4}),\\n                ft.TextField(label=\\"TextField 2\\", col={\\"md\\": 4}),\\n                ft.TextField(label=\\"TextField 3\\", col={\\"md\\": 4}),\\n            ],\\n            run_spacing={\\"xs\\": 10},\\n        ),\\n    )\\n    page_resize(None)\\n\\nft.app(target=main)\\n```\\n\\n`ResponsiveRow` [docs](/docs/controls/responsiverow), [example](https://github.com/flet-dev/examples/blob/main/python/controls/responsive-row/responsive-layout.py).\\n\\n## Other new controls\\n\\nThis release adds new visual and non-visual controls requested by Flet community and also required to build UI of the upcoming [Flet Studio](/docs/cookbook/mobile-support#flet-studio-for-ios-and-android).\\n\\n### BottomSheet\\n\\nShows a modal Material Design bottom sheet:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/bottom-sheet/bottom-sheet-sample.gif\\" className=\\"screenshot-30\\"/>\\n\\n`BottomSheet` [docs](/docs/controls/bottomsheet), [example](https://github.com/flet-dev/examples/blob/main/python/controls/bottom-sheet/modal-bottom-sheet.py).\\n\\n### NavigationBar\\n\\nBottom Navigation bar which offers a persistent and convenient way to switch between primary destinations in an app:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/navigation-bar/navigation-bar-sample.gif\\" className=\\"screenshot-40\\"/>\\n\\n`NavigationBar` [docs](/docs/controls/navigationbar), [example](https://github.com/flet-dev/examples/blob/main/python/controls/navigation-bar/navigation-bar-sample.py).\\n\\n### Tooltip\\n\\nA tooltip control:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/tooltip/custom-tooltip.gif\\" className=\\"screenshot-30\\"/>\\n\\n`Tooltip` [docs](/docs/reference/types/tooltip), [example](https://github.com/flet-dev/examples/blob/main/python/controls/tooltip/custom-tooltip.py).\\n\\n### HapticFeedback\\n\\nAllows access to the haptic feedback (clicks and vibrates) interface on the device.\\n\\n`HapticFeedback` [docs](/docs/controls/hapticfeedback).\\n\\n### ShakeDetector\\n\\nA control to detect phone shakes. Based on [shake](https://pub.dev/packages/shake) widget.\\n\\n`ShakeDetector` [docs](/docs/controls/shakedetector).\\n\\n## Other improvements\\n\\n### Markdown code syntax highlight\\n\\n[Sample code](https://github.com/flet-dev/examples/blob/main/python/controls/markdown/markdown-code-highlight.py).\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/markdown/markdown-highlight.png\\" className=\\"screenshot-60\\"/>\\n\\n### Variable fonts support\\n\\nFlutter has finally supported [variable fonts](https://fonts.google.com/knowledge/introducing_type/introducing_variable_fonts) and we bring that into Flet too! \\n\\n[Sample code](https://github.com/flet-dev/examples/blob/main/python/controls/text/variable-weight-font.py).\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/text/variable-weight-font.gif\\" className=\\"screenshot-50\\" />\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"matplotlib-and-plotly-charts","metadata":{"permalink":"/docs/flet-doc/blog/matplotlib-and-plotly-charts","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-10-24-matplotlib-and-plotly-charts.md","source":"@site/blog/2022-10-24-matplotlib-and-plotly-charts.md","title":"Matplotlib and Plotly charts","description":"We are thrilled to introduce Matplotlib and Plotly charting controls in Flet 0.1.63!","date":"2022-10-24T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":1.265,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"matplotlib-and-plotly-charts","title":"Matplotlib and Plotly charts","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"ResponsiveRow and mobile controls","permalink":"/docs/flet-doc/blog/responsive-row-and-mobile-controls"},"nextItem":{"title":"Gesture detector","permalink":"/docs/flet-doc/blog/gesture-detector"}},"content":"We are thrilled to introduce Matplotlib and Plotly charting controls in [Flet 0.1.63](https://pypi.org/project/flet/0.1.63/)!\\n\\n[Matplotlib](https://matplotlib.org/) and [Plotly](https://plotly.com/python/) are the most recognized Python charting libraries with a ton of features. They are greatly compatible with other scientific Python libraries such as Numpy or Pandas.\\n\\nNo doubt, it would be nearly impossible to replicate their functionality as pure Flutter widgets. Fortunately, both Matplotlib and Plotly can export charts into various formats, such as SVG. On the other hand Flet can [display SVG images](https://github.com/flet-dev/examples/blob/main/python/controls/image/svg-image.py) and that gives a perfect combination - Flet charting controls for Matplotlib and Plotly!\\n\\nThe resulting solution works so great that it\'s possible to display almost any example from [Matplotlib](https://matplotlib.org/stable/gallery/index.html) and [Plotly](https://plotly.com/python/) galleries - your imagination is the only limit!\\n\\nPlot a [simple bar chart](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-barchart.py):\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/matplotlib-barchart.png\\" className=\\"screenshot-60\\"/>\\n\\na nice [scatter with legend](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-scatter.py):\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/matplotlib-scatter.png\\" className=\\"screenshot-60\\"/>\\n\\nor some multi-chart [contour plot](https://github.com/flet-dev/examples/blob/main/python/controls/charts/mpl-contour.py):\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/charts/matplotlib-contour.png\\" className=\\"screenshot-60\\"/>\\n\\nCheck the docs for Matplotlib and Plotly charting controls:\\n\\n* [MatplotlibChart](/docs/controls/matplotlibchart)\\n* [PlotlyChart](/docs/controls/plotlychart)\\n\\nExplore [Flet chart examples](https://github.com/flet-dev/examples/tree/main/python/controls/charts).\\n\\nLearn Python libraries by examples:\\n\\n* [Matplotlib gallery](https://matplotlib.org/stable/gallery/index.html)\\n* [Plotly gallery](https://plotly.com/python/)\\n\\nIn the future releases, we may add an interactive \\"toolbar\\" for Matplotlib charts by implementing a custom [backend](https://matplotlib.org/stable/users/explain/backends.html). Or maybe it\'s a great exercise for Flet users? \ud83d\ude09\\n\\nAlso, when it\'s time for Flet to support other languages we would need to re-visit charting to make it language-agnostic as the current charting implementation relies on Python libraries.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"gesture-detector","metadata":{"permalink":"/docs/flet-doc/blog/gesture-detector","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-10-11-gesture-detector.md","source":"@site/blog/2022-10-11-gesture-detector.md","title":"Gesture detector","description":"We\'ve just released Flet 0.1.62 with support of gestures processing!","date":"2022-10-11T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":1.115,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"gesture-detector","title":"Gesture detector","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Matplotlib and Plotly charts","permalink":"/docs/flet-doc/blog/matplotlib-and-plotly-charts"},"nextItem":{"title":"User authentication","permalink":"/docs/flet-doc/blog/user-authentication"}},"content":"We\'ve just released [Flet 0.1.62](https://pypi.org/project/flet/0.1.62/) with support of gestures processing!\\n\\nThere is a new control - [GestureDetector](/docs/controls/gesturedetector) which allows handling all sorts of gestures: single and double taps with a left (primary) and right (secondary) mouse (pointer) buttons, vertical, horizontal and bi-directional drags, zoom (pinch-in and pinch-out) gestures as well as hover events. Now, by wrapping it into `GestureDetector`, you can make any Flet control \\"clickable\\" and \\"draggable\\"!\\n\\nHere is a simple example of an app which allows you to drag containers inside a Stack:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gesture-detector/gesture-detector-demo.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    def on_pan_update(e: ft.DragUpdateEvent):\\n        e.control.top = max(0, e.control.top + e.delta_y)\\n        e.control.left = max(0, e.control.left + e.delta_x)\\n        e.control.update()\\n\\n    gd = ft.GestureDetector(\\n        mouse_cursor=ft.MouseCursor.MOVE,\\n        on_vertical_drag_update=on_pan_update,\\n        left=100,\\n        top=100,\\n        content=ft.Container(bgcolor=ft.Colors.BLUE, width=50, height=50, border_radius=5),\\n    )\\n\\n    page.add( ft.Stack([gd], expand=True))\\n\\nft.app(target=main)\\n```\\n\\nGesture detector is yet another great addition to a collection of Flet primitives that allows you to build apps limited only by your imagination. 2D drawing coming later this month is going to complete that ensemble!\\n\\nThat release wasn\'t about only gestures though - that was a \\"stabilization\\" release too. We fixed a number of bugs and added a bunch of other small features which you can [see here](https://github.com/flet-dev/flet/issues?q=is%3Aissue+milestone%3AControls-S2+is%3Aclosed).\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"user-authentication","metadata":{"permalink":"/docs/flet-doc/blog/user-authentication","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-09-27-user-authentication.md","source":"@site/blog/2022-09-27-user-authentication.md","title":"User authentication","description":"User authentication in Flet is here! \ud83c\udf89","date":"2022-09-27T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":2.86,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"user-authentication","title":"User authentication","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Gesture detector","permalink":"/docs/flet-doc/blog/gesture-detector"},"nextItem":{"title":"File picker and uploads","permalink":"/docs/flet-doc/blog/file-picker-and-uploads"}},"content":"import TOCInline from \'@theme/TOCInline\';\\n\\nUser authentication in Flet is here! \ud83c\udf89\\n\\nNow you can implement user authentication (\\"Login with X\\" buttons) in your Flet app using 3rd-party identity providers such as GitHub, Google, Azure, Auth0, LinkedIn and others:\\n\\n<img src=\\"/docs/flet-doc/img/docs/getting-started/authentication/github-oauth-authorize.png\\" className=\\"screenshot-40\\" />\\n\\nTraditionally, this release is not just about authentication, but it adds a ton of accompanying functionality and small improvements:\\n\\n<TOCInline toc={toc} maxHeadingLevel={2} />\\n\\n## Authentication\\n\\nFlet authentication features:\\n\\n* Works with Flet desktop, web and mobile apps.\\n* Using multiple authentication providers in one app.\\n* Built-in OAuth providers with automatic user details fetching:\\n  * GitHub\\n  * Azure\\n  * Google\\n  * Auth0\\n* Optional groups fetching.\\n* Automatic token refresh.\\n* Login with a saved token (\\"Remember me\\").\\n* Custom OAuth providers.\\n\\nA simple example on how to add \\"Login with GitHub\\" button to your Flet app:\\n\\n```python\\nimport os\\n\\nimport flet as ft\\nfrom flet.auth.providers.github_oauth_provider import GitHubOAuthProvider\\n\\ndef main(page: ft.Page):\\n\\n    provider = GitHubOAuthProvider(\\n        client_id=os.getenv(\\"GITHUB_CLIENT_ID\\"),\\n        client_secret=os.getenv(\\"GITHUB_CLIENT_SECRET\\"),\\n        redirect_url=\\"http://localhost:8550/api/oauth/redirect\\",\\n    )\\n\\n    def login_click(e):\\n        page.login(provider)\\n\\n    def on_login(e):\\n        print(\\"Access token:\\", page.auth.token.access_token)\\n        print(\\"User ID:\\", page.auth.user.id)\\n\\n    page.on_login = on_login\\n    page.add(ft.ElevatedButton(\\"Login with GitHub\\", on_click=login_click))\\n\\nft.app(target=main, port=8550, view=ft.AppView.WEB_BROWSER)\\n```\\n\\n:::note\\nBefore running the app set the secret environment variables in a command line:\\n\\n```\\n$ export GITHUB_CLIENT_ID=\\"<client_id>\\"\\n$ export GITHUB_CLIENT_SECRET=\\"<client_secret>\\"\\n```\\n:::\\n\\n[Read Authentication guide for more information and examples](/docs/cookbook/authentication).\\n\\n## Client storage\\n\\nFlet\'s client storage API that allows storing key-value data on a client side in a persistent storage. Flet implementation uses [`shared_preferences`](https://pub.dev/packages/shared_preferences) Flutter package.\\n\\nWriting data to the storage:\\n\\n```python\\npage.client_storage.set(\\"key\\", \\"value\\")\\n```\\n\\nReading data:\\n\\n```python\\nvalue = page.client_storage.get(\\"key\\")\\n```\\n\\n[Read Client storage guide for more information and examples](/docs/cookbook/client-storage).\\n\\n## Session storage\\n\\nFlet introduces an API for storing key-value data in user\'s session on a server side.\\n\\nWriting data to the session:\\n\\n```python\\npage.session.set(\\"key\\", \\"value\\")\\n```\\n\\nReading data:\\n\\n```python\\nvalue = page.session.get(\\"key\\")\\n```\\n\\n[Read Session storage guide for more information and examples](/docs/cookbook/session-storage)\\n\\n## Encryption API\\n\\nIn this release Flet introduces utility methods to encrypt and decrypt sensitive text data using symmetric algorithm (where the same key is used for encryption and decryption). It uses [Fernet](https://github.com/fernet/spec/blob/master/Spec.md) implementation from [cryptography](https://pypi.org/project/cryptography/) package, which is AES 128 with some additional hardening, plus PBKDF2 to derive encryption key from a user passphrase.\\n\\nEncrypting data:\\n\\n```python\\nfrom flet.security import encrypt, decrypt\\nsecret_key = \\"S3CreT!\\"\\nplain_text = \\"This is a secret message!\\"\\nencrypted_data = encrypt(plain_text, secret_key)\\n```\\n\\nDecrypting data:\\n\\n```python\\nfrom flet.security import encrypt, decrypt\\nsecret_key = \\"S3CreT!\\"\\nplain_text = decrypt(encrypted_data, secret_key)\\nprint(plain_text)\\n```\\n\\n[Continue reading for more information and examples](/docs/cookbook/encrypting-sensitive-data).\\n\\n## Other improvements\\n\\n* SVG image support ([example](https://github.com/flet-dev/examples/blob/main/python/controls/image/svg-image.py)) and new images properties:\\n  * [`Image.color`](/docs/controls/image#color)\\n  * [`Image.color_blend_mode`](/docs/controls/image#color_blend_mode)\\n  * [`Image.semantics_label`](/docs/controls/image#semantics_label)\\n  * [`Image.gapless_playback`](/docs/controls/image#gapless_playback)\\n* [`on_animation_end` callback](/docs/cookbook/animations#animation-end-callback) to chain animations.\\n* [`Container.clip_behavior` property](/docs/controls/container#clip_behavior).\\n* [`page.window.bgcolor`](/docs/reference/types/window#bgcolor) to make cool transparent app window:\\n\\n```python\\nimport flet as ft\\ndef main(page: ft.Page):\\n    page.window_bgcolor = ft.Colors.TRANSPARENT\\n    page.bgcolor=ft.Colors.TRANSPARENT\\n    page.window_title_bar_hidden = True\\n    page.window_frameless = True\\n    page.window_left = 400\\n    page.window_top = 400\\n    page.add(ft.ElevatedButton(\\"I\'m a floating button!\\"))\\nft.app(target=main)\\n```\\n\\n* [`page.get_clipboard()`](/docs/controls/page#get_clipboard)\\n* [`page.launch_url()`](/docs/controls/page#launch_urlurl) - better control with additional arguments:\\n    * `web_window_name` - window tab/name to open URL in: `_self` - the same tab, `_blank` - a new tab or `<your name>` - a named tab.\\n    * `web_popup_window` - set to `True` to display a URL in a browser popup window. Default is `False`.\\n    * `window_width` - optional, popup window width.\\n    * `window_height` - optional, popup window height.\\n* [`page.window.to_front()`](/docs/reference/types/window#to_front)\\n* [`page.close_in_app_web_view()`](/docs/controls/page#close_in_app_web_view)\\n\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), integrate auth in your app and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"file-picker-and-uploads","metadata":{"permalink":"/docs/flet-doc/blog/file-picker-and-uploads","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-09-02-file-picker-and-uploads.md","source":"@site/blog/2022-09-02-file-picker-and-uploads.md","title":"File picker and uploads","description":"Finally, File picker with uploads has arrived! \ud83c\udf89","date":"2022-09-02T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":3.79,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"file-picker-and-uploads","title":"File picker and uploads","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"User authentication","permalink":"/docs/flet-doc/blog/user-authentication"},"nextItem":{"title":"Fun with animations","permalink":"/docs/flet-doc/blog/fun-with-animations"}},"content":"Finally, File picker with uploads has arrived! \ud83c\udf89\\n\\nFile picker control opens a native OS dialog for selecting files and directories. It\'s based on a fantastic [file_picker](https://pub.dev/packages/file_picker) Flutter package.\\n\\nIt works on all platforms: Web, macOS, Window, Linux, iOS and Android.\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/file-picker/file-picker-all-modes-demo.png\\" className=\\"screenshot-80\\" />\\n\\nCheck out [source code of the demo above](https://github.com/flet-dev/examples/blob/main/python/controls/file-picker/file-picker-all-modes.py).\\n\\nFile picker allows opening three dialogs:\\n\\n* **Pick files** - one or multiple, any files or only specific types.\\n* **Save file** - choose directory and file name.\\n* **Get directory** - select directory.\\n\\nWhen running Flet app in a browser only \\"Pick files\\" option is available and it\'s used for uploads only as it, obviously, doesn\'t return a full path to a selected file.\\n\\nWhere file picker really shines is a desktop! All three dialogs return full paths to selected files and directories - great assistance to your users!\\n\\n## Using file picker in your app\\n\\nIt is recommended to add file picker to [`page.overlay.controls`](/docs/controls/page#overlay) collection, so it doesn\'t affect the layout of your app. Despite file picker has 0x0 size it is still considered as a control when put into `Row` or `Column`.\\n\\n```python\\nimport flet as ft\\n\\nfile_picker = ft.FilePicker()\\npage.overlay.append(file_picker)\\npage.update()\\n```\\n\\nTo open file picker dialog call one of the three methods:\\n\\n* `pick_files()`\\n* `save_file()`\\n* `get_directory_path()`\\n\\nLambda works pretty nice for that:\\n\\n```python\\nft.ElevatedButton(\\"Choose files...\\",\\n    on_click=lambda _: file_picker.pick_files(allow_multiple=True))\\n```\\n\\nWhen dialog is closed `FilePicker.on_result` event handler is called which event object has one of the following properties set:\\n\\n* `files` - \\"Pick files\\" dialog only, a list of selected files or `None` if dialog was cancelled.\\n* `path` - \\"Save file\\" and \\"Get directory\\" dialogs, a full path to a file or directory or `None` if dialog was cancelled.\\n\\n```python\\nimport flet as ft\\n\\ndef on_dialog_result(e: ft.FilePickerResultEvent):\\n    print(\\"Selected files:\\", e.files)\\n    print(\\"Selected file or directory:\\", e.path)\\n\\nfile_picker = ft.FilePicker(on_result=on_dialog_result)\\n```\\n\\nThe last result is always available in `FilePicker.result` property.\\n\\nCheck [File picker](/docs/controls/filepicker) control docs for all available dialog methods and their parameters.\\n\\n## Uploading files\\n\\nFile picker has built-in upload capabilities that work on all platforms and the web.\\n\\nTo upload one or more files you should call `FilePicker.pick_files()` first.\\nWhen the files are selected by the user they are not automatically uploaded anywhere, but instead their references are kept in the file picker state.\\n\\nTo perform an actual upload you should call `FilePicker.upload()` method and pass the list of files that need to be uploaded along with their upload URLs and upload method (`PUT` or `POST`):\\n\\n```python\\nimport flet as ft\\n\\ndef upload_files(e):\\n    upload_list = []\\n    if file_picker.result != None and file_picker.result.files != None:\\n        for f in file_picker.result.files:\\n            upload_list.append(\\n                FilePickerUploadFile(\\n                    f.name,\\n                    upload_url=page.get_upload_url(f.name, 600),\\n                )\\n            )\\n        file_picker.upload(upload_list)\\n\\nft.ElevatedButton(\\"Upload\\", on_click=upload_files)\\n```\\n\\n:::note\\nIf you need to separate uploads for each user you can specify a filename prepended with any number of directories in `page.get_upload_url()` call, for example:\\n\\n```python\\nupload_url = page.get_upload_url(f\\"/{username}/pictures/{f.name}\\", 600)\\n```\\n\\n`/{username}/pictures` directories will be automatically created inside `upload_dir` if not exist.\\n:::\\n\\n### Upload storage\\n\\nNotice the usage of `page.get_upload_url()` method - it generates a presigned upload URL for Flet\'s internal upload storage.\\n\\n:::note Use any storage for file uploads\\nYou can [generate presigned upload URL](https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-presigned-urls.html#generating-a-presigned-url-to-upload-a-file) for AWS S3 storage using boto3 library.\\n\\nThe same technique should work for [Wasabi](https://wasabi.com/), [Backblaze](https://www.backblaze.com/), [MinIO](https://min.io/) and any other  storage providers with S3-compatible API.\\n:::\\n\\nTo enable Flet saving uploaded files to a directory provide full or relative path to that directory in `flet.app()` call:\\n\\n```python\\nft.app(target=main, upload_dir=\\"uploads\\")\\n```\\n\\nYou can even put uploads inside \\"assets\\" directory, so uploaded files, e.g. pictures, docs or other media, can be accessed from a Flet client right away:\\n\\n```python\\nft.app(target=main, assets_dir=\\"assets\\", upload_dir=\\"assets/uploads\\")\\n```\\n\\nand somewhere in your app you can display uploaded picture with:\\n\\n```python\\npage.add(ft.Image(src=\\"/uploads/<some-uploaded-picture.png>\\"))\\n```\\n\\n### Upload progress\\n\\nOnce `FilePicker.upload()` method is called Flet client asynchronously starts uploading selected files one-by-one and reports the progress via `FilePicker.on_upload` callback.\\n\\nEvent object of `on_upload` event is an instance of `FilePickerUploadEvent` class with the following fields:\\n\\n* `file_name`\\n* `progress` - a value from `0.0` to `1.0`.\\n* `error`\\n\\nThe callback is called at least twice for every uploaded file: with `0` progress before upload begins and with `1.0` progress when upload is finished. For files larger than 1 MB a progress is additionally reported for every 10% uploaded.\\n\\nCheck that [example](https://github.com/flet-dev/examples/blob/main/python/controls/file-picker/file-picker-upload-progress.py) demonstrating multiple file uploads:\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/file-picker/file-picker-multiple-uploads.png\\" className=\\"screenshot-40\\" />\\n\\nSee [File picker](/docs/controls/filepicker) control docs for all its properties and examples.\\n\\nUpgrade Flet module to the latest version (`pip install flet --upgrade`), give File Picker a try and [let us know](https://discord.gg/dzWXP8SHG8) what you think!\\n\\nEnjoy!"},{"id":"fun-with-animations","metadata":{"permalink":"/docs/flet-doc/blog/fun-with-animations","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-21-fun-with-animations.md","source":"@site/blog/2022-08-21-fun-with-animations.md","title":"Fun with animations","description":"Despite Flet release debuting animations support was released some time ago, we\'ve just finished documenting its new features! We all know if the feature is not documented it just doesn\'t exist! \ud83d\ude09","date":"2022-08-21T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":1.72,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"fun-with-animations","title":"Fun with animations","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"File picker and uploads","permalink":"/docs/flet-doc/blog/file-picker-and-uploads"},"nextItem":{"title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","permalink":"/docs/flet-doc/blog/gradients-button-textfield-styles"}},"content":"Despite Flet release debuting animations support was released some time ago, we\'ve just finished documenting its new features! We all know if the feature is not documented it just doesn\'t exist! \ud83d\ude09\\n\\nFlutter offers [multiple approaches](https://docs.flutter.dev/development/ui/animations) for creating animations such \\"implicit\\", \\"explicit\\", \\"tween\\", \\"stagered\\", \\"pre-canned\\" animations as well as displaying animation scenes prepared in Rive and Lottie editors.\\n\\nWe are starting with \\"implicit\\" animations which allows you to animate a control property by setting a target value; whenever that target value changes, the control animates the property from the old value to the new one.\\n\\n## Demo time\\n\\n<div style={{fontSize: \\"1.1rem\\", textAlign: \\"center\\", padding: \\"1rem\\" }}>\\n<a href=\\"https://flet-animation.herokuapp.com/\\">Check out this live demo!</a>\\n</div>\\n\\n<a href=\\"https://flet-animation.herokuapp.com/\\"><img src=\\"/docs/flet-doc/img/blog/animations/flet-animation-demo.gif\\" className=\\"screenshot-100\\" /></a>\\n\\n[Explore demo sources](https://github.com/flet-dev/flet-heroku-app). The demo is hosted on Heroku, by the way, so you can use it as a starting point for your own deployments.\\n\\n## Implicit animations\\n\\nImplicit animations can be enabled for the following control properties:\\n\\n* [Opacity](/docs/cookbook/animations#opacity-animation)\\n* [Rotation](/docs/cookbook/animations#rotation-animation) (new in this release)\\n* [Scale](/docs/cookbook/animations#scale-animation) (new in this release)\\n* [Offset](/docs/cookbook/animations#offset-animation) (new in this release)\\n* [Position](/docs/cookbook/animations#position-animation)\\n\\nAdditionally, all `Container` control properties [can be now animated](/docs/cookbook/animations#animated-container) and there is a new [`AnimatedSwitcher`](/docs/controls/animatedswitcher) control for animated transition between old a new content.\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/animated-switcher/animated-switcher.gif\\" className=\\"screenshot-20\\" />\\n\\n## Other new features\\n\\n### `Markdown` control\\n\\nAllows to render text in Markdown format. Supports various extensions: `CommonMark`, `GitHub Web` and `GitHub Flavored`.\\n\\n[See `Markdown` control docs](/docs/controls/markdown) for more information and examples.\\n\\n### URL launcher\\n\\n`page.launch_url(url)` method allows programmatically opening a URL in a new browser window, for example:\\n\\n```python\\npage.launch_url(\\"https://google.com\\")\\n```\\n\\nIt also works nice with `Markdown` control for opening links within markdown document.\\n\\n### Keyboard shortcuts\\n\\n`Page` now contains [`on_keyboard_event`](/docs/controls/page#on_keyboard_event) event handlet to globally intercept all keystrokes.\\n\\nCheck this [simple usage example](https://github.com/flet-dev/examples/blob/main/python/controls/page/keyboard-events.py).\\n\\n### Accessibility improvements\\n\\nWe added [Accessibility](/docs/cookbook/accessibility) section to the docs covering semantics support for screen readers.\\n\\n### `ShaderMark` control\\n\\nA control that applies a mask generated by a shader to its content. Allows making nice effects like [gradually fading out images](/docs/controls/shadermask#gradually-fade-out-image-to-the-bottom-edge).\\n\\nThat\'s it!\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"gradients-button-textfield-styles","metadata":{"permalink":"/docs/flet-doc/blog/gradients-button-textfield-styles","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-04-gradients-button-textfield-styles.md","source":"@site/blog/2022-08-04-gradients-button-textfield-styles.md","title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","description":"We\'ve just released Flet 0.1.46 adding new exciting features:","date":"2022-08-04T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":3.38,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"gradients-button-textfield-styles","title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Fun with animations","permalink":"/docs/flet-doc/blog/fun-with-animations"},"nextItem":{"title":"Control Refs","permalink":"/docs/flet-doc/blog/control-refs"}},"content":"We\'ve just released [Flet 0.1.46](https://pypi.org/project/flet/0.1.46/) adding new exciting features:\\n\\n* Gradient backgrounds in Container\\n* Extensive styling for buttons, TextField and Dropdown controls\\n* ...and more\\n\\n## Gradient backgrounds\\n\\n### Linear gradient\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/linear-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport math\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=ft.LinearGradient(\\n                begin=ft.alignment.top_left,\\n                end=Alignment(0.8, 1),\\n                colors=[\\n                    \\"0xff1f005c\\",\\n                    \\"0xff5b0060\\",\\n                    \\"0xff870160\\",\\n                    \\"0xffac255e\\",\\n                    \\"0xffca485c\\",\\n                    \\"0xffe16b5c\\",\\n                    \\"0xfff39060\\",\\n                    \\"0xffffb56b\\",\\n                ],\\n                tile_mode=ft.GradientTileMode.MIRROR,\\n                rotation=math.pi / 3,\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`LinearGradient`](/docs/reference/types/lineargradient) docs for more information about `LinearGradient` properties.\\n\\n### Radial gradient\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/radial-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=ft.RadialGradient(\\n                center=Alignment(0.7, -0.6),\\n                radius=0.2,\\n                colors=[\\n                    \\"0xFFFFFF00\\",  # yellow sun\\n                    \\"0xFF0099FF\\",  # blue sky\\n                ],\\n                stops=[0.4, 1.0],\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`RadialGradient`](/docs/reference/types/radialgradient) docs for more information about `RadialGradient` properties.\\n\\n### Sweep gradient\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/sweep-gradient.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport math\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.Container(\\n            alignment=ft.alignment.center,\\n            gradient=SweepGradient(\\n                center=ft.alignment.center,\\n                start_angle=0.0,\\n                end_angle=math.pi * 2,\\n                colors=[\\n                    \\"0xFF4285F4\\",\\n                    \\"0xFF34A853\\",\\n                    \\"0xFFFBBC05\\",\\n                    \\"0xFFEA4335\\",\\n                    \\"0xFF4285F4\\",\\n                ],\\n                stops=[0.0, 0.25, 0.5, 0.75, 1.0],\\n            ),\\n            width=150,\\n            height=150,\\n            border_radius=5,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`SweepGradient`](/docs/reference/types/sweepgradient) docs for more information about `SweepGradient` properties.\\n\\n## Buttons styling\\n\\nThis Flet release introduces `style` property to all button controls which is an instance of `ButtonStyle` class.\\n`ButtonStyle` allows controlling all visual aspects of a button, such as shape, foreground, background and shadow colors, content padding, border width and radius!\\n\\nMoreover, each individual style attribute could be configured for a different \\"Material states\\" of a button, such as \\"hovered\\", \\"focused\\", \\"disabled\\" and others. For example, you can configure a different shape, background color for a hovered state and configure fallback values for all other states.\\n\\nCheck this \\"extreme\\" styling example:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/styled-button.gif\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\nfrom flet.border import BorderSide\\nfrom flet.buttons import RoundedRectangleBorder\\n\\ndef main(page: ft.Page):\\n\\n    page.add(\\n        ft.ElevatedButton(\\n            \\"Styled button 1\\",\\n            style=ft.ButtonStyle(\\n                color={\\n                    ft.MaterialState.HOVERED: ft.Colors.WHITE,\\n                    ft.MaterialState.FOCUSED: ft.Colors.BLUE,\\n                    ft.MaterialState.DEFAULT: ft.Colors.BLACK,\\n                },\\n                bgcolor={ft.MaterialState.FOCUSED: ft.Colors.PINK_200, \\"\\": ft.Colors.YELLOW},\\n                padding={ft.MaterialState.HOVERED: 20},\\n                overlay_color=ft.Colors.TRANSPARENT,\\n                elevation={\\"pressed\\": 0, \\"\\": 1},\\n                animation_duration=500,\\n                side={\\n                    ft.MaterialState.DEFAULT: BorderSide(1, ft.Colors.BLUE),\\n                    ft.MaterialState.HOVERED: BorderSide(2, ft.Colors.BLUE),\\n                },\\n                shape={\\n                    ft.MaterialState.HOVERED: RoundedRectangleBorder(radius=20),\\n                    ft.MaterialState.DEFAULT: RoundedRectangleBorder(radius=2),\\n                },\\n            ),\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n`ft.MaterialState.DEFAULT` state is a fallback style.\\n\\nButton shape could also be changed with `ButtonStyle.shape` property:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/button-shapes.png\\" className=\\"screenshot-30\\" />\\n\\n```python\\nimport flet as ft\\nfrom flet.buttons import (\\n    BeveledRectangleBorder,\\n    CircleBorder,\\n    ContinuousRectangleBorder,\\n    RoundedRectangleBorder,\\n    StadiumBorder,\\n)\\n\\ndef main(page: ft.Page):\\n    page.padding = 30\\n    page.spacing = 30\\n    page.add(\\n        ft.FilledButton(\\n            \\"Stadium\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.StadiumBorder(),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Rounded rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.RoundedRectangleBorder(radius=10),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Continuous rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.ContinuousRectangleBorder(radius=30),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Beveled rectangle\\",\\n            style=ft.ButtonStyle(\\n                shape=ft.BeveledRectangleBorder(radius=10),\\n            ),\\n        ),\\n        ft.FilledButton(\\n            \\"Circle\\",\\n            style=ft.ButtonStyle(shape=ft.CircleBorder(), padding=30),\\n        ),\\n    )\\n\\nft.app(target=main)\\n```\\n\\nCheck [`ElevatedButton.style`](/docs/controls/elevatedbutton#style) property docs for a complete description of `ButtonStyle` class and its properties.\\n\\n## TextField and Dropdown styling\\n\\nIt is now possible to configure text size, border style and corners radius for normal and focused states of `TextField` and `Dropdown` controls. `TextField` also allows configuring colors for a cursor and selection.\\n\\nAdditionally, the maximum length of entered into `TextField` can now be limited with `max_length` property.\\n\\nWe also introduced `capitalization` property for automatic capitalization of characters as you type them into `TextField`. You can choose from 4 capitalization strategies: `none` (default), `characters`, `words` and `sentences`.\\n\\nAn example of styled `TextField` with `max_length` and `capitalization`:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/styled-textfield.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.padding = 50\\n    page.add(\\n        ft.TextField(\\n            text_size=30,\\n            cursor_color=ft.Colors.RED,\\n            selection_color=ft.Colors.YELLOW,\\n            color=ft.Colors.PINK,\\n            bgcolor=ft.Colors.BLACK26,\\n            filled=True,\\n            focused_color=ft.Colors.GREEN,\\n            focused_bgcolor=ft.Colors.CYAN_200,\\n            border_radius=30,\\n            border_color=ft.Colors.GREEN_800,\\n            focused_border_color=ft.Colors.GREEN_ACCENT_400,\\n            max_length=20,\\n            capitalization=\\"characters\\",\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\nAn example of styled `Dropdown` control:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/styled-dropdown.gif\\" className=\\"screenshot-50\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.padding = 50\\n    page.add(\\n        ft.Dropdown(\\n            options=[\\n                ft.dropdown.Option(\\"a\\", \\"Item A\\"),\\n                ft.dropdown.Option(\\"b\\", \\"Item B\\"),\\n                ft.dropdown.Option(\\"c\\", \\"Item C\\"),\\n            ],\\n            border_radius=30,\\n            filled=True,\\n            border_color=ft.Colors.TRANSPARENT,\\n            bgcolor=ft.Colors.BLACK12,\\n            focused_bgcolor=ft.Colors.BLUE_100,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n## Other changes\\n\\n`IconButton` got `selected` state which plays nice with a new `style`.\\n\\nThis is an example of a toggle icon button:\\n\\n<img src=\\"/docs/flet-doc/img/blog/gradients/toggle-icon-button.gif\\" className=\\"screenshot-20\\" />\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    def toggle_icon_button(e):\\n        e.control.selected = not e.control.selected\\n        e.control.update()\\n\\n    page.add(\\n        ft.IconButton(\\n            icon=ft.Icons.BATTERY_1_BAR,\\n            selected_icon=ft.Icons.BATTERY_FULL,\\n            on_click=toggle_icon_button,\\n            selected=False,\\n            style=ft.ButtonStyle(color={\\"selected\\": ft.Colors.GREEN, \\"\\": ft.Colors.RED}),\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"control-refs","metadata":{"permalink":"/docs/flet-doc/blog/control-refs","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-08-03-control-refs.md","source":"@site/blog/2022-08-03-control-refs.md","title":"Control Refs","description":"Flet controls are objects and to access their properties we need to keep references (variables) to those objects.","date":"2022-08-03T00:00:00.000Z","tags":[{"inline":true,"label":"how-to","permalink":"/docs/flet-doc/blog/tags/how-to"}],"readingTime":2.065,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"control-refs","title":"Control Refs","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["how-to"]},"unlisted":false,"prevItem":{"title":"Beautiful gradients, button styles and TextField rounded corners in a new Flet release","permalink":"/docs/flet-doc/blog/gradients-button-textfield-styles"},"nextItem":{"title":"Flet Mobile Strategy","permalink":"/docs/flet-doc/blog/flet-mobile-strategy"}},"content":"Flet controls are objects and to access their properties we need to keep references (variables) to those objects.\\n\\nConsider the following example:\\n\\n```python {6-8,18,19,21}\\nimport flet as ft\\n\\ndef main(page):\\n\\n    first_name = ft.TextField(label=\\"First name\\", autofocus=True)\\n    last_name = ft.TextField(label=\\"Last name\\")\\n    greetings = ft.Column()\\n\\n    def btn_click(e):\\n        greetings.controls.append(ft.Text(f\\"Hello, {first_name.value} {last_name.value}!\\"))\\n        first_name.value = \\"\\"\\n        last_name.value = \\"\\"\\n        page.update()\\n        first_name.focus()\\n\\n    page.add(\\n        first_name,\\n        last_name,\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        greetings,\\n    )\\n\\nft.app(target=main)\\n```\\n\\nIn the very beginning of `main()` method we create three controls which we are going to use in button\'s `on_click` handler: two `TextField` for first and last names and a `Column` - container for greeting messages. We create controls with all their properties set and in the end of `main()` method, in `page.add()` call, we use their references (variables).\\n\\nWhen more and mode controls and event handlers added it becomes challenging to keep all control definitions in one place, so they become scattered across `main()` body. Glancing at `page.add()` parameters it\'s hard to imagine (without constant jumping to variable definitions in IDE) what would the end form look like:\\n\\n```python {2-5}\\n    page.add(\\n        first_name,\\n        last_name,\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        greetings,\\n    )\\n```\\n\\nIs `first_name` a TextField, does it have autofocus set? Is greetings a `Row` or a `Column`?\\n\\n## `Ref` class\\n\\nFlet provides `Ref` utility class which allows to define a reference to the control, use that reference in event handlers and set the reference to a real control later, while building a tree. The idea comes from [React](https://reactjs.org/docs/refs-and-the-dom.html).\\n\\nTo define a new typed control reference:\\n\\n```python\\nfirst_name = ft.Ref[ft.TextField]()\\n```\\n\\nTo access referenced control (control de-reference) use `Ref.current` property:\\n\\n```python\\n# empty first name\\nfirst_name.current.value = \\"\\"\\n```\\n\\nTo assign control to a reference set `Control.ref` property to a reference:\\n\\n```python {2}\\npage.add(\\n    ft.TextField(ref=first_name, label=\\"First name\\", autofocus=True)\\n)\\n```\\n\\n:::note\\nAll Flet controls have `ref` property.\\n:::\\n\\nWe could re-write our program to use references:\\n\\n```python {7-9,21-24}\\nimport flet as ft\\n\\n\\ndef main(page):\\n\\n    first_name = ft.Ref[ft.TextField]()\\n    last_name = ft.Ref[ft.TextField]()\\n    greetings = ft.Ref[ft.Column]()\\n\\n    def btn_click(e):\\n        greetings.current.controls.append(\\n            ft.Text(f\\"Hello, {first_name.current.value} {last_name.current.value}!\\")\\n        )\\n        first_name.current.value = \\"\\"\\n        last_name.current.value = \\"\\"\\n        page.update()\\n        first_name.current.focus()\\n\\n    page.add(\\n        ft.TextField(ref=first_name, label=\\"First name\\", autofocus=True),\\n        ft.TextField(ref=last_name, label=\\"Last name\\"),\\n        ft.ElevatedButton(\\"Say hello!\\", on_click=btn_click),\\n        ft.Column(ref=greetings),\\n    )\\n\\nft.app(target=main)\\n```\\n\\nNow we can clearly see in `page.add()` the structure of the page and all the controls it\'s built of.\\n\\nYes, the logic becomes a little bit more verbose as you need to add `.current.` to access ref\'s control, but it\'s a matter of personal preference :)\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"flet-mobile-strategy","metadata":{"permalink":"/docs/flet-doc/blog/flet-mobile-strategy","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-24-flet-mobile-strategy.md","source":"@site/blog/2022-07-24-flet-mobile-strategy.md","title":"Flet Mobile Strategy","description":"Flet project has received a lot of attention recently and we would like to thank all the developers who tried Flet and have been spreading the word about it in the communities! Your support motivates us to move Flet project forward with faster pace!","date":"2022-07-24T00:00:00.000Z","tags":[{"inline":true,"label":"product","permalink":"/docs/flet-doc/blog/tags/product"}],"readingTime":3.205,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"flet-mobile-strategy","title":"Flet Mobile Strategy","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["product"]},"unlisted":false,"prevItem":{"title":"Control Refs","permalink":"/docs/flet-doc/blog/control-refs"},"nextItem":{"title":"Navigation and Routing","permalink":"/docs/flet-doc/blog/navigation-and-routing"}},"content":"Flet project has received a lot of attention recently and we would like to thank all the developers who tried Flet and have been spreading the word about it in the communities! Your support motivates us to move Flet project forward with faster pace!\\n\\nNew Flet developers are constantly asking if there is a way to package Flet program to an `.apk` file to deploy to Android devices or `.ipa` to deploy to iOS.\\n\\nIn this post I would like to share our vision for Flet going mobile and provide a roadmap.\\n\\n## Server-Driven UI\\n\\nFlet is a Server-driven UI (SDUI) framework. SDUI is an emerging technology which is the best described in [Technology Radar post](https://www.thoughtworks.com/en-ca/radar/techniques/server-driven-ui):\\n\\n> Server-driven UI separates the rendering into a generic container in the mobile app while the structure and data for each view is provided by the server. This means that changes that once required a round trip to an app store can now be accomplished via simple changes to the responses the server sends.\\n\\nCompanies like [DoorDash](https://doordash.engineering/2021/08/24/improving-development-velocity-with-generic-server-driven-ui-components/), [Airbnb](https://medium.com/airbnb-engineering/a-deep-dive-into-airbnbs-server-driven-ui-system-842244c5f5), [Lyft](https://podcasts.apple.com/us/podcast/server-driven-ui-with-kevin-fang-jeff-hurray/id1453587931?i=1000509742062) and others have been successfully implementing Server-driven UI in their mobile apps to reduce time-to-market.\\n\\n### Flet approach\\n\\nFlet is going to implement Server-Driven UI approach where program written in Python or other language is running on the server and only a thin client - either standalone Flutter app (`.apk` or `.ipa` package) in app store or a Flutter widget as a part of another app - is delivered to a mobile:\\n\\n<img src=\\"/docs/flet-doc/img/docs/getting-started/flet-highlevel-diagram.svg\\" className=\\"screenshot-100\\" />\\n\\nOnce SDUI experience is ready we\'ll start working on a [standalone mobile package](#standalone-mobile-package-for-flet-app).\\n\\n## Roadmap\\n\\nTo provide the best experience for Flet apps on mobile platforms, we plan to release the following items by the end of this year:\\n\\n### Flet widget for Flutter\\n\\nThe first step we are going to do is to separate Flet client into a Flutter widget and publish the package at https://pub.dev.\\nFlet widget could be then integrated by mobile developers into existing or new Flutter apps for adding dynamic server-driven UI experiences to the core app functionality. A new Flutter app could be also created with a single Flet widget just for the purpose of hosting a complete Flet app.\\n\\nDevelopers will follow Flutter guide for packaging, signing and distributing their apps to [Android](https://docs.flutter.dev/deployment/android), [iOS](https://docs.flutter.dev/deployment/ios), [Linux](https://docs.flutter.dev/deployment/linux), [macOS](https://docs.flutter.dev/deployment/macos) or [Windows](https://docs.flutter.dev/deployment/windows) platforms.\\n\\nFlet team will provide sample CI pipelines to automate packaging, signing and publishing of Flutter apps.\\n\\n### Flet Studio for iOS and Android\\n\\nThe next step is a standalone \\"Flet Studio\\" app (the name is not final) in App Store and Google Play for \\"testing mobile experiences developed with Flet framework\\". Developers or beta testers will be able to \\"register\\" URL of their hosted Flet app within Flet Studio and instantly see how it performs on a mobile device.\\n\\n### White-labeled Flet mobile app\\n\\nWe are going to provide a guide and CI pipeline for automatic publishing of white-labeled Flet app to a user App Store or Google Play account. This app will be \\"pinned\\" to a specific app URL and could additionally bundle app assets (media, fonts) to minimize network usage.\\n\\n### Standalone mobile package for Flet app\\n\\nWe are going to investigate the way and develop a prototype for bundling together Flet framework, user program, language runtime and all dependencies into a standalone mobile package (`.apk` or `.ipa` package), so Flet program does not require a web server.\\n\\n### Embedding Flet into native apps\\n \\nWe are going to provide a guide, sample apps and CI pipeline to integrate Flet widget into existing native Android and iOS apps (not developed with Flutter) using [Flutter Add-to-App](https://docs.flutter.dev/development/add-to-app) feature. [Put Flutter to work](https://medium.com/flutter/put-flutter-to-work-95f5fdcc592e) article gives a real-world example on how to integrate Flutter into existing mobile app.\\n\\nThis is the current plan.\\n\\nIn the meantime, [give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"navigation-and-routing","metadata":{"permalink":"/docs/flet-doc/blog/navigation-and-routing","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-23-navigation-and-routing.md","source":"@site/blog/2022-07-23-navigation-and-routing.md","title":"Navigation and Routing","description":"Flet 0.1.42 has been released with navigation and routing!","date":"2022-07-23T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":4.025,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"navigation-and-routing","title":"Navigation and Routing","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Flet Mobile Strategy","permalink":"/docs/flet-doc/blog/flet-mobile-strategy"},"nextItem":{"title":"New release: Drag and Drop, absolute positioning and clickable container","permalink":"/docs/flet-doc/blog/drag-and-drop-release"}},"content":"[Flet 0.1.42](https://pypi.org/project/flet/0.1.42/) has been released with navigation and routing!\\n\\nNavigation and routing is an essential feature of Single Page Applications (SPA) which allows organizing application user interface into virtual pages (views) and \\"navigate\\" between them while application URL reflects the current state of the app.\\n\\nFor mobile apps navigation and routing serves as a [deep linking](https://docs.flutter.dev/development/ui/navigation/deep-linking) to specific application parts.\\n\\nWell, it took [more efforts](https://github.com/flet-dev/flet/pull/95/files) than expected to add navigation and routing into Flet as the implementation is based on [Navigator 2.0](https://medium.com/flutter/learning-flutters-new-navigation-and-routing-system-7c9068155ade) Flutter API and required to replace Flet\'s \\"Page\\" abstraction with \\"Page and Views\\". Flutter\'s newer navigation and routing API has substantial improvements such as:\\n\\n1. Programmatic control over history stack.\\n2. An easy way to intercept a call to \\"Back\\" button in AppBar.\\n3. Robust synchronization with browser history.\\n\\n<img src=\\"/docs/flet-doc/img/docs/navigation-routing/routing-app-example.gif\\" className=\\"screenshot-60\\" />\\n\\nExplore [source code](https://github.com/flet-dev/examples/blob/main/python/apps/routing-navigation/building-views-on-route-change.py) of the example above.\\n\\n## Page route\\n\\nPage route is a portion of application URL after `#` symbol:\\n\\n<img src=\\"/docs/flet-doc/img/docs/navigation-routing/page-address-route.png\\" className=\\"screenshot-50\\" />\\n\\nDefault application route, if not set in application URL by the user, is `/`. All routes start with `/`, for example `/store`, `/authors/1/books/2`.\\n\\nApplication route can be obtained by reading `page.route` property, for example:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nGrab application URL, open a new browser tab, paste the URL, modify its part after `#` to `/test` and hit enter. You should see \\"Initial route: /test\\".\\n\\nEvery time the route in the URL is changed (by editing the URL or navigating browser history with Back/Forward buttons) Flet calls `page.on_route_change` event handler:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\n    def route_change(route):\\n        page.add(ft.Text(f\\"New route: {route}\\"))\\n\\n    page.on_route_change = route_change\\n    page.update()\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nNow try updating URL hash a few times and then use Back/Forward buttons! You should see a new message added to a page each time the route changes:\\n\\n<img src=\\"/docs/flet-doc/img/docs/navigation-routing/page-route-change-event.gif\\" className=\\"screenshot-60\\" />\\n\\nRoute can be changed programmatically, by updating `page.route` property:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.add(ft.Text(f\\"Initial route: {page.route}\\"))\\n\\n    def route_change(route):\\n        page.add(ft.Text(f\\"New route: {route}\\"))\\n\\n    def go_store(e):\\n        page.route = \\"/store\\"\\n        page.update()\\n\\n    page.on_route_change = route_change\\n    page.add(ft.ElevatedButton(\\"Go to Store\\", on_click=go_store))\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nClick \\"Go to Store\\" button and you\'ll see application URL is changed and a new item is pushed in a browser history. You can use browser \\"Back\\" button to navigate to a previous route.\\n\\n## Page views\\n\\nFlet\'s [Page](/docs/controls/page) now is not just a single page, but a container for [View](/docs/controls/view) layered on top of each other like a sandwich:\\n\\n<img src=\\"/docs/flet-doc/img/docs/navigation-routing/page-views.svg\\" className=\\"screenshot-100\\" />\\n\\nA collection of views represents navigator history. Page has [`page.views`](/docs/controls/page#views) property to access views collection.\\n\\nThe last view in the list is the one currently displayed on a page. Views list must have at least one element (root view).\\n\\nTo simulate a transition between pages change `page.route` and add a new `View` in the end of `page.view` list.\\n\\nPop the last view from the collection and change route to a \\"previous\\" one in [`page.on_view_pop`](/docs/controls/page#on_view_pop) event handler to go back.\\n\\n## Building views on route change\\n\\nTo build a reliable navigation there must be a single place in the program which builds a list of views depending on the current route. Other words, navigation history stack (represented by the list of views) must be a function of a route.\\n\\nThis place is [`page.on_route_change`](/docs/controls/page#on_route_change) event handler.\\n\\nLet\'s put everything together into a complete example which allows navigating between two pages:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Routes Example\\"\\n\\n    def route_change(route):\\n        page.views.clear()\\n        page.views.append(\\n            ft.View(\\n                \\"/\\",\\n                [\\n                    ft.AppBar(title=ft.Text(\\"Flet app\\"), bgcolor=ft.Colors.SURFACE_VARIANT),\\n                    ft.ElevatedButton(\\"Visit Store\\", on_click=lambda _: page.go(\\"/store\\")),\\n                ],\\n            )\\n        )\\n        if page.route == \\"/store\\":\\n            page.views.append(\\n                ft.View(\\n                    \\"/store\\",\\n                    [\\n                        ft.AppBar(title=ft.Text(\\"Store\\"), bgcolor=ft.Colors.SURFACE_VARIANT),\\n                        ft.ElevatedButton(\\"Go Home\\", on_click=lambda _: page.go(\\"/\\")),\\n                    ],\\n                )\\n            )\\n        page.update()\\n\\n    def view_pop(view):\\n        page.views.pop()\\n        top_view = page.views[-1]\\n        page.go(top_view.route)\\n\\n    page.on_route_change = route_change\\n    page.on_view_pop = view_pop\\n    page.go(page.route)\\n\\n\\nft.app(target=main, view=ft.AppView.WEB_BROWSER)\\n```\\n\\nTry navigating between pages using \\"Visit Store\\" and \\"Go Home\\" buttons, Back/Forward browser buttons, manually changing route in the URL - it works no matter what! :)\\n\\n:::note\\nTo \\"navigate\\" between pages we used [`page.go(route)`](/docs/controls/page#goroute) - a helper method that updates [`page.route`](/docs/controls/page#route), calls [`page.on_route_change`](/docs/controls/page#on_route_change) event handler to update views and finally calls `page.update()`.\\n:::\\n\\nNotice the usage of [`page.on_view_pop`](/docs/controls/page#on_view_pop) event handler. It fires when the user clicks automatic \\"Back\\" button in [`AppBar`](/docs/controls/appbar) control. In the handler we remove the last element from views collection and navigate to view\'s root \\"under\\" it.\\n\\n## Route templates\\n\\nFlet offers [`TemplateRoute`](https://github.com/flet-dev/flet/blob/main/sdk/python/packages/flet-core/src/flet_core/template_route.py) - an utility class based on [repath](https://github.com/nickcoutsos/python-repath) library which allows matching ExpressJS-like routes and parsing their parameters, for example `/account/:account_id/orders/:order_id`.\\n\\n`TemplateRoute` plays great with route change event:\\n\\n```python\\ntroute = TemplateRoute(page.route)\\n\\nif troute.match(\\"/books/:id\\"):\\n    print(\\"Book view ID:\\", troute.id)\\nelif troute.match(\\"/account/:account_id/orders/:order_id\\"):\\n    print(\\"Account:\\", troute.account_id, \\"Order:\\", troute.order_id)\\nelse:\\n    print(\\"Unknown route\\")\\n```\\n\\nYou can read more about template syntax supported by `repath` library [here](https://github.com/nickcoutsos/python-repath#parameters).\\n\\nThat\'s all for today!\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"drag-and-drop-release","metadata":{"permalink":"/docs/flet-doc/blog/drag-and-drop-release","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-07-14-drag-and-drop-release.md","source":"@site/blog/2022-07-14-drag-and-drop-release.md","title":"New release: Drag and Drop, absolute positioning and clickable container","description":"We have just released Flet 0.1.41 with drag-and-drop support and other neat features such as absolute positioning of controls inside stack and clickable container!","date":"2022-07-14T00:00:00.000Z","tags":[{"inline":true,"label":"release","permalink":"/docs/flet-doc/blog/tags/release"}],"readingTime":1.085,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"drag-and-drop-release","title":"New release: Drag and Drop, absolute positioning and clickable container","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["release"]},"unlisted":false,"prevItem":{"title":"Navigation and Routing","permalink":"/docs/flet-doc/blog/navigation-and-routing"},"nextItem":{"title":"Using custom fonts in a Flet app","permalink":"/docs/flet-doc/blog/using-custom-fonts-in-flet-app"}},"content":"We have just released [Flet 0.1.41](https://pypi.org/project/flet/0.1.41/) with drag-and-drop support and other neat features such as absolute positioning of controls inside stack and clickable container!\\n\\n## Drag and Drop\\n\\nMaking drag-and-drop in Flet is a real joy - thanks to a smart drag-and-drop implementation in Flutter! You just have \\"draggable\\" control which could be dragged to a \\"drag target\\" which calls `on_accept` event handler when draggable is dropped.\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/drag-and-drop/drag-and-drop-colors.gif\\" className=\\"screenshot-50\\" />\\n\\nTake a look at [Drag-and-Drop example](https://github.com/flet-dev/examples/blob/main/python/controls/drag-and-drop/drag-drop-colors.py).\\n\\nExplore [`Draggable`](/docs/controls/draggable) and [`DragTarget`](/docs/controls/dragtarget) controls, their properties and events.\\n\\n## Absolute positioning inside Stack\\n\\nAll visible controls now have `left` `top`, `right` and `bottom` properties to let them be absolutely positioned inside [`Stack`](/docs/controls/stack), for example:\\n\\n```python {13-17}\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n\\n    page.horizontal_alignment = ft.CrossAxisAlignment.CENTER\\n    page.vertical_alignment = ft.MainAxisAlignment.CENTER\\n\\n    page.add(\\n        ft.Container(\\n            ft.Stack(\\n                [\\n                    ft.Text(\\"1\\", color=ft.Colors.WHITE),\\n                    ft.Text(\\"2\\", color=ft.Colors.WHITE, right=0),\\n                    ft.Text(\\"3\\", color=ft.Colors.WHITE, right=0, bottom=0),\\n                    ft.Text(\\"4\\", color=ft.Colors.WHITE, left=0, bottom=0),\\n                    ft.Text(\\"5\\", color=ft.Colors.WHITE, left=40, top=35),\\n                ]\\n            ),\\n            border_radius=8,\\n            padding=5,\\n            width=100,\\n            height=100,\\n            bgcolor=ft.Colors.BROWN_700,\\n        )\\n    )\\n\\nft.app(target=main)\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/drag-and-drop/absolute-positioned-numbers.png\\" className=\\"screenshot-30\\" />\\n\\n## Clickable container\\n\\n[`Container`](/docs/controls/container) control has got `on_click` event which allows you to make a button from any control and with a beautiful material ripple effect when `ink` is set to `True`!\\n\\n<img src=\\"/docs/flet-doc/img/docs/controls/container/clickable-container.gif\\" className=\\"screenshot-70\\" />\\n\\nSee [source code](https://github.com/flet-dev/examples/blob/main/python/controls/container/clickable-container.py) for the example above.\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"using-custom-fonts-in-flet-app","metadata":{"permalink":"/docs/flet-doc/blog/using-custom-fonts-in-flet-app","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-06-12-using-custom-fonts-in-flet-app.md","source":"@site/blog/2022-06-12-using-custom-fonts-in-flet-app.md","title":"Using custom fonts in a Flet app","description":"You can now use your own fonts in a Flet app!","date":"2022-06-12T00:00:00.000Z","tags":[{"inline":true,"label":"how-to","permalink":"/docs/flet-doc/blog/tags/how-to"}],"readingTime":1.59,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"using-custom-fonts-in-flet-app","title":"Using custom fonts in a Flet app","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["how-to"]},"unlisted":false,"prevItem":{"title":"New release: Drag and Drop, absolute positioning and clickable container","permalink":"/docs/flet-doc/blog/drag-and-drop-release"},"nextItem":{"title":"Introducing Flet","permalink":"/docs/flet-doc/blog/introducing-flet"}},"content":"You can now use your own fonts in a Flet app!\\n\\nThe following font formats are supported:\\n\\n* `.ttc`\\n* `.ttf`\\n* `.otf`\\n\\nUse [`page.fonts`](/docs/controls/page#fonts) property to import fonts.\\n\\nSet `page.fonts` property to a dictionary where key is the font family name to refer that font and the value is the URL of the font file to import:\\n\\n```python\\ndef main(page: ft.Page):\\n    page.fonts = {\\n        \\"Kanit\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\\",\\n        \\"Aleo Bold Italic\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/aleo/Aleo-BoldItalic.ttf\\"\\n    }\\n    page.update()\\n\\n    # ...\\n```\\n\\nFont can be imported from external resource by providing an absolute URL or from application assets by providing relative URL and `assets_dir`.\\n\\nSpecify `assets_dir` in `flet.app()` call to set the location of assets that should be available to the application. `assets_dir` could be a relative to your `main.py` directory or an absolute path. For example, consider the following program structure:\\n\\n```\\n/assets\\n   /fonts\\n       /OpenSans-Regular.ttf\\nmain.py\\n```\\n\\n## Code sample\\n\\nThe following program loads \\"Kanit\\" font from GitHub and \\"Open Sans\\" from the assets. \\"Kanit\\" is set as a default app font and \\"Open Sans\\" is used for a specific Text control:\\n\\n```python\\nimport flet as ft\\n\\ndef main(page: ft.Page):\\n    page.title = \\"Custom fonts\\"\\n\\n    page.fonts = {\\n        \\"Kanit\\": \\"https://raw.githubusercontent.com/google/fonts/master/ofl/kanit/Kanit-Bold.ttf\\",\\n        \\"Open Sans\\": \\"fonts/OpenSans-Regular.ttf\\",\\n    }\\n\\n    page.theme = ft.Theme(font_family=\\"Kanit\\")\\n\\n    page.add(\\n        ft.Text(\\"This is rendered with Kanit font\\"),\\n        ft.Text(\\"This is Open Sans font example\\", font_family=\\"Open Sans\\"),\\n    )\\n\\nft.app(target=main, assets_dir=\\"assets\\")\\n```\\n\\n<img src=\\"/docs/flet-doc/img/blog/using-custom-fonts-in-flet-app/custom-fonts-example.png\\" className=\\"screenshot-50\\" />\\n\\n## Static vs Variable fonts\\n\\nAt the moment only [static](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide#standard_or_static_fonts) fonts are supported, i.e. fonts containing only one specific width/weight/style combination, for example \\"Open Sans Regular\\" or \\"Roboto Bold Italic\\".\\n\\n[Variable](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide#variable_fonts) fonts support is still [work in progress](https://github.com/flutter/flutter/issues/33709).\\n\\nHowever, if you need to use a variable font in your app you can create static \\"instantiations\\" at specific weights using [fonttools](https://pypi.org/project/fonttools/), then use those:\\n\\n    fonttools varLib.mutator ./YourVariableFont-VF.ttf wght=140 wdth=85\\n\\nTo explore available font features (e.g. possible options for `wght`) use [Wakamai Fondue](https://wakamaifondue.com/beta/) online tool.\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"},{"id":"introducing-flet","metadata":{"permalink":"/docs/flet-doc/blog/introducing-flet","editUrl":"https://github.com/flet-dev/website/edit/main/blog/2022-06-02-introducing-flet.md","source":"@site/blog/2022-06-02-introducing-flet.md","title":"Introducing Flet","description":"Today we announce the first release of Flet!","date":"2022-06-02T00:00:00.000Z","tags":[{"inline":true,"label":"news","permalink":"/docs/flet-doc/blog/tags/news"},{"inline":true,"label":"product","permalink":"/docs/flet-doc/blog/tags/product"}],"readingTime":1.08,"hasTruncateMarker":false,"authors":[{"name":"Feodor Fitsner","title":"Flet founder and developer","url":"https://github.com/FeodorFitsner","imageURL":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4"}],"frontMatter":{"slug":"introducing-flet","title":"Introducing Flet","author":"Feodor Fitsner","author_title":"Flet founder and developer","author_url":"https://github.com/FeodorFitsner","author_image_url":"https://avatars0.githubusercontent.com/u/5041459?s=400&v=4","tags":["news","product"]},"unlisted":false,"prevItem":{"title":"Using custom fonts in a Flet app","permalink":"/docs/flet-doc/blog/using-custom-fonts-in-flet-app"}},"content":"Today we announce the first release of Flet!\\n\\nFlet is a framework for building real-time web, desktop and mobile applications in Python.\\n\\nNo more complex architecture with JavaScript frontend, REST API backend, database, cache, etc. With Flet you just write a monolith stateful app in Python only and get multi-user, realtime Single-Page Application (SPA) or a mobile app.\\n\\nTo start developing with Flet, you just need your favorite IDE or text editor. No SDKs, no thousands of dependencies, no complex tooling - Flet has built-in web server with assets hosting and desktop clients.\\n\\nFlet UI is built with [Flutter](https://flutter.dev), so your app looks professional and can be delivered to any platform. Flet simplifies Flutter model by combining smaller \\"widgets\\" into ready-to-use \\"controls\\" with imperative programming model.\\nYou get all the power of Flutter without having to learn Dart!\\n\\nFlet app is deployed as a regular web app and can be instanly accessed with a browser or installed as a [PWA](https://web.dev/what-are-pwas/) on a mobile device. Web app also exposes an API that can be used by a Flet client (planned for [future releases](/roadmap)) running on iOS and Android and providing native mobile experience.\\n\\nSome examples:\\n\\n* [Greeter](https://github.com/flet-dev/examples/blob/main/python/apps/greeter/greeter.py)\\n* [Counter](https://github.com/flet-dev/examples/blob/main/python/apps/counter/counter.py)\\n* [To-Do](https://github.com/flet-dev/examples/blob/main/python/apps/todo/todo.py)\\n* [Icons Browser](https://github.com/flet-dev/examples/blob/main/python/apps/icons-browser/main.py) ([Online Demo](https://gallery.flet.dev/icons-browser/))\\n\\n[Give Flet a try](/docs) and [let us know](https://discord.gg/dzWXP8SHG8) what you think!"}]}}')}}]);