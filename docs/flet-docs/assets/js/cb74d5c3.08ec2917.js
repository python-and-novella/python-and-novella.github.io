"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[40634],{72200:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=t(74848),l=t(28453);const o={title:"PlotlyChart",sidebar_label:"PlotlyChart"},r=void 0,i={id:"controls/plotlychart",title:"PlotlyChart",description:"Displays Plotly chart.",source:"@site/docs/controls/plotlychart.md",sourceDirName:"controls",slug:"/controls/plotlychart",permalink:"/docs/flet-docs/docs/controls/plotlychart",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/controls/plotlychart.md",tags:[],version:"current",frontMatter:{title:"PlotlyChart",sidebar_label:"PlotlyChart"},sidebar:"docs",previous:{title:"PieChart",permalink:"/docs/flet-docs/docs/controls/piechart"},next:{title:"Animations",permalink:"/docs/flet-docs/docs/controls/animations"}},s={},c=[{value:"Examples",id:"examples",level:2},{value:"Line chart",id:"line-chart",level:3},{value:"Bar chart",id:"bar-chart",level:3},{value:"Pie chart",id:"pie-chart",level:3},{value:"Box chart",id:"box-chart",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>figure</code>",id:"figure",level:3},{value:"<code>original_size</code>",id:"original_size",level:3},{value:"<code>isolated</code>",id:"isolated",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n.p,{children:["Displays ",(0,a.jsx)(n.a,{href:"https://plotly.com/python/",children:"Plotly"})," chart."]}),"\n",(0,a.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,a.jsx)(n.h3,{id:"line-chart",children:"Line chart"}),"\n",(0,a.jsxs)(n.p,{children:["The following example is based on ",(0,a.jsx)(n.a,{href:"https://plotly.com/python/line-charts/",children:"original example from Plotly docs"}),"."]}),"\n",(0,a.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/plotly-linechart.png",className:"screenshot-60"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import plotly.express as px\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    df = px.data.gapminder().query("continent==\'Oceania\'")\n    fig = px.line(df, x="year", y="lifeExp", color="country")\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(main)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"bar-chart",children:"Bar chart"}),"\n",(0,a.jsxs)(n.p,{children:["The following example is based on ",(0,a.jsx)(n.a,{href:"https://plotly.com/python/bar-charts/",children:"original example from Plotly docs"}),"."]}),"\n",(0,a.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/plotly-barchart.png",className:"screenshot-60"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import plotly.express as px\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    df = px.data.gapminder().query("continent == \'Oceania\'")\n    fig = px.bar(\n        df,\n        x="year",\n        y="pop",\n        hover_data=["lifeExp", "gdpPercap"],\n        color="country",\n        labels={"pop": "population of Canada"},\n        height=400,\n    )\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(main)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"pie-chart",children:"Pie chart"}),"\n",(0,a.jsxs)(n.p,{children:["The following example is based on ",(0,a.jsx)(n.a,{href:"https://plotly.com/python/pie-charts/",children:"original example from Plotly docs"}),"."]}),"\n",(0,a.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/plotly-piechart.png",className:"screenshot-60"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'import plotly.graph_objects as go\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\ndef main(page: ft.Page):\n\n    labels = ["Oxygen", "Hydrogen", "Carbon_Dioxide", "Nitrogen"]\n    values = [4500, 2500, 1053, 500]\n\n    fig = go.Figure(data=[go.Pie(labels=labels, values=values)])\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(main)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"box-chart",children:"Box chart"}),"\n",(0,a.jsxs)(n.p,{children:["The following example is based on ",(0,a.jsx)(n.a,{href:"https://plotly.com/python/box-plots/",children:"original example from Plotly docs"}),"."]}),"\n",(0,a.jsx)("img",{src:"/docs/flet-docs/img/docs/controls/charts/plotly-boxchart.png",className:"screenshot-70"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import plotly.graph_objects as go\n\nimport flet as ft\nfrom flet.plotly_chart import PlotlyChart\n\n\ndef main(page: ft.Page):\n\n    x = ['day 1', 'day 1', 'day 1', 'day 1', 'day 1', 'day 1',\n        'day 2', 'day 2', 'day 2', 'day 2', 'day 2', 'day 2']\n\n    fig = go.Figure()\n\n    fig.add_trace(go.Box(\n        y=[0.2, 0.2, 0.6, 1.0, 0.5, 0.4, 0.2, 0.7, 0.9, 0.1, 0.5, 0.3],\n        x=x,\n        name='kale',\n        marker_color='#3D9970'\n    ))\n    fig.add_trace(go.Box(\n        y=[0.6, 0.7, 0.3, 0.6, 0.0, 0.5, 0.7, 0.9, 0.5, 0.8, 0.7, 0.2],\n        x=x,\n        name='radishes',\n        marker_color='#FF4136'\n    ))\n    fig.add_trace(go.Box(\n        y=[0.1, 0.3, 0.1, 0.9, 0.6, 0.6, 0.9, 1.0, 0.3, 0.6, 0.8, 0.5],\n        x=x,\n        name='carrots',\n        marker_color='#FF851B'\n    ))\n\n    fig.update_layout(\n        yaxis_title='normalized moisture',\n        boxmode='group' # group together boxes of the different traces for each value of x\n    )\n\n    page.add(PlotlyChart(fig, expand=True))\n\nft.app(main)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"properties",children:"Properties"}),"\n",(0,a.jsx)(n.h3,{id:"figure",children:(0,a.jsx)(n.code,{children:"figure"})}),"\n",(0,a.jsxs)(n.p,{children:["Plotly figure to draw - an instance of ",(0,a.jsx)(n.code,{children:"plotly.graph_objects.Figure"})," class."]}),"\n",(0,a.jsx)(n.h3,{id:"original_size",children:(0,a.jsx)(n.code,{children:"original_size"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"True"})," to display chart in original size. ",(0,a.jsx)(n.code,{children:"False"})," (default) to display a chart that fits configured bounds."]}),"\n",(0,a.jsx)(n.h3,{id:"isolated",children:(0,a.jsx)(n.code,{children:"isolated"})}),"\n",(0,a.jsxs)(n.p,{children:["Every time when a page or parent chart control are updated with ",(0,a.jsx)(n.code,{children:"page.update()"})," or ",(0,a.jsx)(n.code,{children:"Control.update()"})," methods respectively the chart is re-drawn by calling Plotly API. Frequent re-drawings of large charts could affect the performance of the entire Flet app."]}),"\n",(0,a.jsxs)(n.p,{children:["Set ",(0,a.jsx)(n.code,{children:"isolated"})," to ",(0,a.jsx)(n.code,{children:"True"})," to enable explicit chart updates. To re-draw the chart call its ",(0,a.jsx)(n.code,{children:"update()"})," method."]})]})}function p(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>i});var a=t(96540);const l={},o=a.createContext(l);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);