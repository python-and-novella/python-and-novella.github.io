"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[57166],{15239:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var t=s(74848),a=s(28453);const i={title:"Async apps",sidebar_label:"Async apps"},o=void 0,d={id:"getting-started/async-apps",title:"Async apps",description:"Flet app can be written as an async app and use asyncio and other Python async libraries. Calling coroutines is naturally supported in Flet, so you don't need to wrap them to run synchronously.",source:"@site/docs/getting-started/async-apps.md",sourceDirName:"getting-started",slug:"/getting-started/async-apps",permalink:"/docs/flet-doc/docs/getting-started/async-apps",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/getting-started/async-apps.md",tags:[],version:"current",frontMatter:{title:"Async apps",sidebar_label:"Async apps"},sidebar:"docs",previous:{title:"Testing on Android",permalink:"/docs/flet-doc/docs/getting-started/testing-on-android"},next:{title:"Publishing Flet app to multiple platforms",permalink:"/docs/flet-doc/docs/publish"}},l={},c=[{value:"Getting started with async",id:"getting-started-with-async",level:2},{value:"Control event handlers",id:"control-event-handlers",level:2},{value:"Async lambdas",id:"async-lambdas",level:3},{value:"Sleeping",id:"sleeping",level:2},{value:"Threading",id:"threading",level:2}];function r(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Flet app can be written as an async app and use ",(0,t.jsx)(n.code,{children:"asyncio"})," and other Python async libraries. Calling coroutines is naturally supported in Flet, so you don't need to wrap them to run synchronously."]}),"\n",(0,t.jsxs)(n.p,{children:["By default, Flet executes control event handlers in separate threads, but sometimes that could be an ineffective usage of CPU or it does nothing while waiting for a HTTP response or executing ",(0,t.jsx)(n.code,{children:"sleep()"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:['Asyncio, on the other hand, allows implementing concurrency in a single thread by switching execution context between "coroutines". This is especially important for apps that are going to be ',(0,t.jsx)(n.a,{href:"/docs/publish/web/static-website",children:"published as static websites"})," using ",(0,t.jsx)(n.a,{href:"https://pyodide.org/en/stable/",children:"Pyodide"}),". Pyodide is a Python runtime built as a WebAssembly (WASM) and running in the browser. At the time of writing it doesn't support ",(0,t.jsx)(n.a,{href:"https://github.com/pyodide/pyodide/issues/237",children:"threading"})," yet."]}),"\n",(0,t.jsx)(n.h2,{id:"getting-started-with-async",children:"Getting started with async"}),"\n",(0,t.jsxs)(n.p,{children:["You could mark ",(0,t.jsx)(n.code,{children:"main()"})," method of Flet app as ",(0,t.jsx)(n.code,{children:"async"})," and then use any asyncio API inside it:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import flet as ft\n\nasync def main(page: ft.Page):\n    await asyncio.sleep(1)\n    page.add(ft.Text("Hello, async world!"))\n\nft.app(main)\n'})}),"\n",(0,t.jsxs)(n.p,{children:["You can use ",(0,t.jsx)(n.code,{children:"await ft.app_async(main)"})," if Flet app is part of a larger app and called from ",(0,t.jsx)(n.code,{children:"async"})," code."]}),"\n",(0,t.jsx)(n.h2,{id:"control-event-handlers",children:"Control event handlers"}),"\n",(0,t.jsxs)(n.p,{children:["Control event handlers could be both sync and ",(0,t.jsx)(n.code,{children:"async"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"If a handler does not call any async methods it could be a regular sync method:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'def page_resize(e):\n    print("New page size:", page.window.width, page.window.height)\n\npage.on_resize = page_resize\n'})}),"\n",(0,t.jsx)(n.p,{children:"However, if a handler calls async logic it must be async too:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'async def main(page: ft.Page):\n\n    async def button_click(e):\n        await some_async_method()\n        page.add(ft.Text("Hello!"))\n\n    page.add(ft.ElevatedButton("Say hello!", on_click=button_click))\n\nft.app(main)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"async-lambdas",children:"Async lambdas"}),"\n",(0,t.jsx)(n.p,{children:"There are no async lambdas in Python. It's perfectly fine to have a lambda event handler in async app for simple things:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'page.on_error = lambda e: print("Page error:", e.data)\n'})}),"\n",(0,t.jsx)(n.p,{children:"but you can't have an async lambda, so an async event handler must be used."}),"\n",(0,t.jsx)(n.h2,{id:"sleeping",children:"Sleeping"}),"\n",(0,t.jsxs)(n.p,{children:["To delay code execution in async Flet app you should use ",(0,t.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep",children:(0,t.jsx)(n.code,{children:"asyncio.sleep()"})})," instead of ",(0,t.jsx)(n.code,{children:"time.sleep()"}),", for example:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport flet as ft\n\ndef main(page: ft.Page):\n    async def button_click(e):\n        await asyncio.sleep(1)\n        page.add(ft.Text("Hello!"))\n\n    page.add(\n        ft.ElevatedButton("Say hello with delay!", on_click=button_click)\n    )\n\nft.app(main)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"threading",children:"Threading"}),"\n",(0,t.jsxs)(n.p,{children:["To run something in the background use ",(0,t.jsx)(n.a,{href:"/docs/controls/page#run_taskhandler-args-kwargs",children:(0,t.jsx)(n.code,{children:"page.run_task()"})}),'. For example, "Countdown" custom control which is self-updating on background could be implemented as following:']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport flet as ft\n\nclass Countdown(ft.Text):\n    def __init__(self, seconds):\n        super().__init__()\n        self.seconds = seconds\n\n    def did_mount(self):\n        self.running = True\n        self.page.run_task(self.update_timer)\n\n    def will_unmount(self):\n        self.running = False\n\n    async def update_timer(self):\n        while self.seconds and self.running:\n            mins, secs = divmod(self.seconds, 60)\n            self.value = "{:02d}:{:02d}".format(mins, secs)\n            self.update()\n            await asyncio.sleep(1)\n            self.seconds -= 1\n\ndef main(page: ft.Page):\n    page.add(Countdown(120), Countdown(60))\n\nft.app(main)\n'})}),"\n",(0,t.jsx)("img",{src:"/img/docs/getting-started/user-control-countdown.gif",className:"screenshot-40"})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(r,{...e})}):r(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var t=s(96540);const a={},i=t.createContext(a);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);