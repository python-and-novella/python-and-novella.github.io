"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[65104],{28963:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var t=o(74848),i=o(28453);const s={title:"Packaging desktop app",sidebar_label:"Packaging desktop app"},a=void 0,r={id:"cookbook/packaging-desktop-app",title:"Packaging desktop app",description:"You can now use flet build command to package your Flet app into executable or install bundle for",source:"@site/docs/cookbook/packaging-desktop-app.md",sourceDirName:"cookbook",slug:"/cookbook/packaging-desktop-app",permalink:"/docs/flet-docs/docs/cookbook/packaging-desktop-app",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/cookbook/packaging-desktop-app.md",tags:[],version:"current",frontMatter:{title:"Packaging desktop app",sidebar_label:"Packaging desktop app"}},c={},l=[{value:"Customizing package icon",id:"customizing-package-icon",level:2},{value:"Packaging assets",id:"packaging-assets",level:2},{value:"Customizing macOS bundle",id:"customizing-macos-bundle",level:2},{value:"Customizing Windows executable metadata",id:"customizing-windows-executable-metadata",level:2},{value:"Using CI for multi-platform packaging",id:"using-ci-for-multi-platform-packaging",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.admonition,{title:"A better way to package is here",type:"danger",children:[(0,t.jsxs)(n.p,{children:["You can now use ",(0,t.jsx)(n.code,{children:"flet build"})," command to package your Flet app into executable or install bundle for\nmacOS, Windows and Linux."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"flet build"})," does not longer rely on PyInstaller like ",(0,t.jsx)(n.code,{children:"flet pack"})," does, but uses Flutter SDK to produce a fast, offline, fully customizable (your own icons, about dialog and metadata) executable for Windows, Linux and macOS with Python runtime embedded into executable and running in-process."]}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.a,{href:"/docs/publish",children:"Follow this guide for desktop packaging"})})]}),"\n",(0,t.jsx)(n.p,{children:"Flet Python app and all its dependencies can be packaged into an executable and user can run it on their computer without installing a Python interpreter or any modules."}),"\n",(0,t.jsxs)(n.p,{children:["Flet wraps ",(0,t.jsx)(n.a,{href:"https://pyinstaller.org/en/stable/index.html",children:"PyInstaller"})," API to package Flet Python app and all its dependencies into a single package for Windows, macOS and Linux. To create Windows package, PyInstaller must be run on Windows; to build Linux app, it must be run on Linux; and to build macOS app - on macOS."]}),"\n",(0,t.jsx)(n.p,{children:"Start from installing PyInstaller:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install pyinstaller\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Navigate to the directory where your ",(0,t.jsx)(n.code,{children:".py"})," file is located and build your app with the following command:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"flet pack your_program.py\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Your bundled Flet app should now be available in ",(0,t.jsx)(n.code,{children:"dist"})," folder. Try running the program to see if it works."]}),"\n",(0,t.jsx)(n.p,{children:"On macOS:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"open dist/your_program.app\n"})}),"\n",(0,t.jsx)(n.p,{children:"on Windows:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dist\\your_program.exe\n"})}),"\n",(0,t.jsx)(n.p,{children:"on Linux:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"dist/your_program\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Now you can just zip the contents of ",(0,t.jsx)(n.code,{children:"dist"})," folder and distribute to your users! They don't need Python or Flet installed to run your packaged program - what a great alternative to Electron!"]}),"\n",(0,t.jsxs)(n.p,{children:["By default, an executable/bundle has the same name as a Python script. You can change it with ",(0,t.jsx)(n.code,{children:"--name"})," argument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"flet pack your_program.py --name bundle_name\n"})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-package-icon",children:"Customizing package icon"}),"\n",(0,t.jsxs)(n.p,{children:["Default bundle app icon is diskette which might be confusing for younger developers missed those ancient times when ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Floppy_disk",children:"floppy disks"})," were used to store computer data."]}),"\n",(0,t.jsxs)(n.p,{children:["You can replace the icon with your own by adding ",(0,t.jsx)(n.code,{children:"--icon"})," argument:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"flet pack your_program.py --icon <your-image.png>\n"})}),"\n",(0,t.jsxs)(n.p,{children:["PyInstaller will convert provided PNG to a platform specific format (",(0,t.jsx)(n.code,{children:".ico"})," for Windows and ",(0,t.jsx)(n.code,{children:".icns"})," for macOS), but you need to install ",(0,t.jsx)(n.a,{href:"https://pillow.readthedocs.io/en/stable/",children:"Pillow"})," module for that:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"pip install pillow\n"})}),"\n",(0,t.jsx)(n.h2,{id:"packaging-assets",children:"Packaging assets"}),"\n",(0,t.jsxs)(n.p,{children:["Your Flet app can include ",(0,t.jsx)(n.a,{href:"/docs/controls/image#src",children:"assets"}),". Provided app assets are in ",(0,t.jsx)(n.code,{children:"assets"})," folder next to ",(0,t.jsx)(n.code,{children:"your_program.py"})," they can be added to an application package with ",(0,t.jsx)(n.code,{children:"--add-data"})," argument, on macOS/Linux:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'flet pack your_program.py --add-data "assets:assets"\n'})}),"\n",(0,t.jsxs)(n.p,{children:["On Windows ",(0,t.jsx)(n.code,{children:"assets;assets"})," must be delimited with ",(0,t.jsx)(n.code,{children:";"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:'flet pack your_program.py --add-data "assets;assets"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"customizing-macos-bundle",children:"Customizing macOS bundle"}),"\n",(0,t.jsxs)(n.p,{children:["macOS bundle details can be customized with the following ",(0,t.jsx)(n.code,{children:"flet pack"})," macOS-specific arguments:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--product-name"})," - display name of macOS bundle, shown in Dock, Activity Monitor, About dialog."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--product-version"}),' - bundle version shown in "About" dialog.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--copyright"}),' - copyright notice shown in "About" dialog.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--bundle-id"})," unique bundle ID."]}),"\n"]}),"\n",(0,t.jsx)("img",{src:"/docs/flet-docs/img/docs/getting-started/package-desktop/flet-app-bundle-about.png",className:"screenshot-50"}),"\n",(0,t.jsx)(n.h2,{id:"customizing-windows-executable-metadata",children:"Customizing Windows executable metadata"}),"\n",(0,t.jsxs)(n.p,{children:['Windows executable "Details" properties dialog can be customized with the following ',(0,t.jsx)(n.code,{children:"flet pack"})," arguments:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--product-name"}),' - "Product name" field.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--product-version"}),' - "Product version" field.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--file-version"}),' - "File version" field.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--file-description"}),' - "File description" field, also program display name in Task Manager.']}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--copyright"}),' - "Copyright" field.']}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"using-ci-for-multi-platform-packaging",children:"Using CI for multi-platform packaging"}),"\n",(0,t.jsx)(n.p,{children:"To create an app package with PyInstaller for specific OS it must be run on that OS."}),"\n",(0,t.jsxs)(n.p,{children:["If you don't have an access to Mac or PC you can bundle your app for all three platforms with ",(0,t.jsx)(n.a,{href:"https://www.appveyor.com",children:"AppVeyor"})," - Continuous Integration service for Windows, Linux and macOS. In short, Continuous Integration (CI) is an automated process of building, testing and deploying (Continuous Delivery - CD) application on every push to a repository."]}),"\n",(0,t.jsx)(n.p,{children:"AppVeyor is free for open source projects hosted on GitHub, GitLab and Bitbucket. To use AppVeyor, push your app to a repository within one of those source-control providers."}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"AppVeyor is the company behind Flet."})}),"\n",(0,t.jsxs)(n.p,{children:["To get started with AppVeyor ",(0,t.jsx)(n.a,{href:"https://ci.appveyor.com/signup",children:"sign up for a free account"}),"."]}),"\n",(0,t.jsx)(n.p,{children:'Click "New project" button, authorize AppVeyor to access your GitHub, GitLab or Bitbucket account, choose a repository with your program and create a new project.'}),"\n",(0,t.jsxs)(n.p,{children:["Now, to configure packaging of your app for Windows, Linux and macOS, add file with ",(0,t.jsx)(n.a,{href:"https://github.com/flet-dev/python-ci-example/blob/main/appveyor.yml",children:"the following contents"})," into the root of your repository ",(0,t.jsx)(n.code,{children:"appveyor.yml"}),". ",(0,t.jsx)(n.code,{children:"appveyor.yml"})," is a build configuration file, or CI workflow, describing build, test, packaging and deploy commands that must be run on every commit."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["You can just fork ",(0,t.jsx)(n.a,{href:"https://github.com/flet-dev/python-ci-example",children:"flet-dev/python-ci-example"})," repository and customize it to your needs."]})}),"\n",(0,t.jsx)(n.p,{children:"When you push any changes to GitHub repository, AppVeyor will automatically start a new build:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-docs/img/docs/getting-started/appveyor-ci-flet-python-project.png",className:"screenshot-70"}),"\n",(0,t.jsxs)(n.p,{children:["What that ",(0,t.jsx)(n.a,{href:"https://ci.appveyor.com/project/flet-dev/python-ci-example",children:"CI workflow"})," does on every push to the repository:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clones the repository to a clean virtual machine."}),"\n",(0,t.jsxs)(n.li,{children:["Installs app dependencies using ",(0,t.jsx)(n.code,{children:"pip"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Runs ",(0,t.jsx)(n.code,{children:"flet pack"})," to package Python app into a bundle for ",(0,t.jsx)(n.strong,{children:"Windows"}),", ",(0,t.jsx)(n.strong,{children:"macOS"})," and ",(0,t.jsx)(n.strong,{children:"Ubuntu"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Zip/Tar app bundles and uploads them to ",(0,t.jsx)(n.a,{href:"https://ci.appveyor.com/project/flet-dev/python-ci-example/build/job/g2j2lhstv04eyxcm/artifacts",children:'"Artifacts"'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Uploads app bundles to ",(0,t.jsx)(n.a,{href:"https://github.com/flet-dev/python-ci-example/releases",children:(0,t.jsx)(n.strong,{children:"GitHub releases"})})," when a new tag is pushed. Just push a new tag to make a release!"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"GITHUB_TOKEN",type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"GITHUB_TOKEN"})," in ",(0,t.jsx)(n.code,{children:"appveyor.yml"}),' is a GitHub Personal Access Token (PAT) used by AppVeyor to publish created packages to repository "Releases". You need to generate your own token and replace it in ',(0,t.jsx)(n.code,{children:"appveyor.yml"}),". Login to your GitHub account and navigate to ",(0,t.jsx)(n.a,{href:"https://github.com/settings/tokens",children:"Personal access token"}),' page. Click "Generate new token" and select "public_repo" or "repo" scope for public or private repository respectively. Copy generated token to a clipboard and return to AppVeyor Portal. Navigate to ',(0,t.jsx)(n.a,{href:"https://ci.appveyor.com/tools/encrypt",children:"Encrypt configuration data"}),' page and paste token to "Value to encrypt" field, click "Encrypt" button. Put encrypted value under ',(0,t.jsx)(n.code,{children:"GITHUB_TOKEN"})," in your ",(0,t.jsx)(n.code,{children:"appveyor.yml"}),"."]})}),"\n",(0,t.jsx)(n.p,{children:'Configure AppVeyor for your Python project, push a new tag to a repository and "automagically" get desktop bundle for all three platforms in GitHub releases! \ud83c\udf89'}),"\n",(0,t.jsx)("img",{src:"/docs/flet-docs/img/docs/getting-started/appveyor-ci-flet-github-releases.png",className:"screenshot-70"}),"\n",(0,t.jsxs)(n.p,{children:["In addition to ",(0,t.jsx)(n.a,{href:"https://www.appveyor.com/docs/deployment/github/",children:"GitHub Releases"}),", you can also configure releasing of artifacts to ",(0,t.jsx)(n.a,{href:"https://www.appveyor.com/docs/deployment/amazon-s3/",children:"Amazon S3 bucket"})," or ",(0,t.jsx)(n.a,{href:"https://www.appveyor.com/docs/deployment/azure-blob/",children:"Azure Blob storage"}),"."]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>r});var t=o(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);