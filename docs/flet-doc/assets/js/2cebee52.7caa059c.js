"use strict";(self.webpackChunkflet_dev=self.webpackChunkflet_dev||[]).push([[17692],{73842:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>r,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var t=n(74848),a=n(28453);const o={title:"Creating chat app in Python",sidebar_label:"Chat app"},l=void 0,i={id:"tutorials/python-chat",title:"Creating chat app in Python",description:"In this tutorial we are going to create a trivial in-memory Chat app that will help you understand Flet framework basics. This app could be a good starting point to creating your own more complex and useful projects.",source:"@site/docs/tutorials/python-chat.md",sourceDirName:"tutorials",slug:"/tutorials/python-chat",permalink:"/docs/flet-doc/docs/tutorials/python-chat",draft:!1,unlisted:!1,editUrl:"https://github.com/flet-dev/website/edit/main/docs/tutorials/python-chat.md",tags:[],version:"current",frontMatter:{title:"Creating chat app in Python",sidebar_label:"Chat app"},sidebar:"docs",previous:{title:"Solitaire game",permalink:"/docs/flet-doc/docs/tutorials/python-solitaire"},next:{title:"Reference",permalink:"/docs/flet-doc/docs/reference"}},r={},c=[{value:"Getting started with Flet",id:"getting-started-with-flet",level:2},{value:"Adding page controls and handling events",id:"adding-page-controls-and-handling-events",level:2},{value:"Broadcasting chat messages",id:"broadcasting-chat-messages",level:2},{value:"User name dialog",id:"user-name-dialog",level:2},{value:"Enhancing user interface",id:"enhancing-user-interface",level:2},{value:"Reusable user controls",id:"reusable-user-controls",level:3},{value:"Laying out controls",id:"laying-out-controls",level:3},{value:"Keyboard support",id:"keyboard-support",level:3},{value:"Focusing input controls",id:"focusing-input-controls",level:4},{value:"Submitting forms on <code>Enter</code>",id:"submitting-forms-on-enter",level:4},{value:"Entering multiline messages",id:"entering-multiline-messages",level:4},{value:"Animated scrolling to the last message",id:"animated-scrolling-to-the-last-message",level:3},{value:"Page title",id:"page-title",level:3},{value:"Deploying the app",id:"deploying-the-app",level:2},{value:"What&#39;s next",id:"whats-next",level:2},{value:"Summary",id:"summary",level:2}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.p,{children:"In this tutorial we are going to create a trivial in-memory Chat app that will help you understand Flet framework basics. This app could be a good starting point to creating your own more complex and useful projects."}),"\n",(0,t.jsx)(s.p,{children:"In this tutorial you will learn how to:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#getting-started-with-flet",children:"Create your first Flet app"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#adding-page-controls-and-handling-events",children:"Add page controls and handle events"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#broadcasting-chat-messages",children:"Broadcast messages using built-in PubSub library"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#user-name-dialog",children:"Use AlertDialog control for accepting user name"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#enhancing-user-interface",children:"Enhance user interface with reusable controls"})}),"\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.a,{href:"#deploying-the-app",children:"Deploy the app as a web app"})}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"The complete application will look like this:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat.gif",className:"screenshot-50"}),"\n",(0,t.jsxs)(s.p,{children:["You can play with a live demo ",(0,t.jsx)(s.a,{href:"https://flet-chat.fly.dev",children:"here"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["The full code for the chat app can be found ",(0,t.jsx)(s.a,{href:"https://github.com/flet-dev/examples/blob/main/python/tutorials/chat/chat.py",children:"here"}),"."]}),"\n",(0,t.jsx)(s.h2,{id:"getting-started-with-flet",children:"Getting started with Flet"}),"\n",(0,t.jsx)(s.p,{children:'It\'s a tradition to start with "Hello, world!" app!'}),"\n",(0,t.jsx)(s.p,{children:"To create a multi-platform app in Python with Flet, you don't need to know HTML, CSS or JavaScript, but you do need a basic knowledge of Python and object-oriented programming."}),"\n",(0,t.jsxs)(s.p,{children:["Before you can create your first Flet app, you need to ",(0,t.jsx)(s.a,{href:"/docs/getting-started/",children:"setup your development environment"}),", which requires Python 3.9 or above and ",(0,t.jsx)(s.code,{children:"flet"})," package."]}),"\n",(0,t.jsxs)(s.p,{children:["Once you have Flet installed, let's ",(0,t.jsx)(s.a,{href:"/docs/getting-started/create-flet-app",children:"create"})," a simple hello-world app."]}),"\n",(0,t.jsxs)(s.p,{children:["Create ",(0,t.jsx)(s.code,{children:"hello.py"})," with the following contents:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'import flet as ft\n\ndef main(page: ft.Page):\n    page.add(ft.Text(value="Hello, world!"))\n\nft.app(main)\n'})}),"\n",(0,t.jsx)(s.p,{children:"Run this app and you will see a new window with a greeting:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/tutorial/todo-app-hello-world.png",className:"screenshot-40"}),"\n",(0,t.jsx)(s.h2,{id:"adding-page-controls-and-handling-events",children:"Adding page controls and handling events"}),"\n",(0,t.jsx)(s.p,{children:"To start, we want to be able to take user input (chat message) and show messages history on the screen. The layout for this step could look like this:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-layout-1.svg",className:"screenshot-70"}),"\n",(0,t.jsx)(s.p,{children:"To implement this layout, we will be using these Flet controls:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/column",children:"Column"})," - a container to display chat messages (Text controls) vertically."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/text",children:"Text"})," - chat message displayed in the chat Column."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/textfield",children:"TextField"})," - input control used for taking new message input from the user."]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/elevatedbutton",children:"ElevatedButton"}),' - "Send" button that will add new message to the chat Column.']}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/row",children:"Row"})," - a container to display TextField and ElevatedButton horizontally."]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["Create ",(0,t.jsx)(s.code,{children:"chat.py"})," with the following contents:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'import flet as ft\n\ndef main(page: ft.Page):\n    chat = ft.Column()\n    new_message = ft.TextField()\n\n    def send_click(e):\n        chat.controls.append(ft.Text(new_message.value))\n        new_message.value = ""\n        page.update()\n\n    page.add(\n        chat, ft.Row(controls=[new_message, ft.ElevatedButton("Send", on_click=send_click)])\n    )\n\nft.app(main)\n'})}),"\n",(0,t.jsxs)(s.p,{children:['When user clicks on the "Send" button, it triggers ',(0,t.jsx)(s.code,{children:"on_click"})," event which calls ",(0,t.jsx)(s.code,{children:"send_click"})," method. ",(0,t.jsx)(s.code,{children:"send_click"})," then adds new ",(0,t.jsx)(s.code,{children:"Text"})," control to the list of Column ",(0,t.jsx)(s.code,{children:"controls"})," and clears ",(0,t.jsx)(s.code,{children:"new_message"})," TextField value."]}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["After any properties of a control are updated, an ",(0,t.jsx)(s.code,{children:"update()"})," method of the control (or its parent control) should be called for the update to take effect."]})}),"\n",(0,t.jsx)(s.p,{children:"Chat app now looks like this:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-1.png",className:"screenshot-40"}),"\n",(0,t.jsx)(s.h2,{id:"broadcasting-chat-messages",children:"Broadcasting chat messages"}),"\n",(0,t.jsx)(s.p,{children:"In the previous step we have created a simple app that takes input from the user and displays chats messages on the screen."}),"\n",(0,t.jsx)(s.p,{children:"If you open this app in two web browser tabs, it will create two app sessions. Each session will have its own list of messages."}),"\n",(0,t.jsxs)(s.admonition,{type:"note",children:[(0,t.jsx)(s.p,{children:"To open open your app in two web browser tabs locally, run the following command:"}),(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{children:"flet run --web <path_to_your_app>\n"})}),(0,t.jsx)(s.p,{children:"Once it is opened, copy the url and paste it into a new tab."})]}),"\n",(0,t.jsx)(s.p,{children:"To build a realtime chat app, you need to somehow pass the messages between chat app sessions. When a user sends a message, it should be broadcasted to all other app sessions and displayed on their pages."}),"\n",(0,t.jsxs)(s.p,{children:["Flet provides a simple built-in ",(0,t.jsx)(s.a,{href:"/docs/cookbook/pub-sub",children:"PubSub"})," mechanism for asynchronous communication between page sessions."]}),"\n",(0,t.jsx)(s.p,{children:"First, we need subscribe the user to receive broadcast messages:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"    page.pubsub.subscribe(on_message)\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"pubsub.subscribe()"})," method will add current app session to the list of subscribers. It accepts ",(0,t.jsx)(s.code,{children:"handler"})," as an argument, that will later be called at the moment a publisher calls ",(0,t.jsx)(s.code,{children:"pubsub.send_all()"})," method."]}),"\n",(0,t.jsxs)(s.p,{children:["In the ",(0,t.jsx)(s.code,{children:"handler"})," we will be adding new message (",(0,t.jsx)(s.code,{children:"Text"}),") to the list of chat ",(0,t.jsx)(s.code,{children:"controls"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'    def on_message(message: Message):\n        chat.controls.append(ft.Text(f"{message.user}: {message.text}"))\n        page.update()\n'})}),"\n",(0,t.jsxs)(s.p,{children:["Finally, you need to call ",(0,t.jsx)(s.code,{children:"pubsub.send_all()"}),' method when the user clicks on "Send" button:']}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'    def send_click(e):\n        page.pubsub.send_all(Message(user=page.session_id, text=new_message.value))\n        new_message.value = ""\n        page.update()\n\n    page.add(chat, ft.Row([new_message, ft.ElevatedButton("Send", on_click=send_click)]))   \n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"pubsub.send_all()"})," will call the ",(0,t.jsx)(s.code,{children:"on_message()"})," and pass on the Message object down to it."]}),"\n",(0,t.jsx)(s.p,{children:"Here is the full code for this step:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'import flet as ft\n\nclass Message():\n    def __init__(self, user: str, text: str):\n        self.user = user\n        self.text = text\n\ndef main(page: ft.Page):\n\n    chat = ft.Column()\n    new_message = ft.TextField()\n\n    def on_message(message: Message):\n        chat.controls.append(ft.Text(f"{message.user}: {message.text}"))\n        page.update()\n\n    page.pubsub.subscribe(on_message)\n\n    def send_click(e):\n        page.pubsub.send_all(Message(user=page.session_id, text=new_message.value))\n        new_message.value = ""\n        page.update()\n\n    page.add(chat, ft.Row([new_message, ft.ElevatedButton("Send", on_click=send_click)]))\n\nft.app(main)\n'})}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-2.gif",className:"screenshot-100"}),"\n",(0,t.jsx)(s.h2,{id:"user-name-dialog",children:"User name dialog"}),"\n",(0,t.jsxs)(s.p,{children:["Chat app that you have created in the previous step has basic functionality needed to exchange messages between user sessions. It is not very user-friendly though, since it shows ",(0,t.jsx)(s.code,{children:"session_id"})," that sent a message, which doesn't tell much about who you are communicating with."]}),"\n",(0,t.jsxs)(s.p,{children:["Let's improve our app to show user name instead of ",(0,t.jsx)(s.code,{children:"session_id"})," for each message. To capture user name, we will be using ",(0,t.jsx)(s.a,{href:"/docs/controls/alertdialog",children:(0,t.jsx)(s.code,{children:"AlertDialog"})})," control. Let's add it to the page:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'    user_name = ft.TextField(label="Enter your name")\n\n    page.dialog = ft.AlertDialog(\n        open=True,\n        modal=True,\n        title=ft.Text("Welcome!"),\n        content=ft.Column([user_name], tight=True),\n        actions=[ft.ElevatedButton(text="Join chat", on_click=join_click)],\n        actions_alignment="end",\n    )\n'})}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["A dialog will be opened on the start of the program since we have set its ",(0,t.jsx)(s.code,{children:"open"})," property to ",(0,t.jsx)(s.code,{children:"True"}),"."]})}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/username-dialog.png",className:"screenshot-40"}),"\n",(0,t.jsxs)(s.p,{children:['When the user clicks on "Join chat" button, it will call ',(0,t.jsx)(s.code,{children:"join_click"})," method that should send a message to all subscribers, informing them that the user has joined the chat. This message should look different from the regular chat message, for example, like this:"]}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-4.png",className:"screenshot-40"}),"\n",(0,t.jsxs)(s.p,{children:["Let's add ",(0,t.jsx)(s.code,{children:"message_type"})," property to the ",(0,t.jsx)(s.code,{children:"Message"})," class to differentiate between login and chat messages:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"class Message():\n    def __init__(self, user: str, text: str, message_type: str):\n        self.user = user\n        self.text = text\n        self.message_type = message_type\n"})}),"\n",(0,t.jsxs)(s.p,{children:["We will be checking ",(0,t.jsx)(s.code,{children:"message_type"})," in ",(0,t.jsx)(s.code,{children:"on_message"})," method:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'def on_message(message: Message):\n    if message.message_type == "chat_message":\n        chat.controls.append(ft.Text(f"{message.user}: {message.text}"))\n    elif message.message_type == "login_message":\n        chat.controls.append(\n            ft.Text(message.text, italic=True, color=ft.Colors.BLACK45, size=12)\n        )\n    page.update()\n'})}),"\n",(0,t.jsx)(s.p,{children:'Messages of "login_message" and "chat_message" types will now be sent on two events: when user joins the chat and when user sends a message.'}),"\n",(0,t.jsxs)(s.p,{children:["Let's create ",(0,t.jsx)(s.code,{children:"join_click"})," method:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'def join_click(e):\n    if not user_name.value:\n        user_name.error_text = "Name cannot be blank!"\n        user_name.update()\n    else:\n        page.session.set("user_name", user_name.value)\n        page.dialog.open = False\n        page.pubsub.send_all(Message(user=user_name.value, text=f"{user_name.value} has joined the chat.", message_type="login_message"))\n        page.update()\n'})}),"\n",(0,t.jsxs)(s.p,{children:["We used ",(0,t.jsx)(s.a,{href:"/docs/cookbook/session-storage",children:"page session storage"})," to store user_name for its future use in ",(0,t.jsx)(s.code,{children:"send_click"})," method to send chat messages."]}),"\n",(0,t.jsx)(s.admonition,{type:"note",children:(0,t.jsxs)(s.p,{children:["User name dialog will close as soon as we set its ",(0,t.jsx)(s.code,{children:"open"})," property to ",(0,t.jsx)(s.code,{children:"False"})," and call ",(0,t.jsx)(s.code,{children:"update()"})," method."]})}),"\n",(0,t.jsxs)(s.p,{children:["Finally, let's update ",(0,t.jsx)(s.code,{children:"send_click"})," method to use ",(0,t.jsx)(s.code,{children:"user_name"})," that we previously saved using ",(0,t.jsx)(s.code,{children:"page.session"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'def send_click(e):\n    page.pubsub.send_all(Message(user=page.session.get(\'user_name\'), text=new_message.value, message_type="chat_message"))\n    new_message.value = ""\n    page.update()\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The full code for this step can be found ",(0,t.jsx)(s.a,{href:"https://github.com/flet-dev/examples/blob/main/python/tutorials/chat/chat_3.py",children:"here"}),"."]}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-3.gif",className:"screenshot-100"}),"\n",(0,t.jsx)(s.h2,{id:"enhancing-user-interface",children:"Enhancing user interface"}),"\n",(0,t.jsx)(s.p,{children:"Chat app that you have created in the previous step already serves its purpose of exchanging messages between users with basic login functionality."}),"\n",(0,t.jsxs)(s.p,{children:["Before moving on to ",(0,t.jsx)(s.a,{href:"#deploying-the-app",children:"deploying your app"}),", we suggest adding some extra features to it that will improve user experience and make the app look more professional."]}),"\n",(0,t.jsx)(s.h3,{id:"reusable-user-controls",children:"Reusable user controls"}),"\n",(0,t.jsx)(s.p,{children:"You may want to show messages in a different format, like this:"}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-layout-chatmessage.svg",className:"screenshot-70"}),"\n",(0,t.jsxs)(s.p,{children:["Chat message will now be a ",(0,t.jsx)(s.code,{children:"Row"})," containing ",(0,t.jsx)(s.a,{href:"/docs/controls/circleavatar",children:(0,t.jsx)(s.code,{children:"CircleAvatar"})})," with username initials and ",(0,t.jsx)(s.code,{children:"Column"})," that contains two ",(0,t.jsx)(s.code,{children:"Text"})," controls: user name and message text."]}),"\n",(0,t.jsxs)(s.p,{children:["We will need to show quite a few chat messages in the chat app, so it makes sense to create your own ",(0,t.jsx)(s.a,{href:"/docs/getting-started/custom-controls",children:"reusable control"}),". Lets create a new ",(0,t.jsx)(s.code,{children:"ChatMessage"})," class that will inherit from ",(0,t.jsx)(s.code,{children:"Row"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["When creating an instance of ",(0,t.jsx)(s.code,{children:"ChatMessage"})," class, we will pass a ",(0,t.jsx)(s.code,{children:"Message"})," object as an argument and then ",(0,t.jsx)(s.code,{children:"ChatMessage"})," will display itself based on ",(0,t.jsx)(s.code,{children:"message.user_name"})," and ",(0,t.jsx)(s.code,{children:"message.text"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'class ChatMessage(ft.Row):\n    def __init__(self, message: Message):\n        super().__init__()\n        self.vertical_alignment = ft.CrossAxisAlignment.START\n        self.controls=[\n                ft.CircleAvatar(\n                    content=ft.Text(self.get_initials(message.user_name)),\n                    color=ft.Colors.WHITE,\n                    bgcolor=self.get_avatar_color(message.user_name),\n                ),\n                ft.Column(\n                    [\n                        ft.Text(message.user_name, weight="bold"),\n                        ft.Text(message.text, selectable=True),\n                    ],\n                    tight=True,\n                    spacing=5,\n                ),\n            ]\n\n    def get_initials(self, user_name: str):\n        return user_name[:1].capitalize()\n\n    def get_avatar_color(self, user_name: str):\n        colors_lookup = [\n            ft.Colors.AMBER,\n            ft.Colors.BLUE,\n            ft.Colors.BROWN,\n            ft.Colors.CYAN,\n            ft.Colors.GREEN,\n            ft.Colors.INDIGO,\n            ft.Colors.LIME,\n            ft.Colors.ORANGE,\n            ft.Colors.PINK,\n            ft.Colors.PURPLE,\n            ft.Colors.RED,\n            ft.Colors.TEAL,\n            ft.Colors.YELLOW,\n        ]\n        return colors_lookup[hash(user_name) % len(colors_lookup)]\n\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.code,{children:"ChatMessage"})," control extracts initials and algorithmically derives avatar color from a username.\nLater, if you decide to improve control layout or its logic, it won't affect the rest of the program - that's the power of encapsulation!"]}),"\n",(0,t.jsx)(s.h3,{id:"laying-out-controls",children:"Laying out controls"}),"\n",(0,t.jsxs)(s.p,{children:["Now you can use your brand new ",(0,t.jsx)(s.code,{children:"ChatMessage"})," to build a better layout for the chat app:"]}),"\n",(0,t.jsx)("img",{src:"/docs/flet-doc/img/docs/chat-tutorial/chat-layout-2.svg",className:"screenshot-70"}),"\n",(0,t.jsxs)(s.p,{children:["Instances of ",(0,t.jsx)(s.code,{children:"ChatMessage"})," will be created instead of plain ",(0,t.jsx)(s.code,{children:"Text"})," chat messages in ",(0,t.jsx)(s.code,{children:"on_message"})," method:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'    def on_message(message: Message):\n        if message.message_type == "chat_message":\n            m = ChatMessage(message)\n        elif message.message_type == "login_message":\n            m = ft.Text(message.text, italic=True, color=ft.Colors.BLACK45, size=12)\n        chat.controls.append(m)\n        page.update()\n'})}),"\n",(0,t.jsx)(s.p,{children:"Other improvements suggested with the new layout are:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/listview",children:(0,t.jsx)(s.code,{children:"ListView"})})," instead of ",(0,t.jsx)(s.code,{children:"Column"})," for displaying messages, to be able to scroll through the messages later"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"Container"})," for displaying border around ",(0,t.jsx)(s.code,{children:"ListView"})]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/docs/controls/iconbutton",children:(0,t.jsx)(s.code,{children:"IconButton"})})," instead of ",(0,t.jsx)(s.code,{children:"ElevatedButton"})," to send messages"]}),"\n",(0,t.jsxs)(s.li,{children:["Use of ",(0,t.jsx)(s.a,{href:"/docs/controls#expand",children:(0,t.jsx)(s.code,{children:"expand"})})," property for controls to fill available space"]}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Here is how you can implement this layout:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'    # Chat messages\n    chat = ft.ListView(\n        expand=True,\n        spacing=10,\n        auto_scroll=True,\n    )\n\n    # A new message entry form\n    new_message = ft.TextField(\n        hint_text="Write a message...",\n        autofocus=True,\n        shift_enter=True,\n        min_lines=1,\n        max_lines=5,\n        filled=True,\n        expand=True,\n        on_submit=send_message_click,\n    )\n\n    # Add everything to the page\n    page.add(\n        ft.Container(\n            content=chat,\n            border=ft.border.all(1, ft.Colors.OUTLINE),\n            border_radius=5,\n            padding=10,\n            expand=True,\n        ),\n        ft.Row(\n            [\n                new_message,\n                ft.IconButton(\n                    icon=ft.Icons.SEND_ROUNDED,\n                    tooltip="Send message",\n                    on_click=send_message_click,\n                ),\n            ]\n        ),\n    )\n'})}),"\n",(0,t.jsxs)(s.p,{children:["The full code for this step can be found ",(0,t.jsx)(s.a,{href:"https://github.com/flet-dev/examples/blob/main/python/tutorials/chat/chat.py",children:"here"}),"."]}),"\n",(0,t.jsx)(s.p,{children:"This is the final version of the chat app for the purpose of this tutorial. Below you can read more about the enhancements that we have made."}),"\n",(0,t.jsx)(s.h3,{id:"keyboard-support",children:"Keyboard support"}),"\n",(0,t.jsx)(s.h4,{id:"focusing-input-controls",children:"Focusing input controls"}),"\n",(0,t.jsxs)(s.p,{children:["All data entry controls have ",(0,t.jsx)(s.code,{children:"autofocus"})," property which when set to ",(0,t.jsx)(s.code,{children:"True"})," moves initial focus to the control. If there is more than one control on a page with ",(0,t.jsx)(s.code,{children:"autofocus"})," set, then the first one added to the page will get focus."]}),"\n",(0,t.jsxs)(s.p,{children:["We set ",(0,t.jsx)(s.code,{children:"autofocus=True"})," on a username TextField inside a dialog and then on a TextField for entering chat message to set initial focus on it when the dialog is closed."]}),"\n",(0,t.jsxs)(s.p,{children:['When a user click "Send" button or presses Enter to submit a chat message, TextField loses focus.\nTo programmatically set control focus we used ',(0,t.jsx)(s.a,{href:"/docs/controls/textfield#focus",children:(0,t.jsx)(s.code,{children:"TextField.focus()"})})," method."]}),"\n",(0,t.jsxs)(s.h4,{id:"submitting-forms-on-enter",children:["Submitting forms on ",(0,t.jsx)(s.code,{children:"Enter"})]}),"\n",(0,t.jsxs)(s.p,{children:["It's so tempting to submit forms with just pushing ",(0,t.jsx)(s.code,{children:"Enter"})," button on the keyboard! Type your name in the dialog, hit ",(0,t.jsx)(s.code,{children:"Enter"}),", type a new message, hit ",(0,t.jsx)(s.code,{children:"Enter"}),", type another, hit ",(0,t.jsx)(s.code,{children:"Enter"})," - no mouse involved at all! \ud83d\ude80"]}),"\n",(0,t.jsxs)(s.p,{children:["Flet has support for that by providing ",(0,t.jsx)(s.a,{href:"/docs/controls/textfield#on_submit",children:(0,t.jsx)(s.code,{children:"TextField.on_submit"})})," event handler which fires when a user press ",(0,t.jsx)(s.code,{children:"Enter"})," button while the focus is on the TextField."]}),"\n",(0,t.jsx)(s.h4,{id:"entering-multiline-messages",children:"Entering multiline messages"}),"\n",(0,t.jsxs)(s.p,{children:["What about multiline TextFields where ",(0,t.jsx)(s.code,{children:"Enter"})," must advance a cursor to the next line? We've got that covered too! ",(0,t.jsx)(s.code,{children:"TextField"})," control has ",(0,t.jsx)(s.a,{href:"/docs/controls/textfield#shift_enter",children:(0,t.jsx)(s.code,{children:"shift_enter"})})," property which when set to ",(0,t.jsx)(s.code,{children:"True"})," enables Discord-like behavior: to get to a new line user presses ",(0,t.jsx)(s.code,{children:"Shift"}),"+",(0,t.jsx)(s.code,{children:"Enter"})," while hitting just ",(0,t.jsx)(s.code,{children:"Enter"})," submits a form."]}),"\n",(0,t.jsx)(s.h3,{id:"animated-scrolling-to-the-last-message",children:"Animated scrolling to the last message"}),"\n",(0,t.jsxs)(s.p,{children:["Noticed a nice animation of scrolling to the last message in a chat window? It could be enabled by setting ",(0,t.jsx)(s.a,{href:"/docs/controls/listview#auto_scroll",children:(0,t.jsx)(s.code,{children:"ListView.auto_scroll"})})," property to ",(0,t.jsx)(s.code,{children:"True"}),". The top most ",(0,t.jsx)(s.code,{children:"Page"})," class, being a scrollable container itself, also supports ",(0,t.jsx)(s.a,{href:"/docs/controls/page#auto_scroll",children:(0,t.jsx)(s.code,{children:"auto_scroll"})}),"."]}),"\n",(0,t.jsx)(s.h3,{id:"page-title",children:"Page title"}),"\n",(0,t.jsx)(s.p,{children:"Final touch - page title that could be changed as simply as:"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'page.title = "Flet Chat"\npage.update()\n'})}),"\n",(0,t.jsx)(s.h2,{id:"deploying-the-app",children:"Deploying the app"}),"\n",(0,t.jsx)(s.p,{children:"Congratulations! You have created your Chat app in Python with Flet, and it looks awesome!"}),"\n",(0,t.jsx)(s.p,{children:"Now it's time to share your app with the world!"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.a,{href:"/docs/publish/web/dynamic-website/hosting",children:"Follow these instructions"})," to deploy your Flet app as a web app to Fly.io or Replit."]}),"\n",(0,t.jsx)(s.h2,{id:"whats-next",children:"What's next"}),"\n",(0,t.jsx)(s.p,{children:"There are plenty of features we could implement to improve this chat app:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Disconnect, reconnect, session timeout"}),"\n",(0,t.jsx)(s.li,{children:"Upload/download images"}),"\n",(0,t.jsx)(s.li,{children:"Authentication, avatars"}),"\n",(0,t.jsx)(s.li,{children:"Using database for the storage"}),"\n",(0,t.jsx)(s.li,{children:"Chat channels, topics"}),"\n",(0,t.jsx)(s.li,{children:"Full-text search"}),"\n",(0,t.jsx)(s.li,{children:"Emojis, markdown"}),"\n",(0,t.jsx)(s.li,{children:"Bots"}),"\n",(0,t.jsx)(s.li,{children:"Mobile app"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:"Please let us know if you would like to contribute to the app/tutorial and share it with other Flet developers."}),"\n",(0,t.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsx)(s.p,{children:"In this tutorial, you have learnt how to:"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Create a simple Flet app;"}),"\n",(0,t.jsx)(s.li,{children:"Add page controls and handle events;"}),"\n",(0,t.jsx)(s.li,{children:"Use built in PubSub library;"}),"\n",(0,t.jsx)(s.li,{children:"User AlertDialog for entering user name;"}),"\n",(0,t.jsx)(s.li,{children:"Build page layout with reusable controls;"}),"\n",(0,t.jsx)(s.li,{children:"Deploy your Flet app to the web;"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:["For further reading you can explore ",(0,t.jsx)(s.a,{href:"/docs/controls",children:"controls"})," and ",(0,t.jsx)(s.a,{href:"https://github.com/flet-dev/examples/tree/main/python",children:"examples repository"}),"."]}),"\n",(0,t.jsxs)(s.p,{children:["We would love to hear your feedback! Please drop us an ",(0,t.jsx)(s.a,{href:"mailto:hello@flet.dev",children:"email"}),", join the discussion on ",(0,t.jsx)(s.a,{href:"https://discord.gg/dzWXP8SHG8",children:"Discord"}),"."]})]})}function h(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,s,n)=>{n.d(s,{R:()=>l,x:()=>i});var t=n(96540);const a={},o=t.createContext(a);function l(e){const s=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function i(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:l(e.components),t.createElement(o.Provider,{value:s},e.children)}}}]);